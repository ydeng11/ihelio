<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Distributed System on iHelio</title>
    <link>/categories/distributed-system/</link>
    <description>Recent content in Distributed System on iHelio</description>
    <image>
      <title>iHelio</title>
      <url>/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.144.2</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 16 Sep 2023 16:17:15 -0400</lastBuildDate>
    <atom:link href="/categories/distributed-system/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>FLP impossibility in plain language</title>
      <link>/posts/2023/flp-impossibility-in-plain-language/</link>
      <pubDate>Sat, 16 Sep 2023 16:17:15 -0400</pubDate>
      <guid>/posts/2023/flp-impossibility-in-plain-language/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;FLP impossibility is to prove there is no algorithm can really achieve totally correct consensus in asychronous system under assumption at most one process is faulty. The paper is very famous and also difficult to understand given the wording. This article is to explain FLP impossibility in a plain way.&lt;/p&gt;
&lt;h2 id=&#34;aschronous-system&#34;&gt;Aschronous System&lt;/h2&gt;
&lt;p&gt;In FLP paper, there are some settings/assumptions made to describe an aschronous system which is used in the proof. This system has:&lt;/p&gt;</description>
    </item>
    <item>
      <title>The elegant consensus algorithm - Multi-Paxos - in Java gRPC</title>
      <link>/posts/2023/the-elegant-consensus-algorithm---multi-paxos---in-java-grpc/</link>
      <pubDate>Sat, 16 Sep 2023 16:17:15 -0400</pubDate>
      <guid>/posts/2023/the-elegant-consensus-algorithm---multi-paxos---in-java-grpc/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Paxos is a distributed consensus algorithm developed by Lamport. It is proved optimal and many systems are built based on it like chubby and zookeeper.&lt;/p&gt;
&lt;p&gt;But this article is not going to discuss Lamport&amp;rsquo;s orginal paper but focus on the engineering implementations. My colleague highly recommended Ongaro&amp;rsquo;s lecture of Paxos and said it is the best source of learning Paxos. I cannot agree more after studying it. That being said, I will briefly talk about Paxos and Multi-Paxos and dive into the engineering implementations.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
