<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Microservices on iHelio</title>
    <link>ihelio.today/tags/microservices/</link>
    <description>Recent content in Microservices on iHelio</description>
    <image>
      <title>iHelio</title>
      <url>ihelio.today/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>ihelio.today/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.128.2</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 16 Sep 2023 16:17:15 -0400</lastBuildDate>
    <atom:link href="ihelio.today/tags/microservices/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>gRPC tutorial - 1: Overview</title>
      <link>ihelio.today/posts/2023/grpc-tutorial---1/</link>
      <pubDate>Sat, 16 Sep 2023 16:17:15 -0400</pubDate>
      <guid>ihelio.today/posts/2023/grpc-tutorial---1/</guid>
      <description>What is gRPC gRPC is a high performance open-source freature-rich RPC (remote procedure calls) framework developed by google. “g” stands for many different meaning like green, good and etc.
It is a protocal that allows a program to
execute a procedure of another program located in other computer without the developer explicitly coding the details for the remote interaction gRPC is one kind of s2s call and widely used to replace REST API in the backend due to:</description>
    </item>
    <item>
      <title>gRPC tutorial - 2: Enviroment Setup</title>
      <link>ihelio.today/posts/2023/grpc-tutorial---2/</link>
      <pubDate>Sat, 16 Sep 2023 16:17:15 -0400</pubDate>
      <guid>ihelio.today/posts/2023/grpc-tutorial---2/</guid>
      <description>Environment Setup I am using Gradle and Intellij Idea for this project (Maven setting can be found here). The Gradle setting is shown as following:
plugins { id &amp;#34;com.google.protobuf&amp;#34; version &amp;#34;0.8.18&amp;#34; id &amp;#34;java&amp;#34; } group &amp;#39;today.ihelio.grpc.tutorial&amp;#39; version &amp;#39;1.0-SNAPSHOT&amp;#39; sourceCompatibility = 15 repositories { mavenCentral() } dependencies { implementation &amp;#39;junit:junit:4.13.1&amp;#39; testImplementation &amp;#39;org.junit.jupiter:junit-jupiter-api:5.8.1&amp;#39; testRuntimeOnly &amp;#39;org.junit.jupiter:junit-jupiter-engine:5.8.1&amp;#39; implementation group: &amp;#39;com.google.protobuf&amp;#39;, name: &amp;#39;protobuf-java&amp;#39;, version: &amp;#39;3.21.4&amp;#39; runtimeOnly group: &amp;#39;com.google.protobuf&amp;#39;, name: &amp;#39;protobuf-java-util&amp;#39;, version: &amp;#39;3.21.4&amp;#39; implementation group: &amp;#39;io.grpc&amp;#39;, name: &amp;#39;grpc-all&amp;#39;, version: &amp;#39;1.</description>
    </item>
    <item>
      <title>gRPC tutorial - 3: Unary Call</title>
      <link>ihelio.today/posts/2023/grpc-tutorial---3/</link>
      <pubDate>Sat, 16 Sep 2023 16:17:15 -0400</pubDate>
      <guid>ihelio.today/posts/2023/grpc-tutorial---3/</guid>
      <description>Unary call is very simple to understand, it is essentially a normal REST API call. Each request will get a single response from the server.
In this project, we implement unary call to create books in our store.
First, we need create book_message.proto which is a book pojo carrying the related info of book. Simply speaking, each message is pojo we are gonna use in our service.
syntax = &amp;#34;proto3&amp;#34;; package book; option java_multiple_files = true; option java_package = &amp;#34;today.</description>
    </item>
    <item>
      <title>gRPC tutorial - 4: Client Streaming</title>
      <link>ihelio.today/posts/2023/grpc-tutorial---4/</link>
      <pubDate>Sat, 16 Sep 2023 16:17:15 -0400</pubDate>
      <guid>ihelio.today/posts/2023/grpc-tutorial---4/</guid>
      <description>We will implement a function to upload image when we create the books like the cover and something else. And we would split the image into chunks and we upload them chunk by chunk until all data are transfered. As we defined earlier in the proto, we could have multiple images for one book. So we will need a function called uploadImage and uploade all images one by one.
Let&amp;rsquo;s start with the proto of image:</description>
    </item>
    <item>
      <title>gRPC tutorial - 5: Server Streaming</title>
      <link>ihelio.today/posts/2023/grpc-tutorial---5/</link>
      <pubDate>Sat, 16 Sep 2023 16:17:15 -0400</pubDate>
      <guid>ihelio.today/posts/2023/grpc-tutorial---5/</guid>
      <description>Regarding server streaming, we will implement a simplified recommendation service to recommend the books based on the popularity. Like client streaming, we would need a response handler - StreamObserver&amp;lt;RecommendBookResponse&amp;gt; - to handle a sequential of responses given one request.
Since this is a recommendation function, we would need search the books from our book store given the criteria. Thus we would need add a searchBook method to our book store.</description>
    </item>
    <item>
      <title>gRPC tutorial - 6: Bidirectional streaming</title>
      <link>ihelio.today/posts/2023/grpc-tutorial---6/</link>
      <pubDate>Sat, 16 Sep 2023 16:17:15 -0400</pubDate>
      <guid>ihelio.today/posts/2023/grpc-tutorial---6/</guid>
      <description>We will speed it up a bit in this chapter after implementing unary call and one direction streaming. As always, we need implement our core logic which includes our book store which handles rating update and computing and book service which handls the request and return response.
@Override public Book rateBook(String bookID, Integer rating) { Book book = inMemoryBookStore.getOrDefault(bookID, null); if (book == null) { throw NOT_FOUND.withDescription(&amp;#34;book not found&amp;#34;) .asRuntimeException(); } inMemoryBookStore.</description>
    </item>
    <item>
      <title>gRPC tutorial - 7: Takeaway</title>
      <link>ihelio.today/posts/2023/grpc-tutorial---7/</link>
      <pubDate>Sat, 16 Sep 2023 16:17:15 -0400</pubDate>
      <guid>ihelio.today/posts/2023/grpc-tutorial---7/</guid>
      <description>The four types of gRPC covers the majority use case when we design API under HTTP/2 since we could either send one request/response or multiple requests/responses in one call.
And using proto buffer enables us to separate the implementation of service, server and client which are the three components we need develop for each RPC service. Though the service could also depend on several components. But the idea is the simple, we need implement service, server and client for each RPC service and we don&amp;rsquo;t have to stick with one language for server and client.</description>
    </item>
    <item>
      <title>How to make a microservice with Quarkus</title>
      <link>ihelio.today/posts/2023/how-to-make-a-microservice-with-quarkus/</link>
      <pubDate>Sat, 16 Sep 2023 16:17:15 -0400</pubDate>
      <guid>ihelio.today/posts/2023/how-to-make-a-microservice-with-quarkus/</guid>
      <description>What is Quarkus Quarkus is a full-stack, Kubernetes-native Java framework that was developed by Red Hat. It first appeared in early 2019, aimed at optimizing Java specifically for containers and enabling it to become an effective platform in serverless environments.
The motivation behind Quarkus was to breathe new life into the Java ecosystem for modern cloud-native applications. It seeks to overcome the traditional shortcomings of Java, like slow startup time and high memory consumption, which are particularly notable in containerized environments.</description>
    </item>
  </channel>
</rss>
