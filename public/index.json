[{"content":"The Problem Six months ago, my Mac Mini began experiencing silent restarts after entering sleep mode. Initially, these incidents were sporadic and difficult to diagnose, but they gradually became more frequent, eventually occurring during active use. The random nature of these restarts made troubleshooting particularly challenging.\nInitial Troubleshooting Steps Following standard troubleshooting practices, I began with the most common solutions: rebooting and reinstalling macOS. Unfortunately, these approaches proved ineffective. The system continued to restart unexpectedly despite a clean OS installation.\nRoot Cause Analysis After analyzing the crash reports with assistance from ChatGPT üòè, I identified the underlying issue. The panic logs revealed a firmware problem with the internal SSD:\npanic(cpu 0 caller 0xfffffe001f136eec): ANS2 Recoverable Panic - assert failed: [11194]:MSP 0 asserted: assert 14838, args: 5 134807552 134807552!!!! - Timer(14) ... MSP FW Version: s5e.ofw.toshiba_tlc_3d_g5_2p_512gb-4.12.2.0.0.0 I was like ü§∑ as I thought I thought of many possibilities but didn\u0026rsquo;t see this coming. ChatGPT suggests couple methods to verify if the hardware is cooked:\n‚úÖ EtreCheck Pro ‚úÖ Apple Diagnostics ‚úÖ Disk Utility First Aid on the internal SSD Surprisingly, all diagnostic tools reported no hardware issues, suggesting the problem was firmware-related rather than hardware failure.\nThe Solution Since the issue appeared to be firmware-related and my macOS was already up to date, traditional firmware updates weren\u0026rsquo;t available. When I was thinking if I should just get used to this new normal, I wonder if I can just put the internal SSD into ice box so it can never be a trouble maker. Gladly Disk Utility allows us to unmount the internal SSD which is better than deleting the whole volume group (not sure what will happen though ChatGPT says it is fine).\n![[assets/solving mac mini random restarts/for12pmt-2025-solving mac mini random restarts.jpg]]\nAfter 24 hours of stable operation, the system appears to be functioning normally without any unexpected restarts. While I\u0026rsquo;m cautiously optimistic that this solution has resolved the issue, I\u0026rsquo;ll continue monitoring the system\u0026rsquo;s behavior. If the problem resurfaces, I\u0026rsquo;ll update this post with additional findings and potential solutions.\n","permalink":"/posts/2025/solving-mac-mini-random-restarts/","summary":"\u003ch2 id=\"the-problem\"\u003eThe Problem\u003c/h2\u003e\n\u003cp\u003eSix months ago, my Mac Mini began experiencing silent restarts after entering sleep mode. Initially, these incidents were sporadic and difficult to diagnose, but they gradually became more frequent, eventually occurring during active use. The random nature of these restarts made troubleshooting particularly challenging.\u003c/p\u003e\n\u003ch2 id=\"initial-troubleshooting-steps\"\u003eInitial Troubleshooting Steps\u003c/h2\u003e\n\u003cp\u003eFollowing standard troubleshooting practices, I began with the most common solutions: rebooting and reinstalling macOS. Unfortunately, these approaches proved ineffective. The system continued to restart unexpectedly despite a clean OS installation.\u003c/p\u003e","title":"Solving Mac Mini Random Restarts"},{"content":"Since I started using Obsidian as my knowledge management and writing tool, it is a pain for me to manage my posts for my blog. I used to write it in the Obsidian and copied it over to the repo of my blog. If I make changes, I need to update it twice which is very tedious and error-prone. So I started to find a solution allowing me to write and store my posts at one place and continue to use Hugo to build my blog.\nWhat I want Edit and Store my posts in Obsidian Build my blog using Hugo Host it on Github pages How to achieve We need to move the content folder to the obsidian vault like your/vault/Blog, and mount the content folder to it as below:\nmodule: mounts: - source: \u0026#34;`/your/vault/Blog`\u0026#34; target: \u0026#34;content\u0026#34; Clear the base url in the hugo.yaml\nbaseURL: \u0026#34;\u0026#34; Remove the build step and the installation of dependencies from the Github workflow\n# Sample workflow for building and deploying a Hugo site to GitHub Pages name: Deploy Hugo site to Pages on: # Runs on pushes targeting the default branch push: branches: - main # Allows you to run this workflow manually from the Actions tab workflow_dispatch: # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages permissions: contents: read pages: write id-token: write # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued. # However, do NOT cancel in-progress runs as we want to allow these production deployments to complete. concurrency: group: \u0026#34;pages\u0026#34; cancel-in-progress: false # Default to bash defaults: run: shell: bash jobs: # Build job build: runs-on: ubuntu-latest env: HUGO_VERSION: 0.142.0 steps: - name: Checkout uses: actions/checkout@v4 with: submodules: recursive fetch-depth: 0 - name: Setup Pages id: pages uses: actions/configure-pages@v5 - name: Upload artifact uses: actions/upload-pages-artifact@v3 with: path: ./public # Deployment job deploy: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest needs: build steps: - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v4 Add a pre-commit hook to facilitate the update of whole website (which runs before you make any commits and it will generate public folder for us)\n#!/bin/bash echo \u0026#34;Running Hugo build...\u0026#34; hugo if [ $? -eq 0 ]; then echo \u0026#34;Hugo build successful, adding public directory...\u0026#34; git add public/ # Check if there are changes to commit in these directories if git diff --cached --quiet public/; then echo \u0026#34;No changes in public/\u0026#34; else echo \u0026#34;Changes in public/ have been staged\u0026#34; fi exit 0 else echo \u0026#34;Hugo build failed! Aborting commit.\u0026#34; exit 1 fi Add a template using the plugin Templator in obsidian when creating new posts\n--- date: \u0026lt;% tp.file.creation_date(\u0026#34;YYYY-MM-DDTHH:mm:ss+03:00\u0026#34;) %\u0026gt; draft: \u0026#34;true\u0026#34; title: \u0026lt;% tp.file.title %\u0026gt; categories: --- Using Imgur plugin in Obsidian to upload images to Imgur otherwise the local link will break when deployed to github pages. And you could disable auto upload in case your personal data is uploaded accidentally.\n(Optional) Change minifyOutput to false if you are using paperMod for Hugo as there is a potential bug when running hugo command with minify\nminify: disableXML: true minifyOutput: false What doesn\u0026rsquo;t work Obsidian automatically utilizes the same tags as Hugo, and I couldn‚Äôt find a way to exclude a specific folder from the tag view. Since I don‚Äôt want to reveal my Obsidian tags on the blog‚Äîas they are unrelated‚ÄîI decided to remove all tags from my posts and eliminate the tag page from my blog site.\nMy workflow While writing this post, I created a new post using the template I mentioned earlier. Once it was ready, I simply changed the draft variable to false. After that, I went to the repo where my blog lives, made a commit, and that was it‚Äîeverything was set up and complete.\n","permalink":"/posts/2025/2025-02-01-hosting-blog-powered-by-obsidian-and-hugo/","summary":"\u003cp\u003eSince I started using Obsidian as my knowledge management and writing tool, it is a pain for me to manage my posts for my blog. I used to write it in the Obsidian and copied it over to the repo of my blog. If I make changes, I need to update it twice which is very tedious and error-prone. So I started to find a solution allowing me to write and store my posts at one place and continue to use Hugo to build my blog.\u003c/p\u003e","title":"Hosting Blog powered by Obsidian and Hugo"},{"content":" Normally we don\u0026rsquo;t have to use SSL when we connect to the services via Tailscale as all connections are end-to-end encrypted and only allowed users could access your network. But there are always exceptions like you want put your tailscale domain behind a public domain or you have to use SSL for internal connections. For example, horader on ios requires the SSL and it won\u0026rsquo;t work when we host hoarder using docker even we enable HTTPS on tailscale DNS and add cert to the NAS. When I access hoarder via the tailscale of the NAS, it always returns insecure connection. I tried created the SSL cert using tailscale cert and make it the default cert of my Synology, it still fails as tailscale cert only cover the port 443 so the services running at other ports are not covered.\nUse Tailscale as Sidecar In Remote Accessing NAS Using Tailscale, I introduced three methods to access the services hosted on the NAS. One of them is to run a sidecar of tailscale with the containerized service to expose it to the tailnet. Here we can run it with an reverse proxy and put the containerized service behind the reverse proxy. Moreover, we could use a public domain to access our containerized service. The below is my docker-compose.yaml which runs tailscale container as a sidecar with NPM (Nginx Proxy Manager).\nversion: \u0026#34;3.9\u0026#34; services: tailscale: image: tailscale/tailscale:latest container_name: tailscale hostname: tailscale-router restart: unless-stopped networks: - tailnet environment: - TS_AUTHKEY=tskey-auth-your-key - TS_EXTRA_ARGS=--accept-routes - TS_AUTH_ONCE=false - TS_STATE_DIR=/var/lib/tailscale - TS_DEBUG_FIREWALL_MODE=auto - TS_USERSPACE=false cap_add: - NET_RAW - NET_ADMIN privileged: true volumes: - \u0026#34;/dev/net/tun:/dev/net/tun\u0026#34; - \u0026#34;/your/tailscale/config:/var/lib/tailscale\u0026#34; - \u0026#34;/your/tailscale/state:/var/run/tailscale\u0026#34; npm: container_name: npm image: \u0026#39;jc21/nginx-proxy-manager:latest\u0026#39; restart: unless-stopped network_mode: \u0026#34;service:tailscale\u0026#34; volumes: - \u0026#34;/your/nginx_proxy_manager/data:/data\u0026#34; - \u0026#34;/your/nginx_proxy_manager/letsencrypt:/etc/letsencrypt\u0026#34; networks: tailnet: driver: bridge Proxying Once we have both containers up and running, we can use your.ts.net:81 to access the NPM since they share the same network. And we can create SSL cert for our public domain like hoarder.your.domain and it only works with DNS challenge for me. To use DNS challenge, we need to get the API key from the DNS provider to get the edit permission on our DNS records shown below (I\u0026rsquo;m using Cloudflare).\nThen we can create proxy host for hoarder.your.domain and use the SSL cert created above. The destination should be your-nas-local-ip:port.\nSetup Public Domain The next step is to set up the public domain on the DNS resolver and I\u0026rsquo;m using Cloudflare which is highly recommended. We can create a CNAME record for hoarder.your.domain or use a wildcard like *.your.domain, and the value will be the domain of the tailscale container (it can be found on the admin console of tailscale). In this way, we don\u0026rsquo;t need to add any new record to Cloudflare even we want to add more services later. All we need is to add a proxy host in NPM since the wildcard will resolve any subdomains to the domain of our tailscale container. Then NPM will pick it up and do the heavy-lifting work for us.\nFinal thoughts This will do the job and allow us to access these containerized services using SSL and the public domain but it still requires the device in the tailnet (aka. the device must install the tailscale client or use subnet router) to actually access the service as we just resolve the public domain to the tailnet domain. Now I have two tailscale clients on my Synology, one is installed via package center and another one is hosted by docker, But I\u0026rsquo;m thinking of removing the one I installed via package center to reduce the redundancy.\n","permalink":"/posts/2025/2025-01-27-expose-containerized-services-with-ssl-via-tailscale/","summary":"\u003chr\u003e\n\u003cp\u003eNormally we don\u0026rsquo;t have to use SSL when we connect to the services via Tailscale as all connections are end-to-end encrypted and only allowed users could access your network. But there are always exceptions like you want put your tailscale domain behind a public domain or you have to use SSL for internal connections. For example, \u003ca href=\"https://github.com/hoarder-app/hoarder\"\u003ehorader\u003c/a\u003e on ios requires the SSL and it won\u0026rsquo;t work when we host hoarder using docker even we enable HTTPS on tailscale DNS and add cert to the NAS. When I access hoarder via the tailscale of the NAS, it always returns insecure connection. I tried created the SSL cert using \u003ccode\u003etailscale cert\u003c/code\u003e and make it the default cert of my Synology, it still fails as tailscale cert only cover the port 443 so the services running at other ports are not covered.\u003c/p\u003e","title":"Expose Containerized Services With SSL via Tailscale"},{"content":"Remote Accessing NAS using Tailscale Simply put, Tailscale is a private VPN built on the WireGuard protocol, designed to support a Zero Trust architecture for managing devices within a subnet. As a mesh network, Tailscale enhances connectivity when accessing NAS services remotely. Compared to traditional VPNs and firewalls, WireGuard and Zero Trust offer significantly better security since every device requires authentication to communicate with others. This granular access control minimizes risk‚Äîeven if an attacker compromises one device, they won\u0026rsquo;t automatically gain access to the entire private network. Unlike conventional firewalls, which often have a hardened exterior but a vulnerable core, Tailscale ensures both outer and inner security.\nMethods to Access NAS Using Tailscale 1. Install Tailscale Directly on the NAS This method turns the NAS into a node on the tailnet (your private network), making it discoverable by all other nodes.\nOnce installed, Tailscale detects available services on the NAS, allowing easy access using tailscale.domain:port or 100.x.x.x:port.\nPros:\nExtremely simple setup. Fine-grained access control for devices and users. Cons:\nExposing all services makes me itchy but I don\u0026rsquo;t think it is a con as we can have ACL to limit the access for users.\n2. Configure a Subnet Router A subnet router bridges your private LAN with the tailnet, making local network resources accessible remotely.\nEven unconventional devices, like an Apple TV, can act as a subnet router, which adds flexibility.\nOnce configured, NAS services become accessible using nas-ip:port over the tailnet.\nPros:\nEasy to set up, especially on always-on devices like Apple TV or a Raspberry Pi. Provides network-wide access without installing Tailscale on every device especially for those devices cannot install Tailscale like printer. Cons:\nExposes the entire LAN, which could require additional security measures such as reverse proxying - I didn\u0026rsquo;t try if we can put ACL on the particular device in the subnet.\n3. Use Tailscale as a Sidecar for Docker Containers Sidecar means we need couple Tailscale container with whatever services we want to remote access.\nBy sharing Tailscale\u0026rsquo;s network with another service (e.g., a web app or reverse proxy), the service seamlessly joins the tailnet with the help of Tailscale.\nIf combined with a reverse proxy, this method can also facilitate access to LAN resources securely.\nPros:\nProvides fine-grained control over which services are remotely accessible so we don\u0026rsquo;t have expose a bunch of services we don\u0026rsquo;t want to remote access. Cons:\nRequires more configuration and consumes additional resources. Tailscale significantly improves security and usability for self-hosted services. However, another promising project worth mentioning is Pangolin, a self-hosted tunneled reverse proxy management server with built-in identity and access management (IAM). Though still in beta at the time of writing, Pangolin offers exciting potential, particularly with its IAM management. I am very excited to try it is officially released.\n","permalink":"/posts/2025/remote_accessing_nas_using_tailscale/","summary":"\u003ch1 id=\"remote-accessing-nas-using-tailscale\"\u003eRemote Accessing NAS using Tailscale\u003c/h1\u003e\n\u003cp\u003eSimply put, Tailscale is a private VPN built on the WireGuard protocol, designed to support a Zero Trust architecture for managing devices within a subnet. As a mesh network, Tailscale enhances connectivity when accessing NAS services remotely. Compared to traditional VPNs and firewalls, WireGuard and Zero Trust offer significantly better security since every device requires authentication to communicate with others. This granular access control minimizes risk‚Äîeven if an attacker compromises one device, they won\u0026rsquo;t automatically gain access to the entire private network. Unlike conventional firewalls, which often have a hardened exterior but a vulnerable core, Tailscale ensures both outer and inner security.\u003c/p\u003e","title":"Remote Accessing NAS using Tailscale"},{"content":" Introduction I used Notion for a couple of years and found it to be one of the best tools for note-taking and building a personal wiki. Why did I stop using it? It wasn\u0026rsquo;t about the cost‚ÄîNotion\u0026rsquo;s freemium plan is perfectly sufficient for personal use. Instead, there were two main issues that drove me away.\nFirst, typing math equations in Notion is cumbersome because you have to use a dedicated \u0026ldquo;Block\u0026rdquo; for them. Second, it\u0026rsquo;s difficult to export or migrate your data to other platforms, which, while not entirely Notion\u0026rsquo;s fault, still concerns me. Most importantly, I realized I should make better use of my Synology NAS. That\u0026rsquo;s why I decided to explore open-source, self-hosted alternatives.\nChoices To my surprise, there are more choices in the market than I could imagine in the beginning.\napp name collaboration cross platform self-hosted server browser app knowledge management selfhost score Silverbullets N Y Y Y ‚≠ê‚≠ê‚≠ê ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê StandardNotes N Y Y Y ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê ‚≠ê Siyuan N Y N N ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê ‚≠ê Bookstack N Y Y Y ‚≠ê‚≠ê‚≠ê‚≠ê ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê Obsidian N Y N N ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê ‚≠ê‚≠ê‚≠ê LogSeq N Y N N ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê Trilium N Y Y Y ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê Joplin N Y Y N ‚≠ê ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê UseMemos N Y Y Y ‚≠ê ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê Wiki.js N Y Y Y ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê Appflowy Y Y Y N ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê ‚≠ê Affine Y Y Y Y ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê ‚≠ê‚≠ê AnyType Y Y Y N ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê ‚≠ê‚≠ê Docmost Y Y Y Y ‚≠ê‚≠ê‚≠ê‚≠ê ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê Outline Y Y Y Y ‚≠ê‚≠ê‚≠ê‚≠ê ‚≠ê‚≠ê I tested each self-hosted tool at a basic level to see if it met my needs. Two must-have features for me are collaboration and a lightweight browser-based interface. Lastly, I\u0026rsquo;m looking at how easy it is to self-host and how truly they are self-hosted. Here\u0026rsquo;s my shortlist:\nAffine ‚Äì I ruled this out because it doesn\u0026rsquo;t feel truly open source or self-hosted. There are ongoing GitHub discussions about this point. Docmost ‚Äì It seems promising, but the community is still at an early stage. Outline ‚Äì I ended up selecting Outline because it provides all the features I need and has a strong community. However, hosting it wasn\u0026rsquo;t straightforward‚Äîit enforces a specific authentication process, which took me a couple of days to figure out. I also tried Appflowy and AnyType, both of which came close to meeting my requirements. However, Appflowy imposes many limitations on self-hosting, and AnyType is resource-heavy, requiring MongoDB, Minio, and multiple sync nodes. By contrast, Outline can simply use a local filesystem, which has worked very well for me so far.\nSelfhost Outline \u0026amp; Authenlia I chooses to use Authenlia as the authentication service for Outline as I need a lightweight solution given it will only be accessed by my family and again I can use the local filesystem to power Authenlia.\nAuthenlia To host Authenlia, we need create the configuration.yml:\nlog: level: info server: address: \u0026#39;tcp://:9091/\u0026#39; session: name: authelia_session same_site: lax secret: \u0026#34;redacted\u0026#34; expiration: 3600 inactivity: 300 cookies: - domain: \u0026#34;your.domain\u0026#34; authelia_url: \u0026#34;https://your.auth.domain\u0026#34; default_redirection_url: \u0026#34;https://www.your.outline.domain\u0026#34; name: \u0026#34;authelia_session\u0026#34; same_site: \u0026#34;lax\u0026#34; inactivity: \u0026#34;5m\u0026#34; expiration: \u0026#34;1h\u0026#34; remember_me: \u0026#34;1d\u0026#34; access_control: default_policy: one_factor rules: [] storage: encryption_key: \u0026#34;redacted\u0026#34; local: path: /config/db.sqlite3 identity_providers: oidc: hmac_secret: \u0026#34;redacted\u0026#34; jwks: - key: {{ secret \u0026#34;/config/private.pem\u0026#34; | mindent 10 \u0026#34;|\u0026#34; | msquote }} clients: - id: \u0026#34;unique client id\u0026#34; description: \u0026#34;Outline Wiki\u0026#34; secret: \u0026#34;redacted\u0026#34; public: false authorization_policy: one_factor redirect_uris: - \u0026#34;https://your.outline.domain/auth/oidc.callback\u0026#34; scopes: - \u0026#34;openid\u0026#34; - \u0026#34;offline_access\u0026#34; - \u0026#34;profile\u0026#34; - \u0026#34;email\u0026#34; userinfo_signed_response_alg: \u0026#34;none\u0026#34; token_endpoint_auth_method: \u0026#34;client_secret_post\u0026#34; notifier: disable_startup_check: false filesystem: filename: \u0026#34;/config/notification.txt\u0026#34; authentication_backend: file: path: /config/user_database.yml identity_validation: reset_password: jwt_secret: \u0026#34;redacted\u0026#34; jwt_lifespan: \u0026#34;5 minutes\u0026#34; jwt_algorithm: \u0026#34;HS256\u0026#34; You could run openssl rand -hex 32 to generate the key for the redacted place above.\nYou also need create a hash of the password using docker run --rm -it authelia/authelia:latest authelia crypto hash generate argon2 which prompt for your password. After you have the hash, you could go ahead creating the user_database.yml file storing the login data:\nusers: admin: displayname: \u0026#34;Foo Poo\u0026#34; password: \u0026#34;the hash generated from above command\u0026#34; email: \u0026#34;email\u0026#34; groups: - admins - dev When you login, you need use admin as the user name and the password you typed in to generate the hash. It is not the password and email you used under admin stanza above. And you don\u0026rsquo;t have to create many users since Outline doesn\u0026rsquo;t support multiple workspaces in selfhosted version (discussions).\nThe last one is the jwks key we could generate with the command:\ndocker run --rm -v \u0026#34;$(pwd)\u0026#34;:/output authelia/authelia:latest authelia crypto certificate rsa generate --directory /output which will generate private.pem and public.crt at present directory and we only need private.pem here.\nAfter we have all the files ready, we could create the docker-compose.yaml:\nservices: authelia: image: authelia/authelia:4.38 container_name: authelia restart: unless-stopped environment: - TZ=UTC - X_AUTHELIA_CONFIG_FILTERS=template ports: - \u0026#34;9095:9091\u0026#34; volumes: # this mounted folder should have all three files you just created: # configuration.yml, user_database.yaml and private.pem - \u0026#39;/your/folder/authelia/config:/config\u0026#39; Outline This is my docker-compose.yaml hosting Outline on my NAS:\nversion: \u0026#34;3.7\u0026#34; services: outline: image: outlinewiki/outline:0.81.1 # this is to give Outline container the permission to access the mounted folder, which could # be different for you. You could use `ls -nd` to check the UID and GID for a particular folder user: \u0026#34;1026:100\u0026#34; ports: - \u0026#34;3002:3000\u0026#34; depends_on: - postgres - redis volumes: - /yours/outline/storage:/var/lib/outline/data networks: - npm_network environment: NODE_ENV: production SECRET_KEY: \u0026#34;key generated using openssl rand -hex 32\u0026#34; UTILS_SECRET: \u0026#34;key generated using openssl rand -hex 32\u0026#34; # HTTP # URL must be the same one used in your authenlia configuration.yml URL: https://your.outline.domain PORT: 3000 FORCE_HTTPS: true WEB_CONCURRENCY: 1 # Rate limiter RATE_LIMITER_ENABLED: true RATE_LIMITER_DURATION_WINDOW: 60 RATE_LIMITER_REQUESTS: 600 # Authentication OIDC_CLIENT_ID: \u0026#34;must be the same as the one used in authenlia\u0026#34; OIDC_CLIENT_SECRET: \u0026#34;must be the same as the one used in authenlia\u0026#34; # The OIDC config can be found from https://your.auth.domain/.well-known/openid-configuration OIDC_AUTH_URI: https://your.auth.domain/api/oidc/authorization OIDC_TOKEN_URI: https://your.auth.domain/api/oidc/token OIDC_USERINFO_URI: https://your.auth.domain/api/oidc/userinfo OIDC_LOGOUT_URI: https://your.outline.domain OIDC_USERNAME_CLAIM: username OIDC_SCOPES: openid offline_access profile email # Storage FILE_STORAGE: local FILE_STORAGE_LOCAL_ROOT_DIR: /var/lib/outline/data FILE_STORAGE_UPLOAD_MAX_SIZE: 1086214400 # Database DATABASE_URL: postgres://user:pass@postgres:5432/outline PGSSLMODE: disable # Redis REDIS_URL: redis://redis:6379 # Other LOG_LEVEL: info ENABLE_UPDATES: true DEFAULT_LANGUAGE: en_US redis: image: redis:7.4.1 expose: - 6379 networks: - npm_network command: redis-server postgres: image: postgres:12.22 expose: - 5432 networks: - npm_network environment: POSTGRES_USER: user POSTGRES_PASSWORD: pass POSTGRES_DB: outline volumes: - /volume1/docker/outline/postgres:/var/lib/postgresql/data networks: # we need use bridge so Nginx could forward the traffic npm_network: driver: bridge This should get your Outline up and running and the last is to configure the proxy host at the NPM (aka. Nginx Proxy Manager) so we could access it from internet.\nNginx Proxy Manager You can easily create an SSL certificate with Let's Encrypt through Nginx Proxy Manager (NPM). When generating the certificate, make sure it includes both domains used to reach Outline and Authenlia (for example, your.outline.domain and your.auth.domain). You might also want to create a certificate for your top-level domain if needed. After that, simply create proxy hosts for each domain, ensuring they point to the correct internal addresses.\nUse http scheme for the destinations otherwise you prob will see 502 error. At least I have to use http scheme here and it will be secure since we enforce HTTPS on server side and use SSL cert for the connection.\nRegarding the destination address, I tried to use service:port since they are all on bridge network but unfortunately it doesn\u0026rsquo;t work for me. I have to use the nas-ip:host-port to access it. Finally, remember to forward ports 80 (HTTP) and 443 (HTTPS) from your router to NPM. This ensures all inbound web traffic is properly routed through Nginx Proxy Manager, allowing it to forward the traffic from internet.\nConclusion I recently migrated all my notes from Notion and Obsidian to Outline and couldn\u0026rsquo;t be happier so far. This document is the first I\u0026rsquo;ve created post-migration, and the experience has been smooth‚Äîespecially Outline\u0026rsquo;s robust Markdown support for math equations. The one drawback I\u0026rsquo;ve noticed is the lack of a birds-eye view, which makes it cumbersome to manage numerous documents solely from the sidebar. Fortunately, there\u0026rsquo;s ongoing discussion about adding database support, which could help create a customized homepage and improve overall organization.\n","permalink":"/posts/2025/life-wiki-selfhosted-on-your-nas/","summary":"\u003ch1\u003e\u003c/h1\u003e\n\u003ch1 id=\"introduction\"\u003eIntroduction\u003c/h1\u003e\n\u003cp\u003eI used Notion for a couple of years and found it to be one of the best tools for note-taking and building a personal wiki. Why did I stop using it? It wasn\u0026rsquo;t about the cost‚ÄîNotion\u0026rsquo;s freemium plan is perfectly sufficient for personal use. Instead, there were two main issues that drove me away.\u003c/p\u003e\n\u003cp\u003eFirst, typing math equations in Notion is cumbersome because you have to use a dedicated \u0026ldquo;Block\u0026rdquo; for them. Second, it\u0026rsquo;s difficult to export or migrate your data to other platforms, which, while not entirely Notion\u0026rsquo;s fault, still concerns me. Most importantly, I realized I should make better use of my Synology NAS. That\u0026rsquo;s why I decided to explore open-source, self-hosted alternatives.\u003c/p\u003e","title":"Life Wiki Selfhosted on Your NAS"},{"content":"Quarkus is an exciting framework for building modern Java applications, and Quinoa takes it up a notch by streamlining Single Page Application (SPA) development. Together, they enable a seamless workflow for both frontend and backend developers. This guide walks through setting up a Quarkus-based SPA using React as an example, although the process works just as well for other frameworks.\nWhy Quinoa Matters Quinoa elegantly integrates frontend development into Quarkus projects. Here\u0026rsquo;s why you should care:\nUnified Development:* Host your frontend and backend together during development. Automation:* Automatically build and serve your frontend as part of the Quarkus lifecycle. Streamlined APIs:* Simplify API calls with relative URLs. Structuring Your Project To keep things organized, place your frontend project as a submodule within the Quarkus project. Here‚Äôs a suggested structure:\nQuarkus-Structure |- src |¬†|- main |¬†|- docker |¬†|- resources |¬†|- webui (frontend project, must be named \u0026#34;webui\u0026#34;) Why Submodules? Separation of Concerns: Clear division between frontend and backend responsibilities. Independent Version Control: Manage the two projects separately. Setting Up Quinoa in Quarkus Step 1: Update Configuration Add the following to application.properties in the resources directory:\nquarkus.http.cors.origins=http://localhost quarkus.http.cors=true quarkus.quinoa.dev-server.port=3000 quarkus.quinoa.build-dir=dist quarkus.quinoa.enable-spa-routing=true Important Notes:*\nquarkus.quinoa.build-dir: Specifies the directory containing the built frontend files (e.g., dist for React), it should be the folder generated by npm run build. quarkus.http.cors: Enables CORS for smoother API interactions during development. quarkus.quinoa.enable-spa-routing: Fixes the SPA routing issue for Quarkus (see github issue for details) Adjust build-dir based on your frontend framework\u0026rsquo;s output directory.\nStep 2: Add Dependency In your pom.xml, include:\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.quarkiverse.quinoa\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;quarkus-quinoa\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;{latest-version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; Developing with Quinoa Seamless Integration Once configured, running quarkus dev or quarkus build will:\nDetect your frontend project via its package.json. Build and serve the frontend automatically. Simplified API Calls Use relative URLs (e.g., /api/1.0/create) instead of absolute ones (e.g., http://localhost:8080/api/1.0/create). Quinoa handles the routing, ensuring that requests reach the backend effortlessly.\nPreparing for Production Building Executables Create a Fat JAR: bash quarkus build --no-tests Optional: Build a Native Executable:* bash quarkus build --native --no-tests Native executables eliminate the need for a Java runtime, offering faster startup and lower memory usage. But it usually takes some time for graalvm to support the latest version of java.\nMulti-Platform Docker Images To build a Docker image compatible with Linux and macOS:\nEnable containerd in Docker settings (How to). Run the following command in the project root: bash docker build --platform linux/amd64,linux/arm64 -f src/main/docker/Dockerfile.jvm -t quarkus/your-project:latest . This image can run on diverse environments, including Apple Silicon.\nWrapping Up Quarkus and Quinoa together redefine SPA development by combining frontend and backend workflows into a cohesive experience. With minimal setup, you can create, test, and deploy modern web applications efficiently. Whether you\u0026rsquo;re working on a personal project or deploying at scale, this combination simplifies your life.\nFor further exploration, dive into the official Quarkus documentation or the React and Quarkus guide.\n","permalink":"/posts/2024/building-a-single-page-application-spa-with-quarkus-and-quinoa/","summary":"\u003cp\u003eQuarkus is an exciting framework for building modern Java applications, and Quinoa takes it up a notch by streamlining Single Page Application (SPA) development. Together, they enable a seamless workflow for both frontend and backend developers. This guide walks through setting up a Quarkus-based SPA using React as an example, although the process works just as well for other frameworks.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"why-quinoa-matters\"\u003eWhy Quinoa Matters\u003c/h2\u003e\n\u003cp\u003eQuinoa elegantly integrates frontend development into Quarkus projects. Here\u0026rsquo;s why you should care:\u003c/p\u003e","title":"Building a Single Page Application (SPA) with Quarkus and Quinoa"},{"content":"Google, like many large tech companies, has tightened its grip on profits, making it increasingly difficult for customers to find affordable workarounds. The days of using a VPN to pay for discounted YouTube or Spotify Premium are mostly over. Without a locally issued card, paying for premium services remotely is nearly impossible, with Kazakhstan being the sole exception. While virtual cards like Wise and Revolut can bypass some checks, the process is cumbersome and carries its own risks.\nBut here‚Äôs the silver lining: Sideloading. Sideloading lets you install apps (IPA files) from sources outside the App Store, enabling you to access advanced, ad-free versions of apps like YouTube and Spotify for free. And since the tools and code used are open source, the process is generally safe and transparent.\nGetting Started with Sideloading There are several ways to sideload IPA files, but Sideloadly stands out for its simplicity. Here‚Äôs how you can get started:\nDownload Sideloadly: Visit their official website and install the app. Follow the Instructions: The step-by-step guide provided by Sideloadly makes the process straightforward. Choose Your Apps: I recommend these two: YTLitePlus: A feature-rich, ad-free YouTube client. EeveeSpotify: An enhanced version of Spotify with premium features. Downloading YTLitePlus and EeveeSpotify YTLitePlus: Build it yourself using GitHub Actions after forking the repository. Alternatively, download it from AltSource. EeveeSpotify: Grab the latest release directly from its GitHub repository. Sideloading for Apple TV If you‚Äôre looking to sideload apps on Apple TV, Sideloadly works just as well. Alternatively, you can connect to a VPN in Albania, where ads are legally banned, for a seamless, ad-free experience.\nWhy Sideloading? Sideloading isn‚Äôt just a workaround‚Äîit‚Äôs a way to reclaim control over your devices. By using open-source tools and apps, you can customize your experience and access premium features without recurring fees. While it requires a bit of effort upfront, the payoff is a fully functional, cost-free solution to otherwise expensive subscriptions.\n","permalink":"/posts/2024/how-to-sideload-and-unlock-premium-apps-for-free/","summary":"\u003cp\u003eGoogle, like many large tech companies, has tightened its grip on profits, making it increasingly difficult for customers to find affordable workarounds. The days of using a VPN to pay for discounted YouTube or Spotify Premium are mostly over. Without a locally issued card, paying for premium services remotely is nearly impossible, with Kazakhstan being the sole exception. While virtual cards like Wise and Revolut can bypass some checks, the process is cumbersome and carries its own risks.\u003c/p\u003e","title":"How to Sideload and Unlock Premium Apps for Free"},{"content":"A couple of months ago, I had the brilliant idea to upgrade my Mac mini M2 by installing MacOS on an external M.2 SSD. For under 200 bucks, I went from a measly 250GB to a whopping 2TB. I was on cloud nine, reveling in my newfound digital real estate, until the other weekend when the system decided to crash my party by refusing to download upgrades due to a lack of space. Wait, what?\nTurns out, despite my genius plan, the OS on the external drive didn‚Äôt update the home directory. So, all my apps were still partying it up on the internal drive, leaving it packed to the brim. Cue the dramatic realization that my internal storage was maxed out.\nFirst things first, I tried clearing out my Documents and Downloads folders. But it was like bailing water from the Titanic with a teaspoon‚Äîuseless. The solution? Change the home directory. Simple, right? You‚Äôd think.\nHere‚Äôs where you go to do it: Users \u0026amp; Groups.\nEasy peasy. Except, my Mac threw a tantrum and refused to restart, getting stuck on the loading screen. After some frantic Googling, I discovered this is a common issue when changing the home directory. Brilliant. I managed to log in via safe mode, and somehow the home directory was updated, but the regular mode was still broken.\nAt this point, I decided to go nuclear and reinstall the system. My theory? The problem started because I transferred my system from the internal drive to the external drive without updating the home directory. So, I erased everything and reinstalled MacOS on both the internal and external drives separately. Finally, I had different home directories, and the storage information was correct. Success!\nLooking back, I think the internal drive was still accessible by the system on the external drive, which is why it \u0026ldquo;worked\u0026rdquo; even with the messed-up home directory. I watched tons of videos about installing MacOS on external drives, but none of them mentioned this hiccup. Maybe it‚Äôs a rare case, but here‚Äôs my advice: if you‚Äôre transferring your system to an external drive, make sure to check and update your home directory.\nLessons learned? Always double-check your home directory, expect the unexpected, and keep your sense of humor handy. You never know when your tech setup will turn into a comedy of errors.\n","permalink":"/posts/2024/how-i-upgraded-my-mac-mini-storage-with-an-external-ssd-and-solved-the-home-directory-issue/","summary":"\u003cp\u003eA couple of months ago, I had the brilliant idea to upgrade my Mac mini M2 by installing MacOS on an external M.2 SSD. For under 200 bucks, I went from a measly 250GB to a whopping 2TB. I was on cloud nine, reveling in my newfound digital real estate, until the other weekend when the system decided to crash my party by refusing to download upgrades due to a lack of space. Wait, what?\u003c/p\u003e","title":"How I Upgraded My Mac Mini Storage with an External SSD and Solved the Home Directory Issue"},{"content":"Everyone wants a cool terminal and WezTerm is the coolest one in my opinion. It is easy to manage and we can setup a new environment with minutes in association with GNS stow - a symlink manager.\nWezTerm is easy to configure since it is using lua and very friendly to read and learn. I am dumb at iTerm2 and Tmux, but it only took me 30 mins to start tweaking the config. Everyone wants a cool terminal, and WezTerm is the coolest one in my opinion. It\u0026rsquo;s easy to manage and we can set up a new environment within minutes using GNU Stow - a symlink manager.\nWezTerm is easy to configure since it uses Lua, making it very friendly to read and learn. I was baffled by iTerm2 and Tmux, but it only took me 30 minutes to start tweaking the config for WezTerm.\nWezTerm The installation can be found at the download page. You can create the config file under ~/.config/wezterm/wezterm.lua. The website has a detailed description of how WezTerm resolves the config path, which is a nice decision tree. Since it\u0026rsquo;s Lua, it\u0026rsquo;s very easy to read and understand. I started from others\u0026rsquo; configs and you could also start with mine.\nLook Cool First, we need to make it look cool. zsh, oh-my-zsh, and powerlevel10k should be your go-to tools since they take little time to set up and look amazing. With stow, we can reuse the config, so it\u0026rsquo;s a one-time cost but for lifelong use. Their GitHub repos have very detailed instructions about installation, and I just want to highlight that you should always use a package manager to install them.\nAct Cool Interactive Search \u0026amp; Git Diff Looking cool is one thing, but your terminal also needs to act cool. Here\u0026rsquo;s how to improve the visualization of your terminal using fzf-preview. You need to install:\nfzf - a fuzzy search tool fzf-git - integrate fzf with git bat - a better cat git-delta - a better tool to show git diff fd - an opinionated tool to replace find eza - an alternative to ls To install these tools:\nbrew install fzf bat git-delta fd eza\ngit clone git@github.com:junegunn/fzf-git.sh.git ~/.fzf-git.sh\nAfter installing them, add the following snippet to your .zshrc:\n# Setup fzf previews show_file_or_dir_preview=\u0026#34;if [ -d {} ]; then eza --tree --color=always {} | head -200; else bat -n --color=always --line-range :500 {}; fi\u0026#34; export FZF_CTRL_T_OPTS=\u0026#34;--preview \u0026#39;$show_file_or_dir_preview\u0026#39;\u0026#34; export FZF_ALT_C_OPTS=\u0026#34;--preview \u0026#39;eza --tree --color=always {} | head -200\u0026#39;\u0026#34; _fzf_comprun() { local command=$1 shift case \u0026#34;$command\u0026#34; in cd) fzf --preview \u0026#39;eza --tree --color=always {} | head -200\u0026#39; \u0026#34;$@\u0026#34; ;; export|unset) fzf --preview \u0026#34;eval \u0026#39;echo ${}\u0026#39;\u0026#34; \u0026#34;$@\u0026#34; ;; ssh) fzf --preview \u0026#39;dig {}\u0026#39; \u0026#34;$@\u0026#34; ;; *) fzf --preview \u0026#34;$show_file_or_dir_preview\u0026#34; \u0026#34;$@\u0026#34; ;; esac } source ~/fzf-git.sh/fzf-git.sh There are more useful configs which can be found in my dotfiles.\nThen you can type fzf ** and press tab to get an interactive console like this: !\nzoxide Zoxide is a smarter cd command for navigating your filesystem. It keeps track of the directories you use most frequently, allowing you to jump to them quickly with short commands. Zoxide learns your habits and improves over time, making filesystem navigation more efficient. It saves me a lot of time jumping among different folders.\nTo install and configure Zoxide:\nbrew install zoxide\natuin Atuin is a history management tool. Though fzf can also make history search easy and powerful, atuin has its place since you only need to press the up-arrow to get into the history interface, and it comes with fuzzy search. Additionally, atuin enables global history and allows you to share history across multiple platforms.\nTo install Atuin:\nbrew install atuin\nSearch the history:\nsdkman SDKMAN! is a tool for managing parallel versions of multiple Software Development Kits (SDKs), including Java, Groovy, Scala, Kotlin, and more. It simplifies the installation, switching, and management of SDKs, ensuring that you always have the right version for your projects. For me, setting up the Java SDK was a nightmare before SDKMAN! It‚Äôs a game changer. sdk list, sdk install \u0026lt;sdk version\u0026gt;, and sdk use \u0026lt;sdk version\u0026gt; are all you need.\nTo install SDKMAN!:\ncurl -s \u0026quot;https://get.sdkman.io\u0026quot; | bash\nsource \u0026quot;/opt/homebrew/opt/sdkman-cli/libexec/bin/sdkman-init.sh\u0026quot;\nTo install a specific version of Java using SDKMAN!:\nsdk install java 11.0.11-open\ntldr Nobody wants to read the full man pages (no offense, man). Install tldr to get simplified, community-driven help pages for command-line tools.\nTo install tldr:\nbrew install tlrc\nstow Lastly, GNU Stow is very powerful and easy to use. I used \u0026ldquo;yet another dotfiles manager\u0026rdquo; before, but the experience was unpleasant. Stow, on the other hand, is very easy to use. It is a symlink manager that creates symlinks for dotfiles like below: What you need to do is to create a folder like dotfiles at the home folder (aka. ~) which is the home for the dot files. For example, I group zsh-related files under ~/dotfiles/zsh, and I run stow zsh in ~/dotfiles to create these symlinks. For .config, I copy them into ~/dotfiles/config, and then run stow config to create symlinks for the .config folder.\nTo install Stow:\nbrew install stow\nBy using stow, you can have version control of your dotfiles by creating a GitHub repo. Note that the dotfiles should not exist in the home directory directly; otherwise, there will be conflicts for stow to create symlinks. All my dotfiles can be found here.\n","permalink":"/posts/2024/how-to-build-an-amazing-and-productive-terminal/","summary":"\u003cp\u003eEveryone wants a cool terminal and WezTerm is the coolest one in my opinion. It is easy to manage and we can setup a new environment with minutes in association with GNS stow - a symlink manager.\u003c/p\u003e\n\u003cp\u003eWezTerm is easy to configure since it is using lua and very friendly to read and learn. I am dumb at iTerm2 and Tmux, but it only took me 30 mins to start tweaking the config.\nEveryone wants a cool terminal, and WezTerm is the coolest one in my opinion. It\u0026rsquo;s easy to manage and we can set up a new environment within minutes using GNU Stow - a symlink manager.\u003c/p\u003e","title":"How to Build an Amazing and Productive Terminal"},{"content":"My first website was an adventure straight out of 2014, built with Dreamweaver and some basic HTML and CSS. Picture a static site, lovingly crafted to display the research and papers from our lab. The end product was, well, let‚Äôs just say not exactly internet-breaking. But hey, it was my first foray into the wild world of web development!\nFast forward 10 years, after diving deep into data science, machine learning, and platform engineering, I realized something horrifying: I was still a web development noob. Cue the dramatic music. This simply would not do! So, armed with determination and copious amounts of coffee, I embarked on a quest to master web app development and fill in the gaping holes in my skill set.\nAfter researching, I chose the following tech stack:\nJavaScript library: React + TypeScript UI framework: shadcn State management: Zustand REST query: react-query CSS: Tailwind CSS Builder: Vite Backend: Quarkus (a Java framework) I highly recommend checking out Robin Wieruch\u0026rsquo;s blog for insights on various recommended technologies. I chose Quarkus for the backend because it simplifies creating Docker images for deployment and fits well with SPAs, which I will detail later.\nCreate the Project Follow the guide at shadcn to create the project.\nYou may see warning when importing sources using @. Add the below snippet to compilerOptions in the tsconfig.app.json as well.\n{ \u0026#34;compilerOptions\u0026#34;: { // ... \u0026#34;baseUrl\u0026#34;: \u0026#34;.\u0026#34;, \u0026#34;paths\u0026#34;: { \u0026#34;@/*\u0026#34;: [ \u0026#34;./src/*\u0026#34; ] } // ... } } Navigating the Pits of Despair Proxy Shenanigans with React and TypeScript Imagine my frustration when trying to add a proxy to package.json or use http-proxy-middleware, only to be met with an unending series of CORS issues. My solution? Allow all CORS from the backend, since I‚Äôm hosting both frontend and backend together. For those not in the same boat, consider setting up a proxy server in React (example).\nThe Importance of Error Capturing Using react-query to fetch data felt like upgrading from a tricycle to a Harley. It caches responses and refetches only when necessary. However, I made a rookie mistake: not capturing potential errors from processing the response.\nexport const updateTodo = async (todo: Ttodo): Promise\u0026lt;void\u0026gt; =\u0026gt; { const response = await fetch(`http://localhost:8080/1.0/todo/update`, { method: \u0026#34;PUT\u0026#34;, headers: { \u0026#34;Content-Type\u0026#34;: \u0026#34;application/json\u0026#34;, }, body: JSON.stringify(todo), }); if (!response.ok) { throw new Error(\u0026#34;Failed to update todo\u0026#34;); } else { console.log(response); } return; }; In the above code, response.json() threw an error when the response was empty, and I didn‚Äôt catch it. This oversight turned debugging into a treasure hunt. Lesson learned: always capture errors!\nKeeping Query Keys Neat and Tidy React-query‚Äôs useMutation hook allows cache invalidation based on queryKey. For example, the code below ensures all queries with todos at the first index in their queryKey are invalidated. Think of it as Marie Kondo-ing your query cache.\nconst { mutate: updateTodoMutation } = useMutation({ mutationFn: updateTodo, onSuccess: () =\u0026gt; { console.log(\u0026#34;updateTodoMutation success\u0026#34;); queryClient.invalidateQueries({ queryKey: [\u0026#39;todos\u0026#39;] }).then(() =\u0026gt; { return }); }, onMutate: () =\u0026gt; { console.log(\u0026#34;updateTodoMutation onMutate\u0026#34;); }, onError: (error) =\u0026gt; { console.error(\u0026#34;updateTodoMutation onError\u0026#34;, error); }, onSettled: () =\u0026gt; { console.log(\u0026#34;updateTodoMutation onSettled\u0026#34;); }, }); Creating Submodules in Quarkus for a React Project Hosting a SPA with Quarkus requires all contents to be under /src/main/webui (Quarkus Quinoa), including package.json. Manually copying files is a chore, so creating a submodule saves the day. For instance, create separate GitHub repos like ydeng11/Tai and ydeng11/Tai-UI, then run git submodule add https://github.com/ydeng11/Tai-UI.git ./src/main/webui in your Quarkus project‚Äôs root directory. Voil√†, everything works like magic!\nConclusion After spending four evenings coding this app and navigating these challenges, I can confidently say that frontend development has evolved leaps and bounds from when I built that static website a decade ago. My advice? Don‚Äôt sweat the basics of HTML and CSS too much. A crash course will suffice to get you started. Embrace tools like ChatGPT as your coding sidekick. You‚Äôll learn heaps more through practice and hands-on experience.\n","permalink":"/posts/2024/building-webapp-using-react-and-quarkus/","summary":"\u003cp\u003eMy first website was an adventure straight out of 2014, built with Dreamweaver and some basic HTML and CSS. Picture a static site, lovingly crafted to display the research and papers from our lab. The end product was, well, let‚Äôs just say not exactly internet-breaking. But hey, it was my first foray into the wild world of web development!\u003c/p\u003e\n\u003cp\u003eFast forward 10 years, after diving deep into data science, machine learning, and platform engineering, I realized something horrifying: I was still a web development noob. Cue the dramatic music. This simply would not do! So, armed with determination and copious amounts of coffee, I embarked on a quest to master web app development and fill in the gaping holes in my skill set.\u003c/p\u003e","title":"Building a WebApp using React and Quarkus"},{"content":"Imagine you\u0026rsquo;re walking along a path that has treasure chests and traps. Some chests have gold coins, and some traps take away coins. You want to find the part of the path where you can get the most coins.\nThe key idea: It is a dynamic programming algorithm for finding the maximum contiguous sum subarray in a given array. It is a simple and efficient algorithm that works by maintaining two variables:\ncurrent_sum: This variable stores the maximum sum of a contiguous subarray ending at the current index. max_sum: This variable stores the maximum sum of any contiguous subarray in the array. The algorithm works by iterating over the array and updating the current_sum and max_sum variables as follows:\ncurrent_sum = max(array[i], current_sum + array[i]) max_sum = max(current_sum, max_sum) If the current element is greater than the current sum, then the current sum is updated to the current element. Otherwise, the current sum is updated to the current sum plus the current element. The max_sum variable is always updated to the maximum of the current sum and the max_sum variable.\nAt the end of the iteration, the max_sum variable will contain the maximum sum of any contiguous subarray in the array.\nIllustration using an example:\nLet\u0026rsquo;s say the path (or array) looks like this, where positive numbers are treasure chests (gains) and negative numbers are traps (losses):\n[-2, 1, -3, 4, -1, 2, 1, -5, 4] Start at the first spot: -2. Your total goes down by 2. Move to the next spot: +1. Now you\u0026rsquo;re at -1. Next is -3. Now you\u0026rsquo;re at -4. Now, you find a big treasure chest of 4! This takes your total back to 0. But since the total before this was negative, it\u0026rsquo;s better to start counting from this chest. Reset the total to 4. Continue on, adding and subtracting as you hit treasures and traps. By the end, you\u0026rsquo;ll find that the best stretch of the path is [4, -1, 2, 1], which gives you 6 coins. Graphical Representation:\nPath: -2 | 1 | -3 | 4 | -1 | 2 | 1 | -5 | 4 --------------------------------------------------------------- Total: -2 -1 -4 4 3 5 6 1 5 Max: -2 1 1 4 4 5 6 6 6 You can see from the table above, we keep track of our running total and the maximum total we\u0026rsquo;ve seen so far. The highest number in the \u0026lsquo;Max\u0026rsquo; row is our answer - the most coins we can collect on the best part of the path!\nIn simpler terms, Kadane\u0026rsquo;s algorithm keeps track of the current sum and the maximum sum as you traverse the path (or array). If the current sum ever drops below zero, we reset it. The maximum sum we\u0026rsquo;ve seen during our journey is our answer!\n1186. Maximum Subarray Sum with One Deletion 53. Maximum Subarray ","permalink":"/posts/2023/coding-pattern-kadanes-algo/","summary":"\u003cp\u003e\u003cstrong\u003eImagine you\u0026rsquo;re walking along a path that has treasure chests and traps.\u003c/strong\u003e Some chests have gold coins, and some traps take away coins. You want to find the part of the path where you can get the most coins.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eThe key idea\u003c/strong\u003e: It is a dynamic programming algorithm for finding the maximum contiguous sum subarray in a given array. It is a simple and efficient algorithm that works by maintaining two variables:\u003c/p\u003e","title":"Coding Pattern: Kadane's Algo"},{"content":"Preface Facing the Dynamic Programming Challenge\nLike many others, I initially found Dynamic Programming (DP) on LeetCode daunting and perplexing. However, this challenging journey led to profound insights. My initial misconception was that DP was all about complexity, but I learned it\u0026rsquo;s fundamentally about simplifying complex problems into manageable segments. Here\u0026rsquo;s my journey into understanding DP and why it\u0026rsquo;s a crucial tool in a programmer\u0026rsquo;s toolkit.\nUnraveling Dynamic Programming The Essence of DP\nAt its heart, Dynamic Programming is a method to efficiently solve problems by breaking them into smaller, interdependent subproblems. This approach is akin to Divide-and-Conquer and Recursion, but with a unique twist: the subproblems in DP are not independent. The solution to one affects the others, creating a web of dependencies that must be navigated carefully.\nTwo Key Questions of DP:\nWhat is the optimal (maximum or minimum) outcome? How many distinct solutions exist? DP provides structured frameworks to tackle these questions effectively.\nThe DP Framework: A Three-Step Process 1. Define States and Variables:\nIdentifying \u0026lsquo;states\u0026rsquo; is crucial. In DP, a state represents a specific condition or scenario within the problem. For instance, in calculating Fibonacci(10), the states include Fibonacci(9) and Fibonacci(8). 2. Transition Between States:\nThe core of DP lies in figuring out how these states evolve from one to another. Using our Fibonacci example, the transition is defined by Fibonacci(10) = Fibonacci(9) + Fibonacci(8). It\u0026rsquo;s about finding a pattern or a rule that governs this evolution. 3. Establish Base Cases:\nBase cases act as the starting point for the recursive journey of DP solutions. They are typically straightforward and known. In the Fibonacci sequence, they are Fibonacci(1) = 1 and Fibonacci(2) = 1. Approaches: Top-down and Bottom-up Top-down (Memoization):\nThis approach feels natural as it mirrors human problem-solving: start from the end goal and work backward. Memoization, an optimization technique, stores results of expensive function calls and returns the cached result when the same inputs occur again. Bottom-up (Tabulation):\nMore iterative and often faster, Bottom-up systematically solves and stores the results of all subproblems. It eliminates the need for recursion, thereby saving memory overhead. Understanding Time and Space Complexity Both approaches converge on time complexity but can differ in execution speed and memory usage. The complexity often depends on the number of states and transitions involved.\nTime Complexity: Generally, it correlates with the total states processed. For instance, in a DP solution with states $dp(i, j)$, if $i \\leq m$ and $j \\leq n$, the time complexity is typically $O(mn)$.\nSpace Complexity: Varies between the two methods. Top-down\u0026rsquo;s space complexity includes the recursion stack, while Bottom-up\u0026rsquo;s aligns closely with its time complexity due to pre-allocation of state storage.\nClassic Problems 1D Dynamic Programming 1D DP refers to the problems we could use one state variable to define the state, such as House Robber.\n# Bottom-up approach class Solution: def rob(self, nums: List[int]) -\u0026gt; int: if len(nums) == 1: return nums[0] # There are n houses, so the number of states is n dp = [0] * len(nums) # The state variable is i, and dp[i] states the max money robbed at ith house # The base case at 0th and 1th house dp[0] = nums[0] dp[1] = max(nums[0], nums[1]) for i in range(2, len(nums)): # The recurrence relation # 1. Not robbing ith house, the max money should be equal to i-1 # 2. Robbing ith house, then (i - 1)th house cannot be robbed dp[i] = max(dp[i - 1], dp[i - 2] + nums[i]) # return dp[n - 1] return dp[-1] Multi-Dimension Dynamic Programming Multi-Dimension DP represents the problem we need to use more than 1 state variable to represent the state such as Maximum Score from Performing Multiplication Operations\n# Top-down approach class Solution: def maximumScore(self, nums: List[int], multipliers: List[int]) -\u0026gt; int: # Using two state variables, i and left, i is index of multipliers and left is the pointer indicating the potential number take from left end @cache def helper(i, left): # Base case, if we have used up all operations, then we have no value gain any more if i == len(multipliers): return 0 # compute the position of right pointer we could use right = len(nums) - 1 - (i - left) # the transition pattern includes two cases # we take the number either from left or right return max(helper(i + 1, left + 1) + nums[left] * multipliers[i], helper(i + 1, left) + nums[right] * multipliers[i]) # we should return helper(0, 0) since it is on the top given our state variable - when no operations are executed yet return helper(0, 0) Path and Count DP Count Problems: The Quest for Total Solutions Count problems in Dynamic Programming focus on determining the total number of possible solutions to a problem. A classic example is the Coin Change II problem on LeetCode. Here, the challenge is to find out how many distinct combinations of given coins can sum up to a target amount. It\u0026rsquo;s not just about whether a solution exists, but rather how many different ways there are to achieve it. This type of problem leverages DP\u0026rsquo;s ability to explore and count all potential combinations efficiently.\nPath Problems: Charting Routes through Constraints Path problems, while similar to Count problems, often present a slightly different challenge. These problems typically involve navigating through a grid or matrix to find all possible paths from a start point to an end point. The key to applying DP effectively here lies in the movement constraints. For instance, if movement is limited to only right and down in a grid, DP is an ideal approach. However, if movement includes all four directions (up, down, left, right), the problem complexity increases, potentially requiring alternative strategies like Breadth-First Search (BFS) or Depth-First Search (DFS). In these unrestricted movement scenarios, using DP might lead to revisiting the same cell multiple times, making it less efficient.\nLet\u0026rsquo;s use Coin Change II to learn how to solve Count DP.\nclass Solution: def change(self, amount: int, coins: List[int]) -\u0026gt; int: # Top Down approach # We use the target amount and i as the state variables indicating the number of combinations we can make for this amount using the coins starting from i in the list @cache def helper(amount, i): # When the amount is 0, which means we have a viable combination and we should return 1 if amount == 0: return 1 # if the amount is less than 0, then we don\u0026#39;t have a viable combination, in all other cases, we should keep looking if amount \u0026lt; 0: return 0 out = 0 # We will try each coin starting at i for i in range(i, len(coins)): # we accumulate the possible combinations we find as the final output # since we have infinite number of coins, we could try first possible coin till we cannot - this is similiar with DFS. Once we tried all possible combinations starting at ith, we could move to (i + 1)th coin # remember one common pitfall about Count DP is to deduplicate the solution, since we return 1 once we have a viable solution, we need make sure our search path will not duplicate - which means once we tried all possible ways starting with ith coin, we should not include it in our following search out += helper(amount - coins[i], i) return out # The problem case should be helper(amount, 0) given how we define our state variables (see the beginning) return helper(amount, 0) Let\u0026rsquo;s use 63. Unique Paths II to learn Path DP.\nclass Solution: # Use Bottom-up approach def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -\u0026gt; int: # If the start is blocked, then we cannot move if obstacleGrid[0][0] == 1: return 0 m, n = len(obstacleGrid), len(obstacleGrid[0]) # Preallocate the space for dp states # dp[i][j] represents the uniquePath at (i, j) in the grid dp = [[0] * n for _ in range(m)] # base case, there is only 1 way at (0, 0) dp[0][0] = 1 # go through all possible states for i in range(m): for j in range(n): # if there is a blocker, it cannot be reached if obstacleGrid[i][j] == 1: continue # since the agent can only move down or right, the number of unique paths will be the sum of the unique paths at its top and left # it is dp[i][j] = dp[i - 1][j] + dp[i][j - 1], here we need handle the out of boundary case if i - 1 \u0026gt;= 0: dp[i][j] += dp[i - 1][j] if j - 1 \u0026gt;= 0: dp[i][j] += dp[i][j - 1] # the problem case will be dp[m][n] where is the bottom-right cell return dp[-1][-1] Iteration and Inaction Recurrence Relation In some cases, we need to iterate through some possibility to find the optimal solution, like the Coin Change problem we saw in [[#Path and Count DP]].\nAnother case is we might need skip the current operation.\nLike 188. Best Time to Buy and Sell Stock IV, we need decide if we should buy, sell or hold to maximize our gain in the stock.\nclass Solution: # Use top-down approach def maxProfit(self, k: int, prices: List[int]) -\u0026gt; int: # there are three state variables # - leftTransactions: how many transactions we can still make # - i: the ith day in our trading period # - holding: whether we have the stock at our hands # it represnts the max gain we can get given the above state @cache def helper(leftTransactions, i, holding): # if we cannot make any transactions or pass the trading window, we cannot make any more profit, so the max gain is 0 if leftTransactions == 0 or i == len(prices): return 0 out = 0 # One choice is we do nothing on ith day, so we could pass our state to the next day out = max(out, helper(leftTransactions, i + 1, holding)) # if we don\u0026#39;t hold the stock, we could choose to buy it on ith day and our gain need subtract the cost of purchase if holding == 0: out = max(out, -prices[i] + helper(leftTransactions, i + 1, 1)) # if we have the stock, we could choose to sell it and the profit will be price on ith day elif holding == 1: out = max(out, prices[i] + helper(leftTransactions - 1, i + 1, 0)) return out # thus we should return helper(k, 0, 0) indicating the max gain we can get when we can make k transactions starting day 0 without holding it return helper(k, 0, 0) Kadane\u0026rsquo;s Algorithm See My introduction to Kadane\u0026rsquo;s Algorithm\n","permalink":"/posts/2023/coding-pattern-dynamic-programming/","summary":"\u003ch1 id=\"preface\"\u003ePreface\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003eFacing the Dynamic Programming Challenge\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eLike many others, I initially found Dynamic Programming (DP) on LeetCode daunting and perplexing. However, this challenging journey led to profound insights. My initial misconception was that DP was all about complexity, but I learned it\u0026rsquo;s fundamentally about simplifying complex problems into manageable segments. Here\u0026rsquo;s my journey into understanding DP and why it\u0026rsquo;s a crucial tool in a programmer\u0026rsquo;s toolkit.\u003c/p\u003e\n\u003ch1 id=\"unraveling-dynamic-programming\"\u003eUnraveling Dynamic Programming\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003eThe Essence of DP\u003c/strong\u003e\u003c/p\u003e","title":"Coding Pattern: Dynamic Programming"},{"content":"Overview Recursion is a way of solving a problem by breaking it down into smaller problems of the same type. The smaller problems are then solved recursively, until a base case is reached. The base case is a simple problem that can be solved without recursion.\nImagine you have a big box of toy blocks, and each block represents a problem you need to solve. Some blocks are big (complex problems), and some are tiny (simple problems). To solve a big problem, you take apart the big block to find smaller blocks inside, and then, if needed, you take apart those smaller blocks to find even tinier blocks inside them, and so on, until you reach the tiniest blocks that you can easily understand and solve.\nRecursion is like this process of opening boxes to find smaller boxes inside, until you reach the smallest box which you can solve easily. Once you solve the smallest problem, you use its solution to solve the bigger problem it came from, and you keep doing this until you\u0026rsquo;ve solved the original big problem.\nFigure:\nBig Block (Big Problem) | |____ Medium Block (Medium Problem) | | | |____ Small Block (Simple Problem) | | | |____ Solved! | |____ Solved using solution from Medium Block! | |____ Big Problem Solved! In this illustration, you started with a big problem (Big Block). You broke it down into a medium problem (Medium Block), and then into a simple problem (Small Block). Once the simple problem was solved, you used its solution to solve the medium problem, and then the big problem. That\u0026rsquo;s how recursion works!\nCommon places to use recursion Bottom-Up Dynamic Programming Explanation: A method to solve complex problems by breaking them down into simpler subproblems. Unlike top-down, which starts with the main problem and divides it, bottom-up solves the smallest subproblems first and builds up to the main problem.\nFigure:\nFib(5) / \\ Fib(4) Fib(3) / \\ Fib(3) Fib(2) ... and so on. Using bottom-up, we\u0026rsquo;d start with the smallest calculations (Fib(0), Fib(1)) and use their solutions to build up to Fib(5).\nCommon Problems:\nClimbing Stairs Coin Change House Robber Backtracking Explanation: A general algorithm for finding all (or some) solutions to computational problems by incrementally building candidates towards solutions and abandoning a candidate as soon as it is determined to be non-solution.\nFigure:\nStart | Option1 ---- Option2 ---- Option3 (Backtrack) | Option2a ... and so on. If a solution isn‚Äôt possible, we backtrack to try the next possibility.\nCommon Problems:\nPermutations N-Queens Combination Sum Depth-First Search (DFS) Explanation: An algorithm for traversing trees or graphs by exploring as far as possible along each branch before backtracking.\nFigure:\nA / \\ B C | | \\ D E F DFS traversal: A, B, D, C, E, F\nCommon Problems:\nMax Area of Island Number of Islands All Paths From Source to Target Divide and Conquer Explanation: A method to break a problem into smaller subproblems that are similar to the original problem, solve these subproblems recursively, and then combine the solutions to get a solution to the original problem.\nFigure:\nproblem / | \\ sub1 sub2 sub3 Solve Sub1, Sub2, and Sub3, then combine them for the solution.\nCommon Problems:\nMerge Sort Maximum Subarray Count of Smaller Numbers After Self Preorder, Inorder, and Postorder Tree Traversals Explanation: Systematic ways to traverse all nodes in a tree. Preorder visits the current node before its children. Inorder visits the left child, then the current node, then the right child. Postorder visits the children before the current node (see [[Tree \u0026amp; Graph#Tree]]).\nFigure:\nA / \\ B C Preorder: A, B, C\nInorder: B, A, C\nPostorder: B, C, A\nCommon Problems:\nBinary Tree Inorder Traversal Construct Binary Tree from Preorder and Inorder Traversal Populating Next Right Pointers in Each Node Complexity analysis Time complexity Normally the time complexity is proportional to the entire search space. For instance, the tree traversals would go through every node once so the time complexity is the size of the tree.\nSpace complexity The major space complexity is from the recursion stack. Thus we need analyze the deepest depth the recursion could reach. If we are using DFS on a tree, we normally would return when DFS reaches the leaf node thus the recursion stack is the height of the tree at most.\n","permalink":"/posts/2023/coding-pattern-recursion/","summary":"\u003ch1 id=\"overview\"\u003eOverview\u003c/h1\u003e\n\u003cp\u003eRecursion is a way of solving a problem by breaking it down into smaller problems of the same type. The smaller problems are then solved recursively, until a base case is reached. The base case is a simple problem that can be solved without recursion.\u003c/p\u003e\n\u003cp\u003eImagine you have a big box of toy blocks, and each block represents a problem you need to solve. Some blocks are big (complex problems), and some are tiny (simple problems). To solve a big problem, you take apart the big block to find smaller blocks inside, and then, if needed, you take apart those smaller blocks to find even tinier blocks inside them, and so on, until you reach the tiniest blocks that you can easily understand and solve.\u003c/p\u003e","title":"Coding Pattern: Recursion"},{"content":"Overview The union-find algorithm is a data structure and algorithm that maintains a collection of disjoint sets. A disjoint set is a set of elements that are not connected to each other. The union-find algorithm can be used to perform the following operations:\nFind:¬†Find the set that an element belongs to. Union:¬†Merge two sets together. The union-find algorithm is often used to solve problems that involve graph connectivity. For example, the union-find algorithm can be used to determine whether two nodes in a graph are connected, or to find all of the connected components in a graph.\nHere is an illustrative example of the union-find algorithm:\nImagine that we have a set of 5 elements: A, B, C, D, and E. We can use the union-find algorithm to maintain a collection of disjoint sets of these elements.\nInitially, all of the elements are in their own separate sets:\nSet 1: A Set 2: B Set 3: C Set 4: D Set 5: E Now, let\u0026rsquo;s say that we want to merge Set 1 and Set 2. We can use the union-find algorithm to do this by combining the two sets into a single set:\nSet 1: A, B Set 3: C Set 4: D Set 5: E We can also use the union-find algorithm to find the set that an element belongs to. For example, if we want to find the set that element B belongs to, we can use the union-find algorithm to determine that B is in Set 1.\nThe union-find algorithm is a powerful tool that can be used to solve a wide variety of problems. It is often used to solve problems that involve graph connectivity, such as finding the connected components in a graph or determining whether two nodes in a graph are connected.\nHere is a diagram that illustrates the union-find algorithm:\nSet 1 / \\ A B \\ / Set 2 In this diagram, Set 1 and Set 2 are merged together. The union-find algorithm maintains a tree structure for each set. The root of the tree is the representative of the set. In this diagram, A is the representative of Set 1 and B is the representative of Set 2.\nTo find the set that an element belongs to, the union-find algorithm follows the pointers from the element to the root of the tree. For example, to find the set that B belongs to, we would follow the pointer from B to A. Since A is the root of the tree, we know that B is in Set 1.\nTo merge two sets together, the union-find algorithm makes the root of one tree the child of the root of the other tree. For example, to merge Set 1 and Set 2, we would make B the child of A. This would create a single tree that represents both Set 1 and Set 2.\nThe union-find algorithm is a very efficient algorithm for maintaining a collection of disjoint sets. It is often used in graph algorithms, such as Kruskal\u0026rsquo;s algorithm and Prim\u0026rsquo;s algorithm.\nExample of Implementation class UnionFind: def __init__(self): self.parents = {} self.size = {} def insert(self, x): if x not in self.parents: self.parents[x] = x self.size[x] = 1 # recursively find the uppermost parent node (path compression) def find(self, node): if self.parents[node] != node: self.parents[node] = self.find(self.parents[node]) return self.parents[node] # merge two objects into one set def union(self, x, y): # insert x and y into the parents and size dict self.insert(x) self.insert(y) # find the parent of x and y (union by rank) px, py = self.find(x), self.find(y) # they are already in the same set if their parents are the same if px == py: return # always make px the less parent if self.size[px] \u0026gt; self.size[py]: px, py = py, px # so the parent of px is py since px is less self.parents[px] = py # increase the size of py self.size[py] += self.size[px] Space Complexity: The space complexity for the Union-Find data structure is $O(n)$, where n is the number of elements. This is because, typically, two arrays (or vectors) of size $n$ are maintained: one for parent pointers and another for ranks/sizes.\nTime Complexity: Without optimizations, the operations can be quite slow. However, with the Union by Rank and Path Compression optimizations, the operations become much faster.\nUnion Operation (with Union by Rank): This operation ensures that when two sets are combined, the smaller set (in terms of rank) is attached to the root of the larger set. This keeps the tree relatively flat. This operation is generally $O(1)$ but can be considered $O(logn)$ in the worst case because in the worst case the height of the tree can grow up to $logn$. Find Operation (with Path Compression): When performing a find operation to determine the root of a particular element, the algorithm traverses up the tree and, in the process, flattens the tree by making every node point directly to the root. This makes future find operations faster. The amortized time complexity of the find operation with path compression (and union by rank) is near $O(1)$. However, when considering sequences of operations, the inverse Ackermann function, $Œ±(n)$, often comes into play, making the operations effectively constant time for all practical purposes. Union (combined with Find): Since the union operation often involves two find operations (to get the roots of the two sets being unioned), its time complexity is also governed by the find operation. Thus, its amortized time complexity is also effectively constant for practical purposes, but academically it\u0026rsquo;s often cited as $O(Œ±(n))$. In summary, with the Union by Rank and Path Compression optimizations, the Union-Find operations become nearly constant time, $O(Œ±(n))$, where $Œ±(n)$ is the inverse Ackermann function, which grows extremely slowly. For most practical purposes, it\u0026rsquo;s considered constant time.\nExample Questions 721. Accounts Merge Given a list of¬†accounts¬†where each element¬†accounts[i]¬†is a list of strings, where the first element¬†accounts[i][0]¬†is a name, and the rest of the elements are¬†emails¬†representing emails of the account.\nNow, we would like to merge these accounts. Two accounts definitely belong to the same person if there is some common email to both accounts. Note that even if two accounts have the same name, they may belong to different people as people could have the same name. A person can have any number of accounts initially, but all of their accounts definitely have the same name.\nAfter merging the accounts, return the accounts in the following format: the first element of each account is the name, and the rest of the elements are emails¬†in sorted order. The accounts themselves can be returned in¬†any order.\nExample 1:\nInput: accounts = [[\u0026ldquo;John\u0026rdquo;,\u0026ldquo;johnsmith@mail.com\u0026rdquo;,\u0026ldquo;john_newyork@mail.com\u0026rdquo;],[\u0026ldquo;John\u0026rdquo;,\u0026ldquo;johnsmith@mail.com\u0026rdquo;,\u0026ldquo;john00@mail.com\u0026rdquo;],[\u0026ldquo;Mary\u0026rdquo;,\u0026ldquo;mary@mail.com\u0026rdquo;],[\u0026ldquo;John\u0026rdquo;,\u0026ldquo;johnnybravo@mail.com\u0026rdquo;]] Output: [[\u0026ldquo;John\u0026rdquo;,\u0026ldquo;john00@mail.com\u0026rdquo;,\u0026ldquo;john_newyork@mail.com\u0026rdquo;,\u0026ldquo;johnsmith@mail.com\u0026rdquo;],[\u0026ldquo;Mary\u0026rdquo;,\u0026ldquo;mary@mail.com\u0026rdquo;],[\u0026ldquo;John\u0026rdquo;,\u0026ldquo;johnnybravo@mail.com\u0026rdquo;]] Explanation: The first and second John\u0026rsquo;s are the same person as they have the common email \u0026ldquo;johnsmith@mail.com\u0026rdquo;. The third John and Mary are different people as none of their email addresses are used by other accounts. We could return these lists in any order, for example the answer [[\u0026lsquo;Mary\u0026rsquo;, \u0026lsquo;mary@mail.com\u0026rsquo;], [\u0026lsquo;John\u0026rsquo;, \u0026lsquo;johnnybravo@mail.com\u0026rsquo;], [\u0026lsquo;John\u0026rsquo;, \u0026lsquo;john00@mail.com\u0026rsquo;, \u0026lsquo;john_newyork@mail.com\u0026rsquo;, \u0026lsquo;johnsmith@mail.com\u0026rsquo;]] would still be accepted.\nExample 2:\nInput: accounts = [[\u0026ldquo;Gabe\u0026rdquo;,\u0026ldquo;Gabe0@m.co\u0026rdquo;,\u0026ldquo;Gabe3@m.co\u0026rdquo;,\u0026ldquo;Gabe1@m.co\u0026rdquo;],[\u0026ldquo;Kevin\u0026rdquo;,\u0026ldquo;Kevin3@m.co\u0026rdquo;,\u0026ldquo;Kevin5@m.co\u0026rdquo;,\u0026ldquo;Kevin0@m.co\u0026rdquo;],[\u0026ldquo;Ethan\u0026rdquo;,\u0026ldquo;Ethan5@m.co\u0026rdquo;,\u0026ldquo;Ethan4@m.co\u0026rdquo;,\u0026ldquo;Ethan0@m.co\u0026rdquo;],[\u0026ldquo;Hanzo\u0026rdquo;,\u0026ldquo;Hanzo3@m.co\u0026rdquo;,\u0026ldquo;Hanzo1@m.co\u0026rdquo;,\u0026ldquo;Hanzo0@m.co\u0026rdquo;],[\u0026ldquo;Fern\u0026rdquo;,\u0026ldquo;Fern5@m.co\u0026rdquo;,\u0026ldquo;Fern1@m.co\u0026rdquo;,\u0026ldquo;Fern0@m.co\u0026rdquo;]] Output: [[\u0026ldquo;Ethan\u0026rdquo;,\u0026ldquo;Ethan0@m.co\u0026rdquo;,\u0026ldquo;Ethan4@m.co\u0026rdquo;,\u0026ldquo;Ethan5@m.co\u0026rdquo;],[\u0026ldquo;Gabe\u0026rdquo;,\u0026ldquo;Gabe0@m.co\u0026rdquo;,\u0026ldquo;Gabe1@m.co\u0026rdquo;,\u0026ldquo;Gabe3@m.co\u0026rdquo;],[\u0026ldquo;Hanzo\u0026rdquo;,\u0026ldquo;Hanzo0@m.co\u0026rdquo;,\u0026ldquo;Hanzo1@m.co\u0026rdquo;,\u0026ldquo;Hanzo3@m.co\u0026rdquo;],[\u0026ldquo;Kevin\u0026rdquo;,\u0026ldquo;Kevin0@m.co\u0026rdquo;,\u0026ldquo;Kevin3@m.co\u0026rdquo;,\u0026ldquo;Kevin5@m.co\u0026rdquo;],[\u0026ldquo;Fern\u0026rdquo;,\u0026ldquo;Fern0@m.co\u0026rdquo;,\u0026ldquo;Fern1@m.co\u0026rdquo;,\u0026ldquo;Fern5@m.co\u0026rdquo;]]\nConstraints:\n1 \u0026lt;= accounts.length \u0026lt;= 1000 2 \u0026lt;= accounts[i].length \u0026lt;= 10 1 \u0026lt;= accounts[i][j].length \u0026lt;= 30 accounts[i][0]¬†consists of English letters. accounts[i][j] (for j \u0026gt; 0)¬†is a valid email. Solution class UnionFind: def __init__(self): self.parents = {} self.size = {} def insert(self, x): if x not in self.parents: self.parents[x] = x self.size[x] = 1 def find(self, node): if self.parents[node] != node: self.parents[node] = self.find(self.parents[node]) return self.parents[node] def union(self, x, y): self.insert(x) self.insert(y) px, py = self.find(x), self.find(y) if px == py: return if self.size[px] \u0026gt; self.size[py]: px, py = py, px self.parents[px] = py self.size[py] += self.size[px] class Solution: def accountsMerge(self, accounts: List[List[str]]) -\u0026gt; List[List[str]]: uf = UnionFind() name_map = {} for account in accounts: name, emails = account[0], account[1:] for email in emails: name_map[email] = name # merge all the emails with the first email uf.union(emails[0], email) out = defaultdict(list) for key in uf.parents.keys(): # group all emails based on their parent in union-find out[uf.find(key)].append(key) res = [] for key, val in out.items(): res.append([name_map[key]] + sorted(val)) return res Time Complexity: $O(n)$ where $n$ is the number of emails, it is $n$ because of union-by-rank Space Complexity: $O(n)$\n","permalink":"/posts/2023/coding-pattern-trie/","summary":"\u003ch1 id=\"overview\"\u003eOverview\u003c/h1\u003e\n\u003cp\u003eThe union-find algorithm is a data structure and algorithm that maintains a collection of disjoint sets. A disjoint set is a set of elements that are not connected to each other. The union-find algorithm can be used to perform the following operations:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eFind:\u003c/strong\u003e¬†Find the set that an element belongs to.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUnion:\u003c/strong\u003e¬†Merge two sets together.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe union-find algorithm is often used to solve problems that involve graph connectivity. For example, the union-find algorithm can be used to determine whether two nodes in a graph are connected, or to find all of the connected components in a graph.\u003c/p\u003e","title":"Coding Pattern: Trie"},{"content":"Overview It is not easy to summarize the pattern of Two Pointers, but most likely it is used for list and linked list and the required time complexity is O(N) - the underlying pattern allows us to use Two Pointers to go through the list once to get the results.\nCommon usage:\nLinear Structure: Typically applied to a sorted array or linked list. Two pointers might move in the same direction or in opposite directions. Classic Patterns: a. Converging Pointers (often used in sorted arrays): - Start one pointer at the beginning (left) and another at the end (right). - Move them toward each other until they meet or until some condition is satisfied. - Example: Checking if a sorted array has two numbers that sum up to a target. b. Sliding Window: - Use two pointers to represent the start and end of a window, then \u0026ldquo;slide\u0026rdquo; the window through the array/sequence. - Example: Finding the longest substring without repeating characters. c. Fast and Slow Pointers (often used in linked lists): - One pointer moves twice (or more times) as fast as the other. - Useful for detecting cycles in a linked list (Floyd\u0026rsquo;s Cycle Detection Algorithm) or finding the middle element. Usage Scenarios: Finding a Pair with a Given Sum/Target: Given a sorted array, determine if there\u0026rsquo;s a pair that sums up to a target. Move the left and right pointers based on the sum comparison to the target. Removing Duplicates: Two pointers can be used to remove duplicates from a sorted array or linked list, with one pointer iterating through and another pointing to the last non-duplicate item. Palindrome Checking: To determine if a string or linked list is a palindrome, you can use two pointers moving from the two ends towards the center. Max/Min Subarray/Sublist: Using the sliding window variant, find the subarray with the maximum/minimum sum or other properties. Advantages: Efficiency: The two-pointer technique can sometimes convert a brute force solution with time complexity O(n^2) to a more efficient O(n) solution. Space: This method is in-place and typically uses O(1) extra space. Example Questions 88. Merge Sorted Array You are given two integer arrays¬†nums1¬†and¬†nums2, sorted in¬†non-decreasing order, and two integers¬†m¬†and¬†n, representing the number of elements in¬†nums1¬†and¬†nums2¬†respectively.\nMerge¬†nums1¬†and¬†nums2¬†into a single array sorted in¬†non-decreasing order.\nThe final sorted array should not be returned by the function, but instead be¬†stored inside the array¬†nums1. To accommodate this,¬†nums1¬†has a length of¬†m + n, where the first¬†m¬†elements denote the elements that should be merged, and the last¬†n¬†elements are set to¬†0¬†and should be ignored.¬†nums2¬†has a length of¬†n.\nExample 1:\nInput: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3 Output: [1,2,2,3,5,6] Explanation: The arrays we are merging are [1,2,3] and [2,5,6]. The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.\nExample 2:\nInput: nums1 = [1], m = 1, nums2 = [], n = 0 Output: [1] Explanation: The arrays we are merging are [1] and []. The result of the merge is [1].\nExample 3:\nInput: nums1 = [0], m = 0, nums2 = [1], n = 1 Output: [1] Explanation: The arrays we are merging are [] and [1]. The result of the merge is [1]. Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.\nConstraints:\nnums1.length == m + n nums2.length == n 0 \u0026lt;= m, n \u0026lt;= 200 1 \u0026lt;= m + n \u0026lt;= 200 -109 \u0026lt;= nums1[i], nums2[j] \u0026lt;= 109 Follow up:¬†Can you come up with an algorithm that runs in¬†O(m + n)¬†time?\nSolution:\nThey are sorted arrays, and the follow-up asks if it can be done in linear time. And the question is to merge two sorted arrays into one sorted array. Intuitively we could do it zigzag.\nclass Solution: def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -\u0026gt; None: \u0026#34;\u0026#34;\u0026#34; Do not return anything, modify nums1 in-place instead. \u0026#34;\u0026#34;\u0026#34; if n == 0: return # copy nums1 since it is larger nums1_cp = nums1[:] # create three pointers p1 and p2 starting at left end p1, p2, p3 = 0, 0, 0 # when p1 and p2 are less than the size of nums1 and nums2, we continue to merge # we move p3 every iteration since we are inserting the value while p1 \u0026lt; m or p2 \u0026lt; n: if p2 == n: nums1[p3] = nums1_cp[p1] p1 += 1 elif p1 == m: nums1[p3] = nums2[p2] p2 += 1 elif nums1_cp[p1] \u0026lt;= nums2[p2]: nums1[p3] = nums1_cp[p1] p1 += 1 else: nums1[p3] = nums2[p2] p2 += 1 p3 += 1 11. Container With Most Water You are given an integer array¬†height¬†of length¬†n. There are¬†n¬†vertical lines drawn such that the two endpoints of the¬†ith¬†line are¬†(i, 0)¬†and¬†(i, height[i]).\nFind two lines that together with the x-axis form a container, such that the container contains the most water.\nReturn¬†the maximum amount of water a container can store.\nNotice¬†that you may not slant the container.\nExample 1:\nInput: height = [1,8,6,2,5,4,8,3,7] Output: 49 Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\nExample 2:\nInput: height = [1,1] Output: 1\nConstraints:\nn == height.length 2 \u0026lt;= n \u0026lt;= 105 0 \u0026lt;= height[i] \u0026lt;= 104 Solution\nThis question asks the max size of the container and we know the size is determined by the shorter column between two end. In other words, if height[left] is less than height[right], the size could is at most height[left]*(right - left) no matter how we move height[right]\nTherefore, we could try to find a larger height[left] by moving left and check it yields a larger size. In this case, we could use Two Pointers starting at the left and right end of height.\nclass Solution: def maxArea(self, height: List[int]) -\u0026gt; int: # create two pointers at left and right end head = 0 tail = len(height) - 1 res = 0 # continue to check when two pointers are not met yet while head \u0026lt; tail: container_len = tail - head # update the max size found res = max(res, container_len * min(height[head], height[tail])) # move tail if height[tail] is less and otherwise move head if height[head] \u0026gt; height[tail]: tail -= 1 else: head += 1 return res 42. Trapping Rain Water Given¬†n¬†non-negative integers representing an elevation map where the width of each bar is¬†1, compute how much water it can trap after raining.\nExample 1:\nInput: height = [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.\nExample 2:\nInput: height = [4,2,0,3,2,5] Output: 9\nConstraints:\nn == height.length 1 \u0026lt;= n \u0026lt;= 2 * 104 0 \u0026lt;= height[i] \u0026lt;= 105 Solution:\nThe idea is to calculate the trapped water using the $min(left_{max}, right_{max})$ as the water will be trapped by the shorter block like [11. Container With Most Water](#11. Container With Most Water ) except we don\u0026rsquo;t move the higher block here.\nLike the dynamic programming, we will update the $left_{max}$ and $right_{max}$ but we don‚Äôt have to store all heights. The reason we need only one pass because the $left_{max}$ and $right_{max}$ will only increase when we move their pointers. If $left_i{max}\u0026lt;right_j{max}$ at point $i$, and $j$, we should expect $left_i{max}\u0026lt;right_i{max}$.\nclass Solution: def trap(self, height: List[int]) -\u0026gt; int: l, r = 0, len(height) - 1 l_h, r_h = height[0], height[-1] out = 0 while l \u0026lt; r: # update the max height from left and right l_h = max(l_h, height[l]) r_h = max(r_h, height[r]) # if left max height is less than right max height # we should move left pointer and calculate the trapped water at l if l_h \u0026lt; r_h: out += l_h - height[l] l += 1 else: out += r_h - height[r] r -= 1 return out LinkedList As one kind of list, Two Pointers could also be used for linked list, though sometimes we call it Two Runners. The idea is to have a slow and a fast runner. Normally when fast runner finishes, the slow runner is at the middle of the linked list which is useful.\n876. Middle of the Linked List Given the¬†head¬†of a singly linked list, return¬†the middle node of the linked list.\nIf there are two middle nodes, return¬†the second middle¬†node.\nExample 1:\nInput: head = [1,2,3,4,5] Output: [3,4,5] Explanation: The middle node of the list is node 3.\nExample 2:\nInput: head = [1,2,3,4,5,6] Output: [4,5,6] Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one.\nConstraints:\nThe number of nodes in the list is in the range¬†[1, 100]. 1 \u0026lt;= Node.val \u0026lt;= 100 Solution:\nWhen length is odd, the fast runner will finish at the end of the list and the slow runner is at the middle point When length is even, the fast runner will finish right after the end of the list and the slow runner is at the start of the second half list # Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def middleNode(self, head: Optional[ListNode]) -\u0026gt; Optional[ListNode]: slow, fast = head, head while fast and fast.next: slow = slow.next fast = fast.next.next return slow ","permalink":"/posts/2023/coding-pattern-two-pointers/","summary":"\u003ch3 id=\"overview\"\u003eOverview\u003c/h3\u003e\n\u003cp\u003eIt is not easy to summarize the pattern of \u003cstrong\u003eTwo Pointers\u003c/strong\u003e, but most likely it is used for list and linked list and the required time complexity is \u003ccode\u003eO(N)\u003c/code\u003e - the underlying pattern allows us to use \u003cstrong\u003eTwo Pointers\u003c/strong\u003e to go through the list once to get the results.\u003c/p\u003e\n\u003cp\u003eCommon usage:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eLinear Structure\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003eTypically applied to a sorted array or linked list.\u003c/li\u003e\n\u003cli\u003eTwo pointers might move in the same direction or in opposite directions.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eClassic Patterns\u003c/strong\u003e:\na. \u003cstrong\u003eConverging Pointers\u003c/strong\u003e (often used in sorted arrays): - Start one pointer at the beginning (\u003ccode\u003eleft\u003c/code\u003e) and another at the end (\u003ccode\u003eright\u003c/code\u003e). - Move them toward each other until they meet or until some condition is satisfied. - Example: Checking if a sorted array has two numbers that sum up to a target.\nb. \u003cstrong\u003eSliding Window\u003c/strong\u003e: - Use two pointers to represent the start and end of a window, then \u0026ldquo;slide\u0026rdquo; the window through the array/sequence. - Example: Finding the longest substring without repeating characters.\nc. \u003cstrong\u003eFast and Slow Pointers\u003c/strong\u003e (often used in linked lists): - One pointer moves twice (or more times) as fast as the other. - Useful for detecting cycles in a linked list (Floyd\u0026rsquo;s Cycle Detection Algorithm) or finding the middle element.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUsage Scenarios\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eFinding a Pair with a Given Sum/Target\u003c/strong\u003e: Given a sorted array, determine if there\u0026rsquo;s a pair that sums up to a target. Move the \u003ccode\u003eleft\u003c/code\u003e and \u003ccode\u003eright\u003c/code\u003e pointers based on the sum comparison to the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRemoving Duplicates\u003c/strong\u003e: Two pointers can be used to remove duplicates from a sorted array or linked list, with one pointer iterating through and another pointing to the last non-duplicate item.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePalindrome Checking\u003c/strong\u003e: To determine if a string or linked list is a palindrome, you can use two pointers moving from the two ends towards the center.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMax/Min Subarray/Sublist\u003c/strong\u003e: Using the sliding window variant, find the subarray with the maximum/minimum sum or other properties.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAdvantages\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eEfficiency\u003c/strong\u003e: The two-pointer technique can sometimes convert a brute force solution with time complexity O(n^2) to a more efficient O(n) solution.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSpace\u003c/strong\u003e: This method is in-place and typically uses O(1) extra space.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"example-questions\"\u003eExample Questions\u003c/h3\u003e\n\u003ch4 id=\"88-merge-sorted-array\"\u003e\u003ca href=\"https://leetcode.com/problems/merge-sorted-array/\"\u003e88. Merge Sorted Array\u003c/a\u003e\u003c/h4\u003e\n\u003cp\u003eYou are given two integer arrays¬†\u003ccode\u003enums1\u003c/code\u003e¬†and¬†\u003ccode\u003enums2\u003c/code\u003e, sorted in¬†\u003cstrong\u003enon-decreasing order\u003c/strong\u003e, and two integers¬†\u003ccode\u003em\u003c/code\u003e¬†and¬†\u003ccode\u003en\u003c/code\u003e, representing the number of elements in¬†\u003ccode\u003enums1\u003c/code\u003e¬†and¬†\u003ccode\u003enums2\u003c/code\u003e¬†respectively.\u003c/p\u003e","title":"Coding Pattern: Two Pointers"},{"content":"Overview The Divide-n-Conquer strategy often employs recursion, as it relies on applying the same method to reduce the problem size by half and subsequently combining the outcomes for the ultimate solution.\nI view Divide-n-Conquer in a light similar to MapReduce, particularly when the task involves transformation. MapReduce breaks down a large problem into more manageable, independent sub-problems. Since each of these sub-problems operates autonomously, we can address them sequentially and still integrate their solutions. Key to this approach is ensuring the main problem can be independently segmented and the derived solutions can be seamlessly merged.\nThe typical blueprint for Divide-n-Conquer involves a recursive function. This function produces a result when the size becomes null and provides mechanisms to split the problem and amalgamate the solutions. Consequently, time complexity predominantly depends on this recursive function.\nExample Questions 108. Convert Sorted Array to Binary Search Tree Given an integer array¬†`nums`¬†where the elements are sorted in¬†**ascending order**, convert¬†_it to a_¬†**_height-balanced_** _binary search tree_. **Example 1:** ![](https://assets.leetcode.com/uploads/2021/02/18/btree1.jpg) **Input:** nums = [-10,-3,0,5,9] **Output:** [0,-3,9,-10,null,5] **Explanation:** [0,-10,5,null,-3,null,9] is also accepted: ![](https://assets.leetcode.com/uploads/2021/02/18/btree2.jpg) **Example 2:** ![](https://assets.leetcode.com/uploads/2021/02/18/btree.jpg) **Input:** nums = [1,3] **Output:** [3,1] **Explanation:** [1,null,3] and [3,1] are both height-balanced BSTs. Solution: The question asks to transform the sorted array into a height-balanced BST so:\nthe number of nodes on the left and right should be very close -\u0026gt; implies how to divide the question the BST is resulted from the sorted array -\u0026gt; indicates transformation If we split the array into separate arrays, each array is still sorted and can be transformed into a height-balanced BST, thus we can make a BST using these small BST # Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def sortedArrayToBST(self, nums: List[int]) -\u0026gt; Optional[TreeNode]: # We need an recursion to convert the divided arrays into BST def helper(nums): # if the array is empty, we should create a null node if len(nums) == 0: return None # if there is only one value in the array, this tree has only one node if len(nums) == 1: return TreeNode(nums[0]) # we are building a height-balanced BST, thus we should divide the nums array into half each time mid = len(nums) // 2 # the value at the mid is the root root = TreeNode(nums[mid]) # the left branch is the BST resulted from the left half array root.left = helper(nums[:mid]) # the right branch is the BST resulted from the right half array root.right = helper(nums[mid+1:]) return root return helper(nums) Time Complexity: O(N) even it is recursion, we are visiting each element exactly once Space Complexity: O(logN) it is the height of the BST tree we are creating\n215. Kth Largest Element in an Array Given an integer array¬†`nums`¬†and an integer¬†`k`, return¬†_the_¬†`kth`¬†_largest element in the array_. Note that it is the¬†`kth`¬†largest element in the sorted order, not the¬†`kth`¬†distinct element. Can you solve it without sorting? **Example 1:** **Input:** nums = [3,2,1,5,6,4], k = 2 **Output:** 5 **Example 2:** **Input:** nums = [3,2,3,1,2,4,5,5,6], k = 4 **Output:** 4 **Constraints:** - `1 \u0026lt;= k \u0026lt;= nums.length \u0026lt;= 105` - `-104 \u0026lt;= nums[i] \u0026lt;= 104` Solution This solution is to use quick select to find the Kth largest value from a non-sorted array. Quick select is essentially divide-n-conquer as:\nwe divide the array using a random pivot check which subarray could contain the kth largest value continue the search until we get the result we need a recursion function to work on each array import heapq class Solution: def findKthLargest(self, nums: List[int], k: int) -\u0026gt; int: def quick_select(nums, k): # random select a value from the array pivot = random.choice(nums) # create the subarray contains the larger, smaller and equaivalent values more, less, equal = [], [], [] for num in nums: if num \u0026gt; pivot: more.append(num) elif num \u0026lt; pivot: less.append(num) else: equal.append(num) # If there are more than k elements larger than the pivot in array more, we can search kth largest value from more and it is same kth largest value as the original array if len(more) \u0026gt;= k: return quick_select(more, k) # If the number of larger and equaivalent values are less than k, the kth largest value should be in less array, but we cannot find kth largest value from less since it will result in a much smaller value. # we need identify the new kth target in the less array if len(more) + len(equal) \u0026lt; k: return quick_select(less, k - len(more) - len(equal)) # otherwise, the pivot should be the kth largest value return pivot return quick_select(nums, k) 23. Merge k Sorted Lists You are given an array of¬†`k`¬†linked-lists¬†`lists`, each linked-list is sorted in ascending order. _Merge all the linked-lists into one sorted linked-list and return it._ **Example 1:** **Input:** lists = [[1,4,5],[1,3,4],[2,6]] **Output:** [1,1,2,3,4,4,5,6] **Explanation:** The linked-lists are: [ 1-\u0026gt;4-\u0026gt;5, 1-\u0026gt;3-\u0026gt;4, 2-\u0026gt;6 ] merging them into one sorted list: 1-\u0026gt;1-\u0026gt;2-\u0026gt;3-\u0026gt;4-\u0026gt;4-\u0026gt;5-\u0026gt;6 **Example 2:** **Input:** lists = [] **Output:** [] **Example 3:** **Input:** lists = [[]] **Output:** [] **Constraints:** - `k == lists.length` - `0 \u0026lt;= k \u0026lt;= 104` - `0 \u0026lt;= lists[i].length \u0026lt;= 500` - `-104 \u0026lt;= lists[i][j] \u0026lt;= 104` - `lists[i]`¬†is sorted in¬†**ascending order**. - The sum of¬†`lists[i].length`¬†will not exceed¬†`104`. Solution This is an advanced question based off 21. Merge Two Sorted Lists.\nAnd this question has the following characteristics leading to divide-n-conquer:\nmerge k sorted list is the same as merge 2 sorted lists, since we want one single sorted list in the end it is similar to MapReduce, aggregate multiple lists into one list the merge of any two lists doesn\u0026rsquo;t affect the final result nor the merge of any other lists Thus, we could divide the list of k sorted lists into several lists and each contains 1 or 2 sorted lists for us to merge. Then we can always merge 2 sorted lists.\n# Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def mergeKLists(self, lists: List[Optional[ListNode]]) -\u0026gt; Optional[ListNode]: # merge 2 sorted lists recursively def merge2list(list1, list2): if not list1: return list2 if not list2: return list1 # Choose the smaller head node and merge the remaining nodes. if list1.val \u0026gt; list2.val: new_node = ListNode(list2.val) new_node.next = merge2list(list1, list2.next) else: new_node = ListNode(list1.val) new_node.next = merge2list(list1.next, list2) return new_node n = len(lists) # Base cases: empty or single list. if n == 0: return None if n == 1: return lists[0] # Split lists in half and merge recursively. left_merged_lists = self.mergeKLists(lists[:n//2]) right_merged_lists = self.mergeKLists(lists[n//2:]) # Merge the two halves. return merge2list(left_merged_lists, right_merged_lists) Time Complexity: O(NlogK) where N is the number of total elements in lists, since we divide lists into half so the height of the resulted tree is logK, and each node need to visit all elements waiting to be sorted thus the actual time should be $O(‚àë_{i=1}^N log‚Äãk‚Äã)=O(Nlogk)$ Space Complexity: O(NlogK) the height of recursion stack should logK for mergeKLists and merge2list could need N stacks in the worst case (the recursion stack could go up to N)\nTakeaways When faced with unknown data in a query that requires consolidation into a single data point, and where partial data aggregation won\u0026#39;t affect the overall outcome or aggregation of other data, it\u0026#39;s advisable to employ the `divide-n-conquer` approach. This strategy is particularly relevant if the scenario reminds you of MapReduce. ","permalink":"/posts/2023/coding-pattern-divide--conquer/","summary":"\u003ch3 id=\"overview\"\u003eOverview\u003c/h3\u003e\n\u003cp\u003eThe \u003ccode\u003eDivide-n-Conquer\u003c/code\u003e strategy often employs recursion, as it relies on applying the same method to reduce the problem size by half and subsequently combining the outcomes for the ultimate solution.\u003c/p\u003e\n\u003cp\u003eI view \u003ccode\u003eDivide-n-Conquer\u003c/code\u003e in a light similar to MapReduce, particularly when the task involves transformation. MapReduce breaks down a large problem into more manageable, independent sub-problems. Since each of these sub-problems operates autonomously, we can address them sequentially and still integrate their solutions. Key to this approach is ensuring the main problem can be independently segmented and the derived solutions can be seamlessly merged.\u003c/p\u003e","title":"Coding Pattern: Divide \u0026 Conquer"},{"content":"Overview In one word, binary search is to search for a target in a sorted array. The idea is to shrink the search space to empty.\nIt must be sorted because we can be sure how to shrink the search space and we normally reduce the search space by half so the time complexity is O(logN) where N is the size of entire search space.\nOne common problem to understand Binary Search is how to identify the boundary of the search space.\nThe below is the pattern I am using to solve the most Binary Search questions.\nclass Solution: def search(self, nums: List[int], target: int) -\u0026gt; int: # The boundary is inclusive which determines the while condition head, tail = 0, len(nums) - 1 # since the boundary is inclusive on the two ends of the nums array # we should search even when head == tail and we should just check # that particular value while head \u0026lt;= tail: # we use floor division to make sure mid is an integer otherwise # it cannot be used to index # and using floor division will always result in a smaller value # towards head so we don\u0026#39;t want to stop search when head \u0026lt; tail mid = (head + tail) // 2 # this is the part I love about this approach # we can return the result right away if it is equal to the target as # 1: we don\u0026#39;t have to go through all search space # 2: we can safely eliminate mid point in the next search if nums[mid] == target: return mid # if target is larger than nums[mid], it indicates the result sits # on the left of mid, and otherwise the result sits on the right if nums[mid] \u0026lt; target: # since we are sure nums[mid] is not the result, we don\u0026#39;t have # to check nums[mid] again and we could move head to mid + 1 # otherwise, we move tail to mid - 1 head = mid + 1 else: tail = mid - 1 # we are sure no results are found since all space are searched return -1 Example Questions 69. Sqrt(x)\nGiven a non-negative integer¬†x, return¬†the square root of¬†x¬†rounded down to the nearest integer. The returned integer should be¬†non-negative¬†as well.\nYou¬†must not use¬†any built-in exponent function or operator.\nFor example, do not use¬†pow(x, 0.5)¬†in c++ or¬†x ** 0.5¬†in python. Example 1:\nInput: x = 4 Output: 2 Explanation: The square root of 4 is 2, so we return 2.\nExample 2:\nInput: x = 8 Output: 2 Explanation: The square root of 8 is 2.82842\u0026hellip;, and since we round it down to the nearest integer, 2 is returned.\nConstraints:\n0 \u0026lt;= x \u0026lt;= 231 - 1 Solution:\nclass Solution: # we are using binary search because the search space is sorted and must be # from [1, x] def mySqrt(self, x: int) -\u0026gt; int: if x \u0026lt; 2: return x # The search space is [0, x//2] since it is to find the square root head, tail = 0, x // 2 while head \u0026lt;= tail: mid = (head + tail) // 2 temp = mid * mid if temp == x: return mid elif temp \u0026lt; x: head = mid + 1 else: tail = mid - 1 if mid * mid \u0026gt; x: return mid - 1 else: return mid 33. Search in Rotated Sorted Array\nThere is an integer array¬†nums¬†sorted in ascending order (with¬†distinct¬†values).\nPrior to being passed to your function,¬†nums¬†is¬†possibly rotated¬†at an unknown pivot index¬†k¬†(1 \u0026lt;= k \u0026lt; nums.length) such that the resulting array is¬†[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]¬†(0-indexed). For example,¬†[0,1,2,4,5,6,7]¬†might be rotated at pivot index¬†3¬†and become¬†[4,5,6,7,0,1,2].\nGiven the array¬†nums¬†after¬†the possible rotation and an integer¬†target, return¬†the index of¬†target¬†if it is in¬†nums, or¬†-1¬†if it is not in¬†nums.\nYou must write an algorithm with¬†O(log n)¬†runtime complexity.\nExample 1:\nInput: nums = [4,5,6,7,0,1,2], target = 0 Output: 4\nExample 2:\nInput: nums = [4,5,6,7,0,1,2], target = 3 Output: -1\nExample 3:\nInput: nums = [1], target = 0 Output: -1\nConstraints:\n1 \u0026lt;= nums.length \u0026lt;= 5000 -104 \u0026lt;= nums[i] \u0026lt;= 104 All values of¬†nums¬†are¬†unique. nums¬†is an ascending array that is possibly rotated. -104 \u0026lt;= target \u0026lt;= 104 Solution\nclass Solution: def search(self, nums: list[int], target: int) -\u0026gt; int: head = 0 tail = len(nums) - 1 while head \u0026lt;= tail: mid = (head + tail) // 2 if nums[mid] == target: return mid if nums[head] \u0026lt;= nums[mid]: if nums[head] \u0026lt;= target \u0026lt;= nums[mid]: tail = mid - 1 else: head = mid + 1 else: if nums[mid] \u0026lt;= target \u0026lt;= nums[tail]: head = mid + 1 else: tail = mid - 1 return -1 4. Median of Two Sorted Arrays\nGiven two sorted arrays¬†nums1¬†and¬†nums2¬†of size¬†m¬†and¬†n¬†respectively, return¬†the median¬†of the two sorted arrays.\nThe overall run time complexity should be¬†O(log (m+n)).\nExample 1:\nInput: nums1 = [1,3], nums2 = [2] Output: 2.00000 Explanation: merged array = [1,2,3] and median is 2.\nExample 2:\nInput: nums1 = [1,2], nums2 = [3,4] Output: 2.50000 Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\nConstraints:\nnums1.length == m nums2.length == n 0 \u0026lt;= m \u0026lt;= 1000 0 \u0026lt;= n \u0026lt;= 1000 1 \u0026lt;= m + n \u0026lt;= 2000 -106 \u0026lt;= nums1[i], nums2[i] \u0026lt;= 106 Solution:\nThis question has the following information:\ntwo sorted arrays find the median of the two sorted arrays which indicate the non-descending order time complexity is O(log(m+n)) which is a big sign of Binary Search The idea is to find the slice, say mid1 and mid2, in two arrays and nums1[mid1] \u0026lt; nums2[mid2] and nums2[mid2] \u0026lt; nums1[mid1] so we know the elements on the left of mid1 and mid2 are smaller than the elements on the other side. Then we could get the median based on the size of the total elements.\nAnd one key in this question is to make sure all the elements on the left add up should be equal to the half size of entire elements, then we can ensure the mid1 and mid2 represent the position of median values.\nclass Solution: def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -\u0026gt; float: if len(nums1) \u0026gt; len(nums2): return self.findMedianSortedArrays(nums2, nums1) m, n = len(nums1), len(nums2) # the search space is the length of the array unlike the index in above questions, this is important since the array is 0-indexed. head, tail = 0, m while head \u0026lt;= tail: # this the length we attempt to grap from nums1 mid1 = (head + tail) // 2 # this is the length we attempt to grap from nums2, it is (m + n + 1)//2 - mid1 so mid2 will not be negative # when mid1 increases and equal to m, (m + n)//2 - m could be negative when n \u0026lt; m and (m + n) is odd, thus (m + n + 1) ensure mid2 won\u0026#39;t be negative mid2 = (m + n + 1) // 2 - mid1 # if the length is 0 for either nums1 or nums2, the value on the left should be infinite negative since there is no value maxLeft1 = float(\u0026#34;-inf\u0026#34;) if mid1 == 0 else nums1[mid1 - 1] maxLeft2 = float(\u0026#34;-inf\u0026#34;) if mid2 == 0 else nums2[mid2 - 1] # likewise, if entire elements are grapped, the element on the right is infinite positive minRight1 = float(\u0026#34;inf\u0026#34;) if mid1 == m else nums1[mid1] minRight2 = float(\u0026#34;inf\u0026#34;) if mid2 == n else nums2[mid2] # since we get mid2 from mid1 and the total length, the mid1 and mid2 should always slice the entire elements into half and we only need check if the elements to the left of mid1 and mid2 are less than those on the other side. if maxLeft1 \u0026lt;= minRight2 and maxLeft2 \u0026lt;= minRight1: # if so, we calculate the median given the total size if (m + n) % 2 == 0: # if it is even, we need the value on the left and right of mid since it requires two value return (min(minRight1, minRight2) + max(maxLeft1, maxLeft2)) / 2 else: # otherwise, we only need the max of maxLeft1 and maxLeft2 return max(maxLeft1, maxLeft2) else: # if the ending condition doesn\u0026#39;t meet, we should adjust the search space to contain less elements from nums1 since the left value of mid1, maxLeft1, is larger than the right value of mid2, minRight2 if maxLeft1 \u0026gt; minRight2: tail = mid1 - 1 else: head = mid1 + 1 1891. Cutting Ribbons\nYou are given an integer array¬†ribbons, where¬†ribbons[i]¬†represents the length of the¬†ith¬†ribbon, and an integer¬†k. You may cut any of the ribbons into any number of segments of¬†positive integer¬†lengths, or perform no cuts at all.\nFor example, if you have a ribbon of length¬†4, you can: Keep the ribbon of length¬†4, Cut it into one ribbon of length¬†3¬†and one ribbon of length¬†1, Cut it into two ribbons of length¬†2, Cut it into one ribbon of length¬†2¬†and two ribbons of length¬†1, or Cut it into four ribbons of length¬†1. Your goal is to obtain¬†k¬†ribbons of all the¬†same positive integer length. You are allowed to throw away any excess ribbon as a result of cutting.\nReturn¬†the¬†maximum¬†possible positive integer length that you can obtain¬†k¬†ribbons of_, or_¬†0¬†if you cannot obtain¬†k¬†ribbons of the same length.\nExample 1:\nInput: ribbons = [9,7,5], k = 3 Output: 5 Explanation:\nCut the first ribbon to two ribbons, one of length 5 and one of length 4. Cut the second ribbon to two ribbons, one of length 5 and one of length 2. Keep the third ribbon as it is. Now you have 3 ribbons of length 5. Example 2:\nInput: ribbons = [7,5,9], k = 4 Output: 4 Explanation:\nCut the first ribbon to two ribbons, one of length 4 and one of length 3. Cut the second ribbon to two ribbons, one of length 4 and one of length 1. Cut the third ribbon to three ribbons, two of length 4 and one of length 1. Now you have 4 ribbons of length 4. Example 3:\nInput: ribbons = [5,7,9], k = 22 Output: 0 Explanation: You cannot obtain k ribbons of the same positive integer length.\nConstraints:\n1 \u0026lt;= ribbons.length \u0026lt;= 105 1 \u0026lt;= ribbons[i] \u0026lt;= 105 1 \u0026lt;= k \u0026lt;= 109 Solution:\nThis question asks if we could find a maximum possible length to cut the ribbons into k ribbons of the same size.\nTherefore, we know it is a search question between the minimal length, 1, and the maximal length, the longest ribbon given.\nAnd we want to have the maximum possible length of each cut. Suppose we have length A which yields more than k ribbons, we should try a larger value and otherwise a lesser value.\nThe only difference with above questions is we have to go through the entire search space. And we are trying to find the maximal value, in our pattern, we should return $tail$ (the right end of search space) in the end.\nclass Solution: def maxLength(self, ribbons: List[int], k: int) -\u0026gt; int: # set the two end of search space head, tail = 1, max(ribbons) # check how many ribbons can be made def helper(cut): count = 0 for ribbon in ribbons: count += ribbon // cut return count while head \u0026lt;= tail: mid = (head + tail) // 2 # if we get more than k rippons, we could try a larger value if helper(mid) \u0026gt;= k: head = mid + 1 else: tail = mid - 1 # here we return tail instead of mid # In one word, the search space will be between two values at the end # suppose head = 4 and tail = 5, so mid = 4 due to floor division, then we have two scenarios 4 is the answer and 4 is not the answer. But no matter what, we will make head = mid + 1 = 5 (since 4 will def generate k or more than k rippons, otherwise the head won\u0026#39;t be 4 at the last round). # When head = 5, the mid = 5 #if 5 is not the answer, tail will become mid - 1 = 4 and we finish search #if 5 is the answer, head = mid + 1 = 6 \u0026gt; tail = 5, we also finish search # thus we should return tail as the result return tail Takeaways In my opinion, *Binary Search* is a possible solution when the questions contain the following information: 1. The question asks us to find an result and this results are comparable with each other so we could shrink the search space 2. The search space must be sorted 3. We also need pay attention to the final result (tail or mid) In this case, as long as we can transform the question into the case above, we could use *Binary Search* to solve it. ","permalink":"/posts/2023/coding-pattern-binary-search/","summary":"\u003ch1 id=\"overview\"\u003eOverview\u003c/h1\u003e\n\u003cp\u003eIn one word, binary search is to search for a target in a sorted array. The idea is to shrink the search space to empty.\u003c/p\u003e\n\u003cp\u003eIt must be sorted because we can be sure how to shrink the search space and we normally reduce the search space by half so the time complexity is \u003ccode\u003eO(logN)\u003c/code\u003e where \u003ccode\u003eN\u003c/code\u003e is the size of entire search space.\u003c/p\u003e\n\u003cp\u003eOne common problem to understand \u003cem\u003eBinary Search\u003c/em\u003e is how to identify the boundary of the search space.\u003c/p\u003e","title":"Coding Pattern: Binary Search"},{"content":"Intro In Route transmission to VPN container, I talked about how to download contents via VPN tunnel so we can get rid of some troubles. But that is far from enough for us to build a home media server which should work as Netflix and Hulu to us. We shouldn\u0026rsquo;t bother with the torrent and subtitle search. Once we add a show to our watch list, everything should be set up automatically. I will introduce the tools and necessary setup for me to build a home media server in the following sections.\nStructure All the above services are running inside a docker box which could be synology and rasperry Pi. Take Sonarr as an example:\nOnce we add a show to Sonarr, it will search the sees via Jackett Then Sonarr will add the download tasks to the downloadclient like transmission in my deployment Then the contents will be downloaded to local path Then Plex could genear metadata from the configred folder The generated metata will assis ChineseSubFinder to download subtitles (Optional) The workflow applies to the radarr as well. Thus we could enjoy the show by just adding it to our library without worrying the seeds and subtitles. Configuration Portainer I use portainer to manage the docker which provides more flexibility than docker app in Synology. I highly recommend everyone to use it to manage the containers.\nVPN \u0026amp; Download Client In Route transmission to VPN container, I used proto VPN free version but I upgraded to NordVPN with the Christmas deal. But proto VPN free version is sufficient if you only need for downloading contents.\nEverything else is the same as I am still using gluetun to connect the VPN and handle the traffic from other containers. If you wonder how to route the download client to VPN tunnel, please check that article since we need do the same thing for other containers.\nJackett, Sonarr and Radarr After installing the three containers in portainer, it is preferred to use the VPN as an extra layer so I routed Jackett to VPN container (e.g. gluetun) as well.\nAs Sonarr and Radarr, routing them to VPN will confuse them to connect to Jackett and the download client. So we just need deploy them as default setting (remember to change the volume binding accordingly).\nThe Last thing we need do is to enable the metadata creation in Sonarr and Radarr which is essential for ChineseSubFinder to work.\nPlex I am using Plex but feel free to try Jellyfin and Emby for your own preference. I will mainly talk about how to get subtitles to work in Plex and there are two approaches for me:\nSub-Zero Subtitles - which enables us to search the subtiles in opensubtitles.org ChineseSubFinder - which will detect the contents and auto download the subtitles Sub-zero is working great if you need more than Chinese subtitles but I found it difficult to get matched for some new and less populare shows. Then I find ChinesSubFinder which is open-source project and work like a charm for me.\nBoth are easy to set up and there are a lot of tutorials just one google away. So I will not spend more time on that. Insetad I wanna point out the key for Plex to auto load the subtitles is using XBMCnfoTVImporter and XBMCnfoMoviesImporter as the proxy which could installed via WebTools (see Git).\nFor example, in my Movies library, I set up the scanner as Plex Movie Scanner and the Proxy is XBMCnfoMoviesImporter as below: Hence we need refresh the library so these gears could work.\nConclusion So far it is working very great to me and I don\u0026rsquo;t have to search these subtitles anymore. Please leave comments if you have any questions.\n","permalink":"/posts/2023/build-a-home-media-server/","summary":"\u003ch2 id=\"intro\"\u003eIntro\u003c/h2\u003e\n\u003cp\u003eIn \u003ca href=\"https://ihelio.today/archives/howtoroutetransmissiontovpncontainer\"\u003eRoute transmission to VPN container\u003c/a\u003e, I talked about how to download contents via VPN tunnel so we can get rid of some troubles. But that is far from enough for us to build a home media server which should work as Netflix and Hulu to us. We shouldn\u0026rsquo;t bother with the torrent and subtitle search. Once we add a show to our watch list, everything should be set up automatically. I will introduce the tools and necessary setup for me to build a home media server in the following sections.\u003c/p\u003e","title":"Build a home media server but automated"},{"content":"Recently I changed my ISP to ATT to try their fiber, and they gave me the bgw320 as the gateway for the Internet service. And I have trouble connecting to my Synology\u0026rsquo;s services like Jellyfin.\nI suspect it has some conflicts with the network of these docker services running in Synology or the internet setup of Synology. Considering the configuration of docker network could be another rabbit hole, I didn\u0026rsquo;t go that route. I decided to connect the gateway with my own router and use the passthrough function in the gateway so I can do the port forwarding in my router.\nTo make it work, I also need to reset the internet connection in my Synology which somehow is not accessible after I made this change. Since I am not very good at network, I don\u0026rsquo;t know what I did wrong, but I am glad reset just made it work.\nTo wrap up what I did to make it work:\nConnect a router to the bgw320 as passthrough Reset the network setting In my case, my subnet changes to 10.0.0.0 from 192.168.0.0 which might be the reason I have to reset the network in Synology All the docker services are running at the new IP with the same port afterwards ","permalink":"/posts/2023/expose-nas-services-with-att-gateway/","summary":"\u003cp\u003eRecently I changed my ISP to ATT to try their fiber, and they gave me the bgw320 as the gateway for the Internet service. And I have trouble connecting to my Synology\u0026rsquo;s services like Jellyfin.\u003c/p\u003e\n\u003cp\u003eI suspect it has some conflicts with the network of these docker services running in Synology or the internet setup of Synology. Considering the configuration of docker network could be another rabbit hole, I didn\u0026rsquo;t go that route. I decided to connect the gateway with my own router and use the passthrough function in the gateway so I can do the port forwarding in my router.\u003c/p\u003e","title":"Expose NAS Services with Att Gateway"},{"content":"Overview FLP impossibility is to prove there is no algorithm can really achieve totally correct consensus in asychronous system under assumption at most one process is faulty. The paper is very famous and also difficult to understand given the wording. This article is to explain FLP impossibility in a plain way.\nAschronous System In FLP paper, there are some settings/assumptions made to describe an aschronous system which is used in the proof. This system has:\nConsensue Protocal which containsN processes with initial value 0 or 1 Total correctness at most one process is faulty all values are eventually delivered to non-faulty process always reach a decision in all runs Partial correctness No configuration reachable from an initial configuration has more than one decision value For $v \\in {0,1}$, some configuration reachable from an initial configuration has decision value $v$ A mesage buffer which can be seen as a global \u0026ldquo;key-value store\u0026rdquo; (a multiset supporting the duplicate write of the same key) Suppose we have a process p, there are two functions p could use send(p, m) - save the pair of p and m to the message buffer receive(p) - get the value of p from the message buffer but this is non-deterministic as the message buffer could return null value even the entry\u0026lt;p, m\u0026gt; exists - this is to simulate the aschronous system could suffer from network partition or fail-stop We could call receive(p) infinitely to eventually get the message $m$ delivered though with some delay Configuration is the essentially the state of this system which is comprised of all processes with initial value and the message buffer in the system To change the configuration a.k.a. state we need receive(p) thus some processors could receive new values - this is also called step/event in FLP paper stating a process $p$ received a message $m$ A infinite sequence of steps/events are called run/schedule which defined a particular execution for a configuration Note: The FLP paper use run and schedule in different places but I think they are actually interchangeble thus I will use step and run in the following content. A configuration is decisive if there is only one reachable state from it, otherwise we call this configuration indecisive given it could have decisions either 0 or 1 There are two more definitions about run Admission run: at most one process is faulty and all messages could still be delivered to non-faulty processes Deciding run: some processes in the run eventually make decisions Non-faulty process could take infinitely many steps in a run and otherwise is considered faulty - the faulty process will only take finite steps since it ceases to process When every admission run is deciding run, the consencus protocal is totally correct To ensure the consencus, we need assure TAV a.k.a consensus after every possible execution:\nTermination: All non-fauty processes eventually decide on a value Agreement: All deciding processes make the same decision Validity: The decision must be propsoed by some processes Proof In this section, I prefer to use the word decisive and indecisive to indicate the state of configuration instead of univalent and bivalent used in the FLP paper.\nLemma 1 Suppose there are two disjoint runs, r1 and r2, and an initial configuration C0, the reachable configuration C1 resulted from C0 -\u0026gt; r1 -\u0026gt; r2 is the same as the configuration C2 resulted from C0 -\u0026gt; r2 -\u0026gt; r1. This lemma is obvious based on the system definition. And this is mainly used to prove lemma 3.\nLemma 2 The initial configuration in the consencus protocal has indecisive value The paper make a assumption that the initial configuration should not have indecisive value and find a contradication:\nSay we have $N$ processes, we could have $2^N$ configurations and they could have 0 and 1 as their decisive value Then we make a chain of them and make sure the adjacent configurations differ with each other at most 1 like below $\\dots,C_0,C_0,C_1,C_1,\\dots$ Thus the only possible cause is the initial value of some process in $C_1$ or $C_0$ and according to the definition of admissible run that particualr process, say $p$, could crash With the help of admissible deciding run, we could crash $p$ thus it will not be part of the system and we could have the identical run for $C_1$ and $C_0$ to eventuall get the same decision value However, this would contradict the assumption because $C_0$ would be indecisive if the final decision value is 1 and otherwise $C_1$ would be indecisive if the final decision value is 0. It is important to note that we call the configuration indecisive when the decision value reachable from them is indecisive - could be 0 or 1. In this proof, it is exactly what we observe as the crash of $p$ affects the decision value of the initial configuration which in turn makes them indecisive. Lemma 3 The indecisive configuration will lead to indecisive configuration To prove lemma 3, we assume the indecisive configuration will not lead to indecisive configuration. And we need have some assumptions:\n$C$ is the initial configuration which is indecisive Suppose we have a step $s$, $M$ contains all configurations reachable from $C$ without taking step $s$ and $N$ contains all configurations reachable from $C$ with take step $s$. If configuration $E0$ is in $M$ and we assume configuration $F0$ is rechable from $E0$ by applying step $s$. And $F0$ is in $N$. If $E0$ is not in M and we assume $E0$ is reachable from $F0$ with some steps ($E0$ and $F0$ indicates their decisive value is 0).\nBascially we are clarifying that all configuration reachable from $C$ could have one and only one decisive value which should be 0 here since $C$ is assumed to have 0 in this case. Similarly we could conclude that $C$ could lead to configuration whose decisive value is 1 if $C$ is 1. That being said, we could have configurations with either 0 or 1 in $M$ and $N$, but no configuration should be indecisive in the two sets.\nThen we could continue our proof which is the most important part in the FLP paper. Given we know there are two possible configuration differ with each other at 1 value, let\u0026rsquo;s call them configuration $D0$ and $D1$ (each with decisive value 0 and 1). We know there is one step $s\u0026rsquo;$ with process $p$ causing the difference between $D0$ and $D1$. And we assume there is another step $s\u0026rsquo;\u0026rsquo;$ with process $p\u0026rsquo;\u0026rsquo;$ (the message in these steps are different) .\nWhen $p\\neq p\u0026rsquo;\u0026rsquo;$, we know $D0$ could move to $D1$ by applying step $s\u0026rsquo;$ and further move to $E1$ by applying step $s\u0026rsquo;\u0026rsquo;$ . Because $s\u0026rsquo; \\neq s\u0026rsquo;\u0026rsquo;$ (different process or different message or both), we know $D1$ won\u0026rsquo;t go to $E0$. Hence we know $D0$ will go to $E0$ by just applying step $s\u0026rsquo;\u0026rsquo;$. However, after we apply step $s\u0026rsquo;$ to $E0$, $E0$ should go to $E1$ according to lemma 1, which contradicts our assumption as some configuration become indecisive by just changing the order of steps. When $p=p\u0026rsquo;\u0026rsquo;$, this process could crash and take no steps given we are allowing one faulty process and therefore we have a run $R$ without $p$. Then we could have 3 possibilities: $D0$ goest to configuration $A$ by applying the run $R$ $D0$ goes to $D1$ with step $s\u0026rsquo;$, and goes to $E1$ with step $s\u0026rsquo;\u0026rsquo;$, and goes to $F1$ with run $R$ The decisive value in this path stays as 1 Note: step $s\u0026rsquo;$ still differ with $s\u0026rsquo;\u0026rsquo;$ because they refer to different messages $D0$ goes to $E0$ with step $s\u0026rsquo;\u0026rsquo;$ and goes to $F0$ with run $R$ The decisive value in this path stays as 0 And given messages could be delayed by not complete lost, we could still: take step $s\u0026rsquo;$ at configuration $A$ to move to $F0$ or take step $s\u0026rsquo;$ and step $s\u0026rsquo;\u0026rsquo;$ at configuration $A$ to move to $F1$ This contradicts the assumption as A is indecive now since it can reach both 0 and 1. Conclusion The FLP is proving the impossibility of totally correct concensus in a weak form of asynchronous system and let alone a stronger form of asyhchronous system. But this paper also indicates the research direction to resolve distributed concensus probelm like:\nrelaxing the restrictions like using leader election which makes a weaker form of asynchronous system but provide optimal concensus using timeout to make sure the no process could infinitely try to get messages using failure detectors to inform the system failures and take corresponding actions References Fischer, M. J., Lynch, N. A., \u0026amp; Paterson, M. S. (1985). Impossibility of distributed consensus with one faulty process.¬†Journal of the ACM (JACM),¬†32(2), 374-382. A Brief Tour of FLP Impossibility John Feminella on Impossibility of Distributed Consensus with One Faulty Process ","permalink":"/posts/2023/flp-impossibility-in-plain-language/","summary":"\u003ch2 id=\"overview\"\u003eOverview\u003c/h2\u003e\n\u003cp\u003eFLP impossibility is to prove there is no algorithm can really achieve totally correct consensus in asychronous system under assumption at most one process is faulty. The paper is very famous and also difficult to understand given the wording. This article is to explain FLP impossibility in a plain way.\u003c/p\u003e\n\u003ch2 id=\"aschronous-system\"\u003eAschronous System\u003c/h2\u003e\n\u003cp\u003eIn FLP paper, there are some settings/assumptions made to describe an aschronous system which is used in the proof. This system has:\u003c/p\u003e","title":"FLP impossibility in plain language"},{"content":"What is gRPC gRPC is a high performance open-source freature-rich RPC (remote procedure calls) framework developed by google. ‚Äúg‚Äù stands for many different meaning like green, good and etc.\nIt is a protocal that allows a program to\nexecute a procedure of another program located in other computer without the developer explicitly coding the details for the remote interaction gRPC is one kind of s2s call and widely used to replace REST API in the backend due to:\nless usage of bandwidth since all data are serialized support different languages easy to focus on the core logic and gRPC will handle all the boiler-plate code for us gRPC is defining the next-gen of microservices structure with http2. In other words, gRPC is providing the same functions of HTTP2: Thus gRPC outperforms REST in many cases: How gRPC works client has a generated stub that provides the same methods as the server the stub calls gRPC framework under the hood to exchange information over the network since client and server use stubs to interact with each other, so they only need to implement their core service logic How Stubs work gRPC will be transferred between server and client via Stubs. Stubs are generated via proto buffers and then we could implement the core logic through the stubs. This we need the proto buffer compiler (aka. protoc) and gRPC plugin for corresponding langague to generate the boiler-plate.\nUsing proto buffer provides:\nhuman readable interface strongly typed contract efficient data serialization one size fits all - all other languages can be generated from the same proto compatibility Types of gRPC gRPC now is support 4 kinds of communication between server and client:\nunary - like REST call, each request will return an response. streaming client streaming - client is sending multiple requests within one call server streaming - sever is sending multiple responses within one call bidrectional streaming - server and client are sending multiple requests and responses to each other within one call We will build a simple book service to implement the 4 kinds of gRPC:\nUnary -\u0026gt; CreateBook Service ClientStreaming -\u0026gt; UploadImage Service ServerStreaming -\u0026gt; RecommendBook Service Bidirectional Streaming -\u0026gt; RateBook Service ","permalink":"/posts/2023/grpc-tutorial---1/","summary":"\u003ch1 id=\"what-is-grpc\"\u003eWhat is gRPC\u003c/h1\u003e\n\u003cp\u003egRPC is a high performance open-source freature-rich RPC (remote procedure calls) framework developed by google. ‚Äúg‚Äù stands for many different meaning like green, good and etc.\u003c/p\u003e\n\u003cp\u003eIt is a protocal that allows a program to\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eexecute a procedure of another program located in other computer\u003c/li\u003e\n\u003cli\u003ewithout the developer explicitly coding the details for the remote interaction\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003egRPC is one kind of s2s call and widely used to replace REST API in the backend due to:\u003c/p\u003e","title":"gRPC tutorial - 1: Overview"},{"content":"Environment Setup I am using Gradle and Intellij Idea for this project (Maven setting can be found here). The Gradle setting is shown as following:\nplugins { id \u0026#34;com.google.protobuf\u0026#34; version \u0026#34;0.8.18\u0026#34; id \u0026#34;java\u0026#34; } group \u0026#39;today.ihelio.grpc.tutorial\u0026#39; version \u0026#39;1.0-SNAPSHOT\u0026#39; sourceCompatibility = 15 repositories { mavenCentral() } dependencies { implementation \u0026#39;junit:junit:4.13.1\u0026#39; testImplementation \u0026#39;org.junit.jupiter:junit-jupiter-api:5.8.1\u0026#39; testRuntimeOnly \u0026#39;org.junit.jupiter:junit-jupiter-engine:5.8.1\u0026#39; implementation group: \u0026#39;com.google.protobuf\u0026#39;, name: \u0026#39;protobuf-java\u0026#39;, version: \u0026#39;3.21.4\u0026#39; runtimeOnly group: \u0026#39;com.google.protobuf\u0026#39;, name: \u0026#39;protobuf-java-util\u0026#39;, version: \u0026#39;3.21.4\u0026#39; implementation group: \u0026#39;io.grpc\u0026#39;, name: \u0026#39;grpc-all\u0026#39;, version: \u0026#39;1.45.1\u0026#39; runtimeOnly group: \u0026#39;io.grpc\u0026#39;, name: \u0026#39;grpc-services\u0026#39;, version: \u0026#39;1.48.0\u0026#39; implementation group: \u0026#39;javax.annotation\u0026#39;, name: \u0026#39;javax.annotation-api\u0026#39;, version: \u0026#39;1.3.2\u0026#39; } test { useJUnitPlatform() } sourceSets { main { java { srcDirs \u0026#39;build/generated/source/proto/main/grpc\u0026#39; srcDirs \u0026#39;build/generated/source/proto/main/java\u0026#39; srcDirs \u0026#39;src/main/resources\u0026#39; } } } protobuf { protoc { artifact = \u0026#39;com.google.protobuf:protoc:3.21.4\u0026#39; } plugins { grpc { artifact = \u0026#39;io.grpc:protoc-gen-grpc-java:1.49.0\u0026#39; } } generateProtoTasks { all()*.plugins { grpc {} } } } jar { from { configurations.runtimeClasspath.findAll { duplicatesStrategy = DuplicatesStrategy.EXCLUDE it.name.endsWith(\u0026#34;.jar\u0026#34;) }.collect { println \u0026#39;add \u0026#39; + it.name zipTree(it) } } } targetCompatibility = JavaVersion.VERSION_15 After we have the proto files, then we could just build the project to complie proto files and generate essential stubs.\nAnd to test the service we created, we need a helper function to generate books for us.\npackage today.ihelio.sample; import today.ihelio.grpc.Book; import today.ihelio.grpc.Image; import today.ihelio.grpc.Sample; import java.util.*; import static com.google.protobuf.util.Timestamps.fromMillis; import static java.lang.System.currentTimeMillis; /** * @author helio * @date 2022/9/3 * @package today.ihelio.sample */public class Generator { String[] genreList = new String[]{ \u0026#34;FICTION\u0026#34;, \u0026#34;MYSTERY\u0026#34;, \u0026#34;THRILLER\u0026#34;, \u0026#34;HORROR\u0026#34;, \u0026#34;HISTORICAL\u0026#34;, \u0026#34;ROMANCE\u0026#34;, \u0026#34;SCI_FICTION\u0026#34;, }; private final Random rand; public Generator() { rand = new Random(); } private String generateRandomWords(int lengthofWords) { Random rand = new Random(); StringBuilder sb = new StringBuilder(); Random random = new Random(); // words of length 3 through 10. (1 and 2 letter words are boring.) for(int j = 0; j \u0026lt; lengthofWords; j++) { sb.append((char)(\u0026#39;a\u0026#39; + random.nextInt(26))); if (rand.nextInt(10) == 1) { sb.append(\u0026#34; \u0026#34;); } } return sb.toString(); } public String randomAuthor() { return generateRandomWords(10); } public String randomName() { return generateRandomWords(20); } public String randomPublication() { return generateRandomWords(8); } public Sample randomSample() { return Sample.newBuilder() .setParagraph( generateRandomWords(new Random().nextInt(20, 30)) ).build(); } public Image getImage(String filepath) { return Image.newBuilder() .setId(UUID.nameUUIDFromBytes(filepath.getBytes()).toString()) .setFilePath(filepath) .setUploadedAt(fromMillis(currentTimeMillis())) .build(); } public Book.Genre randomGenre() { String genre = genreList[rand.nextInt(genreList.length)]; if (\u0026#34;FICTION\u0026#34;.equals(genre)) { return Book.Genre.FICTION; } else if (\u0026#34;MYSETRY\u0026#34;.equals(genre)) { return Book.Genre.MYSTERY; } else if (\u0026#34;THRILLER\u0026#34;.equals(genre)) { return Book.Genre.THRILLER; } else if (\u0026#34;HORROR\u0026#34;.equals(genre)) { return Book.Genre.HORROR; } else if (\u0026#34;HISTORICAL\u0026#34;.equals(genre)) { return Book.Genre.HISTORICAL; } else if (\u0026#34;ROMANCE\u0026#34;.equals(genre)) { return Book.Genre.ROMANCE; } else if (\u0026#34;SCI_FICTION\u0026#34;.equals(genre)) { return Book.Genre.SCI_FICTION; } else { return Book.Genre.UNKNOWN; } } public Book createRandomBook() { String bookName = randomName(); return Book.newBuilder() .setId(UUID.nameUUIDFromBytes(bookName.getBytes()).toString()) .setName(bookName) .setAuthor(randomAuthor()) .setPrice(rand.nextInt(1, 300)) .setPublication(randomPublication()) .setPublishYear(rand.nextInt(1990, 2023)) .addSample(randomSample()) .addSample(randomSample()) .addImage(getImage(\u0026#34;src/main/resources/images_source/img1.png\u0026#34;)) .addImage(getImage(\u0026#34;src/main/resources/images_source/img2.png\u0026#34;)) .addImage(getImage(\u0026#34;src/main/resources/images_source/img3.png\u0026#34;)) .addGenre(randomGenre()) .addGenre(randomGenre()) .addGenre(randomGenre()) .setPopularity(rand.nextInt(100)) .build(); }} This would generate book with random fields and we could use it to create book in our service.\n","permalink":"/posts/2023/grpc-tutorial---2/","summary":"\u003ch1 id=\"environment-setup\"\u003eEnvironment Setup\u003c/h1\u003e\n\u003cp\u003eI am using Gradle and Intellij Idea for this project (Maven setting can be found \u003ca href=\"https://vsbogd.github.io/coding/using-grpc-in-java-maven-project.html\"\u003ehere\u003c/a\u003e). The Gradle setting is shown as following:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eplugins\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;com.google.protobuf\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eversion\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;0.8.18\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;java\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003egroup\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"n\"\u003etoday\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eihelio\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egrpc\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003etutorial\u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eversion\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eSNAPSHOT\u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003esourceCompatibility\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e15\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003erepositories\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003emavenCentral\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003edependencies\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eimplementation\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"n\"\u003ejunit\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003ejunit\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003e13\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003e1\u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003etestImplementation\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"n\"\u003eorg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ejunit\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ejupiter\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003ejunit\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003ejupiter\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eapi\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003e1\u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003etestRuntimeOnly\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"n\"\u003eorg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ejunit\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ejupiter\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003ejunit\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003ejupiter\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eengine\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003e1\u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eimplementation\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003egroup\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"n\"\u003ecom\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egoogle\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eprotobuf\u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"n\"\u003eprotobuf\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003ejava\u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eversion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"n\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003e21\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003e4\u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eruntimeOnly\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003egroup\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"n\"\u003ecom\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egoogle\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eprotobuf\u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"n\"\u003eprotobuf\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003ejava\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eutil\u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eversion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"n\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003e21\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003e4\u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eimplementation\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003egroup\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"n\"\u003eio\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egrpc\u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"n\"\u003egrpc\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eall\u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eversion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003e45\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003e1\u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eruntimeOnly\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003egroup\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"n\"\u003eio\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egrpc\u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"n\"\u003egrpc\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eservices\u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eversion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003e48\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003e0\u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eimplementation\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003egroup\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"n\"\u003ejavax\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eannotation\u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"n\"\u003ejavax\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eannotation\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eapi\u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eversion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003e2\u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003etest\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003euseJUnitPlatform\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003esourceSets\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003ejava\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003esrcDirs\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"n\"\u003ebuild\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"n\"\u003egenerated\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"n\"\u003esource\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"n\"\u003eproto\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"n\"\u003egrpc\u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003esrcDirs\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"n\"\u003ebuild\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"n\"\u003egenerated\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"n\"\u003esource\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"n\"\u003eproto\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"n\"\u003ejava\u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003esrcDirs\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"n\"\u003esrc\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"n\"\u003eresources\u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eprotobuf\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eprotoc\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eartifact\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"n\"\u003ecom\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egoogle\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eprotobuf\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003eprotoc\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003e21\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003e4\u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eplugins\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003egrpc\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003eartifact\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"n\"\u003eio\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egrpc\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003eprotoc\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003egen\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003egrpc\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003ejava\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003e49\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003e0\u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003egenerateProtoTasks\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eall\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eplugins\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003egrpc\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{}\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003ejar\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003efrom\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003econfigurations\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eruntimeClasspath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003efindAll\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003eduplicatesStrategy\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eDuplicatesStrategy\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eEXCLUDE\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003eit\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eendsWith\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;.jar\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e}.\u003c/span\u003e\u003cspan class=\"na\"\u003ecollect\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003eprintln\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"n\"\u003eadd\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eit\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"nf\"\u003ezipTree\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003etargetCompatibility\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eJavaVersion\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eVERSION_15\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAfter we have the proto files, then we could just build the project to complie proto files and generate essential stubs.\u003c/p\u003e","title":"gRPC tutorial - 2: Enviroment Setup"},{"content":"Unary call is very simple to understand, it is essentially a normal REST API call. Each request will get a single response from the server.\nIn this project, we implement unary call to create books in our store.\nFirst, we need create book_message.proto which is a book pojo carrying the related info of book. Simply speaking, each message is pojo we are gonna use in our service.\nsyntax = \u0026#34;proto3\u0026#34;; package book; option java_multiple_files = true; option java_package = \u0026#34;today.ihelio.grpc\u0026#34;; import \u0026#34;sample_message.proto\u0026#34;; import \u0026#34;image_message.proto\u0026#34;; message Book { enum Genre { UNKNOWN = 0; FICTION = 1; MYSTERY = 2; THRILLER = 3; HORROR = 4; HISTORICAL = 5; ROMANCE = 6; SCI_FICTION = 7; } string id = 1; string name = 2; string author = 3; uint32 publish_year = 4; double price = 5; string publication = 6; uint32 rating = 7; uint32 rating_count = 8; double avg_rating = 9; repeated Sample sample = 10; repeated Image image = 11; repeated Genre genre = 12; optional uint32 popularity = 13; } To implement a message, we need speficy:\ntype - like string, uint32, double, enum and even other kind of message variable name filed number - unique number used to identify the fields i the message binary format (see google developer guide for more details) field rule - required, optional and repeated (see google developer guide for more details) Next, we need build our service proto which will generate the necessary files for us including stub class.\nsyntax = \u0026#34;proto3\u0026#34;; package book; option java_multiple_files = true; option java_package = \u0026#34;today.ihelio.grpc\u0026#34;; import \u0026#34;book_message.proto\u0026#34;; message CreateBookRequest { Book book = 1; } message CreateBookResponse { string id = 1; } service BookService { rpc CreateBook(CreateBookRequest) returns (CreateBookResponse) {}; } In above proto, we define a service to create a book in our data store and normally we need an request message, an response message and a service containing the method of CreateBook. Since it is a unary call, then we just return a CreateBookResponse and passing a CreateBookRequest.\nAfter we build the proto files, we should be to find the generated java files in build/generated/source/proto/main.\nThen we should go ahead creating corresponding methods in our project:\nBookServer - handle the request and return the response BookClient - send the request and handle the response BookService - implement the actual logic in our server InMemoryBookStore - save the records of books For the simplicity, I created an InMemoryBookStore to store all book records we created in the client but using a database like MySQL in practise is better.\nAs I described above, the core logic we should focus on is BookService since BookServer and BookClient simply inherited from the boilerplate generated by proto files created previsouly.\nSo we should start with creating a method CreateBook in the BookService.\npackage today.ihelio.learngrpc; import com.google.protobuf.ByteString; import io.grpc.Context; import io.grpc.Status; import io.grpc.stub.StreamObserver; import today.ihelio.grpc.*; import java.io.ByteArrayOutputStream; import java.io.IOException; import java.util.UUID; import java.util.logging.Logger; import static java.util.logging.Level.SEVERE; /** * @author helio * @date 2022/9/3 * @package today.ihelio.learngrpc */public class BookService extends BookServiceGrpc.BookServiceImplBase { private static final Logger logger = Logger.getLogger(BookService.class.getName()); private BookStore bookStore; public BookService(BookStore bookStore) { this.bookStore = bookStore; } @Override public void createBook(CreateBookRequest request, StreamObserver\u0026lt;CreateBookResponse\u0026gt; responseObserver) { Book book = request.getBook(); String id = book.getId(); logger.info(\u0026#34;Received request to create a new book with ID: \u0026#34; + id); UUID uuid; if (id.isEmpty()) { uuid = UUID.randomUUID(); } else { try { uuid = UUID.fromString(id); } catch (IllegalArgumentException e) { responseObserver.onError( Status.INVALID_ARGUMENT .withDescription(e.getMessage()) .asRuntimeException() ); return; } } if (Context.current().isCancelled()) { logger.info(\u0026#34;request is cancelled\u0026#34;); responseObserver.onError( Status.CANCELLED .withDescription(\u0026#34;request is cancelled\u0026#34;) .asRuntimeException()); } Book copy = book.toBuilder().setId(uuid.toString()).build(); try { bookStore.createBook(copy); } catch (AlreadyExistsException e) { responseObserver.onError( Status.ALREADY_EXISTS .withDescription(e.getMessage()) .asRuntimeException() ); } CreateBookResponse response = CreateBookResponse.newBuilder().setId(copy.getId()).build(); responseObserver.onNext(response); responseObserver.onCompleted(); logger.info(String.format(\u0026#34;book %s created\u0026#34;, copy.getName())); }} Then we know we also need a BookStore to save the book into our data store:\npackage today.ihelio.learngrpc; import io.grpc.Context; import io.grpc.Status; import io.grpc.xds.shaded.io.envoyproxy.envoy.config.accesslog.v3.GrpcStatusFilter; import org.checkerframework.checker.units.qual.C; import today.ihelio.grpc.Book; import java.util.Map; import java.util.concurrent.ConcurrentHashMap; import java.util.concurrent.ConcurrentMap; import java.util.concurrent.TimeUnit; import java.util.logging.Logger; import static io.grpc.Status.NOT_FOUND; /** * @author helio * @date 2022/9/3 * @package today.ihelio.learngrpc */public class InMemoryBookStore implements BookStore{ private final Logger logger = Logger.getLogger(InMemoryBookStore.class.getName()); ConcurrentMap\u0026lt;String, Book\u0026gt; inMemoryBookStore; public InMemoryBookStore() { this.inMemoryBookStore = new ConcurrentHashMap\u0026lt;\u0026gt;(); } @Override public void createBook(Book book) { if (inMemoryBookStore.containsKey(book.getId())) { throw new AlreadyExistsException(\u0026#34;book already exists\u0026#34;); } else { inMemoryBookStore.put(book.getId(), book); } }} Lastly, we need a Client and a Server. Client will need a channel and a stub:\nchannel - used to connect with server given the address and port stub - gRPC is still client/server mode so we have server and client in gRPC as well. However, client is called as stub in gRPC. package today.ihelio.learngrpc; import com.google.common.util.concurrent.RateLimiter; import com.google.protobuf.ByteString; import io.grpc.ManagedChannel; import io.grpc.ManagedChannelBuilder; import io.grpc.Status; import io.grpc.StatusRuntimeException; import io.grpc.stub.StreamObserver; import today.ihelio.grpc.*; import today.ihelio.sample.Generator; import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.IOException; import java.util.Iterator; import java.util.Random; import java.util.concurrent.CountDownLatch; import java.util.concurrent.TimeUnit; import java.util.logging.Level; import java.util.logging.Logger; import static java.util.concurrent.TimeUnit.SECONDS; import static java.util.logging.Level.SEVERE; /** * @author helio * @date 2022/9/3 * @package today.ihelio.learngrpc */public class BookClient { private static final Logger logger = Logger.getLogger(BookClient.class.getName()); private final ManagedChannel channel; private final BookServiceGrpc.BookServiceBlockingStub blockingStub; private static final Random rand = new Random(); public BookClient(String host, int port) { channel = ManagedChannelBuilder.forAddress(host, port).usePlaintext().build(); blockingStub = BookServiceGrpc.newBlockingStub(channel); } public void shutdown() throws InterruptedException { channel.shutdown().awaitTermination(5, SECONDS); } public void createBook(Book book) throws InterruptedException { CreateBookRequest request = CreateBookRequest.newBuilder().setBook(book).build(); CreateBookResponse response = CreateBookResponse.getDefaultInstance(); try { response = blockingStub.withDeadlineAfter(5, SECONDS).createBook(request); } catch (StatusRuntimeException e) { if (e.getStatus().getCode() == Status.Code.ALREADY_EXISTS) { logger.info(\u0026#34;Book already exists\u0026#34;); return; } } catch (Exception e) { logger.log(SEVERE, \u0026#34;request failed \u0026#34; + e.getMessage()); } logger.info(\u0026#34;New book created: \\n\u0026#34; + response.getId()); } As for server, we need create a gRPC server object which will listen on given address and port. Here we only need pass in BookService as the core component to implement the business logic and there is no need to create another CreateBook. That tremendously simply our work on server side. But why?\nThe answer is simple - It is gRPC. When we created these Java files from protos, the service we created already generate the createBook method in BookServiceGrpc.java where we can find all services we want to implement. And we already have a BookService which implements createBook, thus we just need simply pass the service object to the server which is exactly the following line:\nthis.server = serverBuilder.addService(bookService) .addService(ProtoReflectionService.newInstance()) .build(); Thus, the server will wait at the port and it will automatically call createBook from BookService once it captures the createBookRequest.\nConclusively, it is like we can call createBook - which implemented in BookService and invoked in server side - directly from client side. This is essentially why gRPC supports differenet language even client in Python and server in Java.\npackage today.ihelio.learngrpc; import io.grpc.Server; import io.grpc.ServerBuilder; import io.grpc.protobuf.services.ProtoReflectionService; import java.io.IOException; import java.util.concurrent.TimeUnit; import java.util.logging.Logger; /** * @author helio * @date 2022/9/3 * @package today.ihelio.learngrpc */public class BookServer { private final Logger logger = Logger.getLogger(BookServer.class.getName()); private BookService bookService; private final int port; private final Server server; public BookServer(int port, BookStore bookStore, ImageStore imageStore) { this(ServerBuilder.forPort(port), port, bookStore, imageStore); } public BookServer(ServerBuilder serverBuilder, int port, BookStore bookStore, ImageStore imageStore) { this.port = port; this.bookService = new BookService(bookStore, imageStore); this.server = serverBuilder.addService(bookService) .addService(ProtoReflectionService.newInstance()) .build(); } public void start() throws IOException { server.start(); logger.info(\u0026#34;Book server started on port \u0026#34; + port); Runtime.getRuntime().addShutdownHook(new Thread(){ @Override public void run() { System.err.println(\u0026#34;shutdown gRPC server because JVM shuts down\u0026#34;); try { BookServer.this.stop(); } catch (InterruptedException e) { e.printStackTrace(); } System.err.println(\u0026#34;server shutdown\u0026#34;); } }); } public void stop() throws InterruptedException{ if (server != null) { server.shutdown().awaitTermination(30, TimeUnit.SECONDS); } } private void blockUntilShutdown() throws InterruptedException { if (server != null) { server.awaitTermination(); } } public static void main(String[] args) throws IOException, InterruptedException{ InMemoryBookStore inMemoryBookStore = new InMemoryBookStore(); BookServer server = new BookServer(9080, inMemoryBookStore); server.start(); server.blockUntilShutdown(); } } This is how we implement unary call and we will get into client streaming in next chapter.\nThe complete project can be found at here.\n","permalink":"/posts/2023/grpc-tutorial---3/","summary":"\u003cp\u003eUnary call is very simple to understand, it is essentially a normal REST API call. Each request will get a single response from the server.\u003c/p\u003e\n\u003cp\u003eIn this project, we implement unary call to create books in our store.\u003c/p\u003e\n\u003cp\u003eFirst, we need create \u003ccode\u003ebook_message.proto\u003c/code\u003e which is a book pojo carrying the related info of book. Simply speaking, each message is pojo we are gonna use in our service.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-proto\" data-lang=\"proto\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003esyntax\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;proto3\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nn\"\u003ebook\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eoption\u003c/span\u003e \u003cspan class=\"n\"\u003ejava_multiple_files\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eoption\u003c/span\u003e \u003cspan class=\"n\"\u003ejava_package\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;today.ihelio.grpc\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;sample_message.proto\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;image_message.proto\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003emessage\u003c/span\u003e \u003cspan class=\"nc\"\u003eBook\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"kd\"\u003eenum\u003c/span\u003e \u003cspan class=\"n\"\u003eGenre\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eUNKNOWN\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eFICTION\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eMYSTERY\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eTHRILLER\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eHORROR\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eHISTORICAL\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eROMANCE\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eSCI_FICTION\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e  \u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003eid\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003eauthor\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"kt\"\u003euint32\u003c/span\u003e \u003cspan class=\"n\"\u003epublish_year\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003eprice\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003epublication\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"kt\"\u003euint32\u003c/span\u003e \u003cspan class=\"n\"\u003erating\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"kt\"\u003euint32\u003c/span\u003e \u003cspan class=\"n\"\u003erating_count\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003eavg_rating\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"k\"\u003erepeated\u003c/span\u003e \u003cspan class=\"n\"\u003eSample\u003c/span\u003e \u003cspan class=\"n\"\u003esample\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"k\"\u003erepeated\u003c/span\u003e \u003cspan class=\"n\"\u003eImage\u003c/span\u003e \u003cspan class=\"n\"\u003eimage\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"k\"\u003erepeated\u003c/span\u003e \u003cspan class=\"n\"\u003eGenre\u003c/span\u003e \u003cspan class=\"n\"\u003egenre\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"k\"\u003eoptional\u003c/span\u003e \u003cspan class=\"kt\"\u003euint32\u003c/span\u003e \u003cspan class=\"n\"\u003epopularity\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e13\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eTo implement a message, we need speficy:\u003c/p\u003e","title":"gRPC tutorial - 3: Unary Call"},{"content":"We will implement a function to upload image when we create the books like the cover and something else. And we would split the image into chunks and we upload them chunk by chunk until all data are transfered. As we defined earlier in the proto, we could have multiple images for one book. So we will need a function called uploadImage and uploade all images one by one.\nLet\u0026rsquo;s start with the proto of image:\nsyntax = \u0026#34;proto3\u0026#34;; package book; option java_multiple_files = true; option java_package = \u0026#34;today.ihelio.grpc\u0026#34;; import \u0026#34;google/protobuf/timestamp.proto\u0026#34;; message Image { string id = 1; string file_path = 2; string size = 3; google.protobuf.Timestamp uploaded_at = 4; } We create an Image message which has four fields: image id, file path in local, size and timestamp. This will be used on server side to contain the image info when it receives an image from client.\nThen we need define our request and response for client.\nmessage UploadImageRequest { oneof data { ImageInfo info = 1; bytes chunk_data = 2; } } message ImageInfo { string book_id = 1; string image_type = 2; string file_name = 3; } message UploadImageResponse { string id = 1; uint32 size = 2; string file_path = 3; } We define an ImageInfo message which will contain book_id it associates with, image type and name. Thus the UploadImageRequest would upload the info to the server in addition to the image itself. Then the UploadImageResponse would return the server-generated id, size and file path at server.\nThus the BookService now is:\nservice BookService { rpc CreateBook(CreateBookRequest) returns (CreateBookResponse) {}; rpc UploadImage(stream UploadImageRequest) returns (UploadImageResponse) {}; } Now we should turn to the implmentation of UploadImage in server, client and service. Since we already have them, we will now build upon them.\nBookService always comes the first since it is our core logic. With core logic built up, it is easy to implement server and client for it. And it is easy to add new feature to BookService given we just need use the auto code generation function in Intellij and insert the Override Method which is uploadImage in this case.\n@Override public StreamObserver\u0026lt;UploadImageRequest\u0026gt; uploadImage(StreamObserver\u0026lt;UploadImageResponse\u0026gt; responseObserver) { return new StreamObserver\u0026lt;UploadImageRequest\u0026gt;() { private String bookID; private ImageInfo info; private ByteArrayOutputStream imageData; @Override public void onNext(UploadImageRequest request) { if (request.getDataCase() == UploadImageRequest.DataCase.INFO) { info = request.getInfo(); logger.info(\u0026#34;receive image info:\\n\u0026#34; + info); bookID = info.getBookId(); imageData = new ByteArrayOutputStream(); Book found = bookStore.findBook(bookID); if (found == null) { responseObserver.onError( Status.NOT_FOUND .withDescription(\u0026#34;Book not found\u0026#34;) .asRuntimeException() ); } return; } ByteString chunkData = request.getChunkData(); if (imageData == null) { logger.info(\u0026#34;image info wasn\u0026#39;t sent before\u0026#34;); responseObserver.onError( Status.INVALID_ARGUMENT .withDescription(\u0026#34;image info wasn\u0026#39;t sent before\u0026#34;) .asRuntimeException() ); return; } try { chunkData.writeTo(imageData); } catch (IOException e) { responseObserver.onError( Status.INTERNAL .withDescription(\u0026#34;cannot write chunk data: \u0026#34; + e.getMessage()) .asRuntimeException()); } } @Override public void onError(Throwable t) { logger.warning(t.getMessage()); } @Override public void onCompleted() { String imageID = \u0026#34;\u0026#34;; int imageSize = imageData.size(); try { imageID = imageStore.Save(bookID, info, imageData); } catch (IOException e) { throw new RuntimeException(e); } UploadImageResponse response = UploadImageResponse.newBuilder() .setId(imageID) .setSize(imageSize) .build(); responseObserver.onNext(response); responseObserver.onCompleted(); } }; } Same as alwasys, the key is to return what we need return which is StreamObserver\u0026lt;UploadImageRequest\u0026gt;, thus we could directly return a new StreamObserver\u0026lt;UploadImageRequest\u0026gt; and put our logic inside the code block.\nAnd there are three function we need fill:\nOnNext: continously handle the next request Create ByteArrayOutputStream to save the image data Check if the upload data type is ImageInfo If yes, we store the image info, otherwise we write the data chunk to ByteArrayOutputStream OnError: Handle the error OnCompleted: Save the image to our image store (we will talk about it later) Send out the response Close the response After we have the logic ready, we then can start client and server implementation.\nThe following snippet is the implmenetation of uploadImage from client:\npublic void uploadImage(String bookID, Image image) throws InterruptedException { final CountDownLatch latch = new CountDownLatch(1); // we use asyncStub instead of blockingStub for streaming connection StreamObserver\u0026lt;UploadImageRequest\u0026gt; requestObserver = asyncStub.withDeadlineAfter(5, SECONDS) .uploadImage(new StreamObserver\u0026lt;UploadImageResponse\u0026gt;() { @Override public void onNext(UploadImageResponse response) { logger.info(\u0026#34;receive response:\\n\u0026#34; + response); } @Override public void onError(Throwable t) { logger.log(SEVERE, \u0026#34;upload failed: \u0026#34; + t); latch.countDown(); } @Override public void onCompleted() { logger.info(\u0026#34;image uploaded\u0026#34;); latch.countDown(); } }); FileInputStream fileInputStream; String imagePath; try { imagePath = image.getFilePath(); fileInputStream = new FileInputStream(imagePath); } catch (FileNotFoundException e) { logger.log(SEVERE, \u0026#34;cannot read image file: \u0026#34; + e.getMessage()); return; } String imageType = imagePath.substring(imagePath.lastIndexOf(\u0026#34;.\u0026#34;)); String fileName = imagePath.substring(imagePath.lastIndexOf(\u0026#34;/\u0026#34;)); ImageInfo info = ImageInfo.newBuilder() .setBookId(bookID) .setImageType(imageType) .setFileName(fileName) .build(); UploadImageRequest request = UploadImageRequest.newBuilder().setInfo(info).build(); try { requestObserver.onNext(request); logger.info(\u0026#34;send image info:\\n\u0026#34; + info); byte[] buffer = new byte[1024]; while (true) { int n = fileInputStream.read(buffer); if (n \u0026lt;= 0) { break; } if (latch.getCount() == 0) { return; } request = UploadImageRequest.newBuilder() .setChunkData(ByteString.copyFrom(buffer)) .build(); requestObserver.onNext(request); } } catch (Exception e) { logger.log(SEVERE, \u0026#34;unexpected error: \u0026#34; + e.getMessage()); } requestObserver.onCompleted(); if (!latch.await(1, TimeUnit.MINUTES)) { logger.warning(\u0026#34;request cannot finish within 1 minute\u0026#34;); } } Though it looks confused in the beginning since we have response as the parameter of uploadImage and get a request back which makes it conter-intuitive compared with createBook, it would help you to get it straight if you think about the meaning of streaming.\nWe are streaming the request to the server, which means we have multiple requests and we need something to handle them sequentially. Thus we need something might sound like request handler - which is exactly StreamObserver\u0026lt;UploadImageRequest\u0026gt;. In other words, uploadImage yield a request handler instead of one time response as createBook.\nWith this request handler, we just need pass in request till none. Therefore, we create StreamObserver\u0026lt;UploadImageRequest\u0026gt; by passing in a simple StreamObserver\u0026lt;UploadImageResponse\u0026gt; which also contains OnNext, OnError and OnCompleted (we will need fill the three methods as long as it is streaming connection).\nSince it is the response, we could just simply log the info. Next step, we should starting building these requests. We will build UploadImageRequest from either ImageInfo (from Image object) or ChunkData (from fileInputStream), and send them sequentially to the request handler.\nIn the end, we should just call onCompleted to shut down the streaming.\nAccordingly, we need revise createBook in client to upload images when creating book:\npublic void createBook(Book book) throws InterruptedException { CreateBookRequest request = CreateBookRequest.newBuilder().setBook(book).build(); CreateBookResponse response = CreateBookResponse.getDefaultInstance(); try { response = blockingStub.withDeadlineAfter(5, SECONDS).createBook(request); for (Image image : book.getImageList()) { new Thread( () -\u0026gt; { try { uploadImage(book.getId(), image); } catch (InterruptedException e) { throw new RuntimeException(e); } } ).start(); } } catch (StatusRuntimeException e) { if (e.getStatus().getCode() == Status.Code.ALREADY_EXISTS) { logger.info(\u0026#34;Book already exists\u0026#34;); return; } } catch (Exception e) { logger.log(SEVERE, \u0026#34;request failed \u0026#34; + e.getMessage()); } logger.info(\u0026#34;New book created: \\n\u0026#34; + response.getId()); } For each image, we create a new thread to upload the image. The standard way is to use a Executor Pool instead of starting a new thread whatever. But bear with me since the meat is gRPC here.\nIt is a lot to take from serverice and client. Now it is the easist part, server. But before that, we prob need implement image store for us since we would need it in our server implementation. Same as book store, we will implement the image store in disk. To be clear, the image itself is saved in local like a blob store and the path will be saved in memory. So we can easily access the image for a book from the book store.\npackage today.ihelio.learngrpc; import today.ihelio.grpc.Image; import today.ihelio.grpc.ImageInfo; import java.io.ByteArrayOutputStream; import java.io.FileNotFoundException; import java.io.FileOutputStream; import java.io.IOException; import java.util.UUID; import java.util.concurrent.ConcurrentHashMap; import java.util.concurrent.ConcurrentMap; import static com.google.protobuf.util.Timestamps.fromMillis; import static java.lang.System.currentTimeMillis; /** * @author helio * @date 2022/9/4 * @package today.ihelio.learngrpc */public class DiskImageStore implements ImageStore{ ConcurrentMap\u0026lt;String, ConcurrentMap\u0026lt;String,Image\u0026gt;\u0026gt; store; private String imageFolder; public DiskImageStore(String imageFolder) { this.store = new ConcurrentHashMap\u0026lt;\u0026gt;(); this.imageFolder = imageFolder; } @Override public String Save(String bookID, ImageInfo info, ByteArrayOutputStream imageData) throws IOException { String imageName = info.getFileName(); String imageID = UUID.nameUUIDFromBytes(imageName.getBytes()).toString(); if (store.containsKey(bookID)) { if (store.get(bookID).containsKey(imageID)) { throw new AlreadyExistsException(\u0026#34;image %s already existed for book %s\u0026#34;.formatted(imageName, bookID)); } } else { store.put(bookID, new ConcurrentHashMap\u0026lt;\u0026gt;()); } String imagePath = String.format(\u0026#34;%s/%s\u0026#34;, imageFolder, imageName); FileOutputStream fileOutputStream = new FileOutputStream(imagePath); imageData.writeTo(fileOutputStream); fileOutputStream.close(); Image image = Image.newBuilder() .setId(imageID) .setFilePath(imagePath) .setUploadedAt(fromMillis(currentTimeMillis())) .build(); store.get(bookID).put(imageID, image); return image.getId(); } } The DiskImageStore is simple, since we are passing ByteArrayOutputStream, we just need create the image path and save the image to the path, and update the InMemoryStore.\nFor server, we would need revise it a bit since BookService requires DiskImageStore now but the most remain the same.\npackage today.ihelio.learngrpc; import io.grpc.Server; import io.grpc.ServerBuilder; import io.grpc.protobuf.services.ProtoReflectionService; import java.io.IOException; import java.util.concurrent.TimeUnit; import java.util.logging.Logger; /** * @author helio * @date 2022/9/3 * @package today.ihelio.learngrpc */public class BookServer { private final Logger logger = Logger.getLogger(BookServer.class.getName()); private BookService bookService; private final int port; private final Server server; public BookServer(int port, BookStore bookStore, ImageStore imageStore) { this(ServerBuilder.forPort(port), port, bookStore, imageStore); } public BookServer(ServerBuilder serverBuilder, int port, BookStore bookStore, ImageStore imageStore) { this.port = port; this.bookService = new BookService(bookStore, imageStore); this.server = serverBuilder.addService(bookService) .addService(ProtoReflectionService.newInstance()) .build(); } public void start() throws IOException { server.start(); logger.info(\u0026#34;Book server started on port \u0026#34; + port); Runtime.getRuntime().addShutdownHook(new Thread(){ @Override public void run() { System.err.println(\u0026#34;shutdown gRPC server because JVM shuts down\u0026#34;); try { BookServer.this.stop(); } catch (InterruptedException e) { e.printStackTrace(); } System.err.println(\u0026#34;server shutdown\u0026#34;); } }); } public void stop() throws InterruptedException{ if (server != null) { server.shutdown().awaitTermination(30, TimeUnit.SECONDS); } } private void blockUntilShutdown() throws InterruptedException { if (server != null) { server.awaitTermination(); } } public static void main(String[] args) throws IOException, InterruptedException{ InMemoryBookStore inMemoryBookStore = new InMemoryBookStore(); DiskImageStore diskImageStore = new DiskImageStore(\u0026#34;src/main/resources/images_destination\u0026#34;); BookServer server = new BookServer(9080, inMemoryBookStore, diskImageStore); server.start(); server.blockUntilShutdown(); } } Let\u0026rsquo;s wrap up the client streaming in gRPC:\nWe need update proto to include necessay message and service Implement the core logic in the service, client and other revisions needed What we implement is a request handler, not a single request-response function Next chaper will introduce server streaming connection which has a lot in common with client streaming.\nThe complete project can be found here.\n","permalink":"/posts/2023/grpc-tutorial---4/","summary":"\u003cp\u003eWe will implement a function to upload image when we create the books like the cover and something else. And we would split the image into chunks and we upload them chunk by chunk until all data are transfered. As we defined earlier in the proto, we could have multiple images for one book. So we will need a function called \u003ccode\u003euploadImage\u003c/code\u003e and uploade all images one by one.\u003c/p\u003e\n\u003cp\u003eLet\u0026rsquo;s start with the proto of image:\u003c/p\u003e","title":"gRPC tutorial - 4: Client Streaming"},{"content":"Regarding server streaming, we will implement a simplified recommendation service to recommend the books based on the popularity. Like client streaming, we would need a response handler - StreamObserver\u0026lt;RecommendBookResponse\u0026gt; - to handle a sequential of responses given one request.\nSince this is a recommendation function, we would need search the books from our book store given the criteria. Thus we would need add a searchBook method to our book store.\n@Override public void searchBook(Context ctx, Integer popularity, BookStream bookStream) { for (Map.Entry\u0026lt;String, Book\u0026gt; entry : inMemoryBookStore.entrySet()) { if (ctx.isCancelled()) { logger.info(\u0026#34;context is cancelled\u0026#34;); return; } Book book = entry.getValue(); if (book.getPopularity() \u0026gt;= popularity) { bookStream.Send(book.getId()); } } } The searchBook need three vairables:\ncontext: check if connection is still available popularity: used to find the recommended books bookStream: the wrapper of StreamObserver\u0026lt;RecommendBookResponse\u0026gt; to send back the responses (bookStream is an interface and we will implement a lambda function for it in BookService). Then we can add recommenBook method to BookService to handle the request and keep sending back the responses if any.\n@Override public void recommendBook(RecommendBookRequest request, StreamObserver\u0026lt;RecommendBookResponse\u0026gt; responseObserver) { Integer popularity = request.getPopularity(); logger.info(\u0026#34;checked all books with popularity greater than \u0026#34; + popularity); bookStore.searchBook(Context.current(), popularity, new BookStream() { @Override public void send(String bookID) { logger.info(\u0026#34;found book: \u0026#34; + bookID); RecommendBookResponse response = RecommendBookResponse.newBuilder().setBookId(bookID).build(); responseObserver.onNext(response); } }); responseObserver.onCompleted(); logger.info(\u0026#34;finished book recommendation!\u0026#34;); } As we have gone through in client streaming, we could just auto insert the override method and we would know what variables we could use: request and responseObserver. Request is easy to understand and responseObserver is just the response handler. Noticebly there is nothing to return here because response are all handled inside this method by the response handler - ``StreamObserver`.\nWe firstly get the popularity from our request - this could be way more complicated in real-world recommendation system - and we can feed this to bookStore to search the qualified books. And the last variable is bookStream we metioned earlier.\nbookStream is essentially the wrapper of StreamObserver\u0026lt;RecommendBookResponse\u0026gt; and we could directly pass in StreamObserver\u0026lt;RecommendBookResponse\u0026gt; if we want. In bookStream, we implement send method to send out the response which just call StreamObserver\u0026lt;RecommendBookResponse\u0026gt; to pass in response.\nThen we need shutdown the connection after finishing one recommendation service.\nYou might wonder where we implement responseObserver and how onNext is working. Well, we don\u0026rsquo;t need in this case since we are using blockingStub which only requires request as the input. However, we would need responseObserver if we are using async stub. Thus, we need think about where we would call recommendBook. The answer is our client and we should create responseObserver in our client for it to handle response in async way (we will discuss the differences between blockingStub and asyncStub when we wrap up).\npublic void recommendBook(Integer popularity) { logger.info(\u0026#34;search started\u0026#34;); RecommendBookRequest request = RecommendBookRequest.newBuilder() .setPopularity(rand.nextInt(100)) .build(); try { Iterator\u0026lt;RecommendBookResponse\u0026gt; iterator = blockingStub .withDeadlineAfter(5, SECONDS) .recommendBook(request); while (iterator.hasNext()) { RecommendBookResponse response = iterator.next(); logger.info(\u0026#34;found: \u0026#34; + response.getBookId()); } } catch (Exception e) { logger.log(SEVERE, \u0026#34;request failed: \u0026#34; + e.getMessage()); return; } logger.info(\u0026#34;recommendation completed!\u0026#34;); } Here we would get an iterator of RecommendBookResponse by calling recommendBook and we could do futher process like refine the ranking and do another filtering. Now we just log everything we received.\nFor server, there is nothing we need do now since server only need call the service when receiving the request. Thus we don\u0026rsquo;t need change it as long as our service signature remains the same which makes saves a lot of time for us to focus on the core logic.\nNext chapter will be last one - bidirectional streaming - and we will implement a rating function for client to submit ratings for several books at the same time.\nThe complete project can be found here.\n","permalink":"/posts/2023/grpc-tutorial---5/","summary":"\u003cp\u003eRegarding server streaming, we will implement a simplified recommendation service to recommend the books based on the popularity. Like client streaming, we would need a response handler - \u003ccode\u003eStreamObserver\u0026lt;RecommendBookResponse\u0026gt;\u003c/code\u003e - to handle a sequential of responses given one request.\u003c/p\u003e\n\u003cp\u003eSince this is a recommendation function, we would need search the books from our book store given the criteria. Thus we would need add a \u003ccode\u003esearchBook\u003c/code\u003e method to our book store.\u003c/p\u003e","title":"gRPC tutorial - 5: Server Streaming"},{"content":"We will speed it up a bit in this chapter after implementing unary call and one direction streaming. As always, we need implement our core logic which includes our book store which handles rating update and computing and book service which handls the request and return response.\n@Override public Book rateBook(String bookID, Integer rating) { Book book = inMemoryBookStore.getOrDefault(bookID, null); if (book == null) { throw NOT_FOUND.withDescription(\u0026#34;book not found\u0026#34;) .asRuntimeException(); } inMemoryBookStore.computeIfPresent(bookID, (k, v) -\u0026gt; { Integer oldRating = v.getRating(); Integer oldCount = v.getRatingCount(); return v.toBuilder() .setRating(rating + oldRating) .setRatingCount(oldCount + 1) .setAvgRating((rating + oldRating)/(float) (oldCount + 1)) .build(); }); return inMemoryBookStore.get(bookID); } we simply update the rating in our book store.\nWe also need add rateBook method to BookService.\n@Override public StreamObserver\u0026lt;RateBookRequest\u0026gt; rateBook(StreamObserver\u0026lt;RateBookResponse\u0026gt; responseObserver) { return new StreamObserver\u0026lt;RateBookRequest\u0026gt;() { @Override public void onNext(RateBookRequest request) { String bookID = request.getBookId(); Integer rating = request.getRating(); Book book = bookStore.rateBook(bookID, rating); RateBookResponse response = RateBookResponse.newBuilder() .setBookId(book.getId()) .setRatingCount(book.getRatingCount()) .setAvgRating(book.getAvgRating()) .build(); responseObserver.onNext(response); } @Override public void onError(Throwable t) { logger.log(SEVERE, \u0026#34;rating failed \u0026#34; + t.getMessage()); } @Override public void onCompleted() { logger.info(\u0026#34;rating finished\u0026#34;); } }; } As client streaming, we need return a StreamObserver\u0026lt;RateBookRequest\u0026gt; and fill the three Override methods.\nThe last we need update is client. Since it is a bidirectional streaming, we need pass in StreamObserver\u0026lt;RateBookResponse\u0026gt; to asyncStub.rateBook and get a StreamObserver\u0026lt;RateBookRequest\u0026gt; back.\npublic void rateBook(String[] bookIDs, Integer[] ratings) throws InterruptedException { CountDownLatch finishLatch = new CountDownLatch(1); logger.info(\u0026#34;rating started\u0026#34;); StreamObserver\u0026lt;RateBookRequest\u0026gt; requestObserver = asyncStub .rateBook(new StreamObserver\u0026lt;RateBookResponse\u0026gt;() { @Override public void onNext(RateBookResponse response) { logger.info(String.format(\u0026#34;laptop rated: id = %s, count = %s, avg = %s\u0026#34;, response.getBookId(), response.getRatingCount(), response.getAvgRating())); } @Override public void onError(Throwable t) { logger.log(SEVERE, \u0026#34;rating failed: \u0026#34; + t.getMessage()); finishLatch.countDown(); } @Override public void onCompleted() { logger.info(\u0026#34;rate laptop completed\u0026#34;); finishLatch.countDown(); } }); int n = bookIDs.length; try { for (int i = 0; i \u0026lt; n; i++) { RateBookRequest request = RateBookRequest.newBuilder() .setBookId(bookIDs[i]) .setRating(ratings[i]) .build(); requestObserver.onNext(request); logger.info(\u0026#34;sent rate-book request: id = \u0026#34; + request.getBookId() + \u0026#34;, score = \u0026#34; + request.getRating()); } } catch (Exception e) { logger.log(Level.SEVERE, \u0026#34;unexpected error: \u0026#34; + e.getMessage()); requestObserver.onError(e); return; } requestObserver.onCompleted(); if (!finishLatch.await(1, TimeUnit.MINUTES)) { logger.warning(\u0026#34;request cannot finish within 1 minute\u0026#34;); } } For responseObserver, we just log the response data. The returned requestObserer is the one we defined in BookService. Then the requestObserver will handle the requests sequentially until none. In the end, we should call onCompleted which will just simply log the message.\nNow we have implemented four kinds of gRPC method. I will wrap up everything we learned in this tutorial next chapter.\nThe complete project can be found here.\n","permalink":"/posts/2023/grpc-tutorial---6/","summary":"\u003cp\u003eWe will speed it up a bit in this chapter after implementing unary call and one direction streaming. As always, we need implement our core logic which includes our book store which handles rating update and computing and book service which handls the request and return response.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nd\"\u003e@Override\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eBook\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003erateBook\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ebookID\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003erating\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eBook\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ebook\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003einMemoryBookStore\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egetOrDefault\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebookID\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebook\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003ethrow\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eNOT_FOUND\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ewithDescription\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;book not found\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003easRuntimeException\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003einMemoryBookStore\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ecomputeIfPresent\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebookID\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eoldRating\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egetRating\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eoldCount\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egetRatingCount\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003etoBuilder\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003esetRating\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erating\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eoldRating\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003esetRatingCount\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eoldCount\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003esetAvgRating\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003erating\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eoldRating\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003efloat\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eoldCount\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ebuild\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e});\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003einMemoryBookStore\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eget\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebookID\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003ewe simply update the rating in our book store.\u003c/p\u003e","title":"gRPC tutorial - 6: Bidirectional streaming"},{"content":"The four types of gRPC covers the majority use case when we design API under HTTP/2 since we could either send one request/response or multiple requests/responses in one call.\nAnd using proto buffer enables us to separate the implementation of service, server and client which are the three components we need develop for each RPC service. Though the service could also depend on several components. But the idea is the simple, we need implement service, server and client for each RPC service and we don\u0026rsquo;t have to stick with one language for server and client.\nThe design of gRPC also simplifies the development that we just need implement the class in the *grpc.class and gRPC will do all heavy lifting for us. In this tutorial, the BookService is the subclass of `` BookServiceGrpc.BookServiceImplBase which already contains 4 methods we need override including createBook, uploadImage, recommendBook and rateBook. This exactly what we need implement in service on server side. For client side, what we need implement depends on the different type of stubs:\nBlocking Stub - RPC call will wait on a response or throw exception Async Stub - The response is returned asynchronously thus RPC call is not blocking. Future Stub - which is similar with Blocking Stub. In our implementation, we choose async stub and there is another asyncStub.rateBook method we could use to call rateBook on server side. It might look odd, but they are actually the same rateBook method gRPC is going to invoke. The below is the method we implement in BookService and what we do it to return StreamObserver\u0026lt;RateBookRequest\u0026gt; and directly use responseObserver to send the response.\npublic io.grpc.stub.StreamObserver\u0026lt;today.ihelio.grpc.RateBookRequest\u0026gt; rateBook( io.grpc.stub.StreamObserver\u0026lt;today.ihelio.grpc.RateBookResponse\u0026gt; responseObserver) { return io.grpc.stub.ServerCalls.asyncUnimplementedStreamingCall(getRateBookMethod(), responseObserver); } In client, we call asyncStub.rateBook and pass in StreamObserver\u0026lt;RateBookResponse\u0026gt;.\nStreamObserver\u0026lt;RateBookRequest\u0026gt; requestObserver = asyncStub .rateBook(new StreamObserver\u0026lt;RateBookResponse\u0026gt;() { @Override public void onNext(RateBookResponse response) { logger.info(String.format(\u0026#34;laptop rated: id = %s, count = %s, avg = %s\u0026#34;, response.getBookId(), response.getRatingCount(), response.getAvgRating())); } @Override public void onError(Throwable t) { logger.log(SEVERE, \u0026#34;rating failed: \u0026#34; + t.getMessage()); finishLatch.countDown(); } @Override public void onCompleted() { logger.info(\u0026#34;rate laptop completed\u0026#34;); finishLatch.countDown(); } }); Bascially we implement RequestObserver and ResponseObserver on server and client side respectively but for the same rateBook method. gRPC helps us to use the same method on server and client without worrying about how they are wired up.\nIt is everything I want to cover in this gRPC tutorial - the implementation of different kinds of gRPC call and how gRPC simplifies our development.\nI believe it will give you a good start if you are new to gRPC and please leave your comments or questions below. I\u0026rsquo;d love to discuss any topics with you.\nBig thanks to this course Tech School Videos\n","permalink":"/posts/2023/grpc-tutorial---7/","summary":"\u003cp\u003eThe four types of gRPC covers the majority use case when we design API under HTTP/2 since we could either send one request/response or multiple requests/responses in one call.\u003c/p\u003e\n\u003cp\u003eAnd using proto buffer enables us to separate the implementation of service, server and client which are the three components we need develop for each RPC service. Though the service could also depend on several components. But the idea is the simple, we need implement service, server and client for each RPC service and we don\u0026rsquo;t have to stick with one language for server and client.\u003c/p\u003e","title":"gRPC tutorial - 7: Takeaway"},{"content":"What is Quarkus Quarkus is a full-stack, Kubernetes-native Java framework that was developed by Red Hat. It first appeared in early 2019, aimed at optimizing Java specifically for containers and enabling it to become an effective platform in serverless environments.\nThe motivation behind Quarkus was to breathe new life into the Java ecosystem for modern cloud-native applications. It seeks to overcome the traditional shortcomings of Java, like slow startup time and high memory consumption, which are particularly notable in containerized environments. Quarkus achieves this through ahead-of-time (AOT) compilation which drastically reduces the runtime memory overhead and speeds up the startup time, making Java a more competitive choice in the modern landscape of microservices and serverless architectures.\nWhat makes Quarkus distinct, especially under the guidance of Red Hat, is its live coding feature which allows developers to see changes in real-time without the need for redeploys, enhancing the developer experience greatly. Additionally, Quarkus is designed to work seamlessly with popular Java standards, frameworks, and libraries, meaning that developers don\u0026rsquo;t have to learn new APIs to start benefiting from it. It integrates effortlessly with Kubernetes and OpenShift, promoting a simplified and productive development process, especially in cloud-native environments.\nFurthermore, it emphasizes unifying imperative and reactive programming models, bringing in a new paradigm that is more flexible and powerful, catering to a broader range of use-cases and accommodating a larger audience of developers who are familiar with different programming models.\nIn essence, with the development of Quarkus, Red Hat has propelled Java into the modern age, making it a strong contender in the cloud-native development space, fostering quicker, more efficient, and scalable application development.\nWhy you should use Quarkus we\u0026rsquo;re talking about Quarkus, Spring Boot, and Micronaut. These guys are like the superheroes of the Java ecosystem, each with its own superpower!\nSpring Boot, the seasoned veteran in the group, has been the go-to for building Java applications for quite a while now. It comes packed with a rich set of libraries and a massive community support, which makes it pretty robust and versatile. But, as it\u0026rsquo;s quite mature, it can sometimes feel a bit too heavy, especially when you\u0026rsquo;re trying to whip up microservices that are lean and mean.\nThen enters Micronaut, which was like a breath of fresh air when it appeared on the scene. It came in swinging, offering quicker startup times and lower memory footprint compared to Spring Boot, thanks to its ahead-of-time (AOT) compilation. It kind of shook things up, showing that Java applications can indeed be lightweight and nimble.\nNow, let\u0026rsquo;s talk about the new kid on the block, Quarkus. Developed by Red Hat, it kind of took the Java world by storm around 2019. It\u0026rsquo;s like it looked at what Spring Boot and Micronaut were doing and said, \u0026ldquo;Hold my coffee!\u0026rdquo; Quarkus further ramps up the efficiency game, offering blisteringly fast startup times and incredibly low memory usage. It\u0026rsquo;s tailor-made for containerized environments like Kubernetes, making it a rockstar in the cloud-native development arena.\nBut here\u0026rsquo;s where Quarkus really shines - its live coding feature is nothing short of a game-changer. Imagine being able to see the changes to your code in real-time, without those pesky redeploys. It\u0026rsquo;s like having a conversation with your application, which seriously ramps up productivity.\nSo, why should you consider hitching your wagon to Quarkus? Well, it\u0026rsquo;s kind of bringing sexy back to Java. It\u0026rsquo;s lightweight, it\u0026rsquo;s nimble, and it\u0026rsquo;s just perfect for the modern, containerized world where resources are at a premium. Not to mention, it marries the best of both worlds ‚Äì the imperative and reactive programming models ‚Äì giving you the flexibility to code the way you like it.\nIn a nutshell, if you\u0026rsquo;re looking to build microservices that are not just efficient but also fun to work with, you might want to give Quarkus a whirl. It\u0026rsquo;s fresh, it\u0026rsquo;s exciting, and it might just be the spark that reignites your passion for Java development.\nSo there you have it, a quick glimpse into the cool, modern world of Java frameworks. Each has its strengths, but Quarkus seems to be nudging ahead with its innovative approach to making Java fun and efficient again. Give it a shot, and you might just find it to be a breath of fresh air in your development adventures!\nDevelopment Quarkus provides a convenient way for local development, using quarkus dev command to start up the app in local with OpenAPI available to test the Rest endpoints. In addition, Quarkus allows us to use different dev profiles by specifying the application.properties, e.g. we could use quarkus dev -Dquarkus.profile=dev to start the app using application-dev.properties. Thus we could customize the development environment with database connections or listening port.\nOnce the app starts up, the changes to the code would be lively deployed so we don\u0026rsquo;t have to rebuild and redeploy. And it is very easy to add debugger to Quarkus (# How to debug a Quarkus application with IntelliJ IDEA).\nDependency Injection Quarkus using Jarkarta for DI and all it needs is adding the proper annotation like @ApplicationScoped or @Singleton. But the official site mainly uses @ApplicationScoped. This is a great article explaining the different scopes in Quarkus.\nException Handler Quarkus also supports exception handler shown as below:\n@Provider public class CustomExceptionHandler implements ExceptionMapper\u0026lt;CustomException\u0026gt; { private final static Logger logger = LoggerFactory.getLogger(CustomExceptionHandler.class); @Override public Response toResponse(CustomException e) { logger.error(\u0026#34;cannot complete the request.\u0026#34;, e); if (e.getCause() instanceof RecordAlreadyExistingException || e.getCause() instanceof NotFoundException || e.getCause() instanceof IllegalArgumentException) { return Response.status(Response.Status.BAD_REQUEST) .entity(new CustomException.ErrorResponseBody(e.getCause().getMessage())) .build(); } else { return Response.status(Response.Status.INTERNAL_SERVER_ERROR) .entity(new CustomException.ErrorResponseBody(\u0026#34;Something unexpected happened. Try again\u0026#34;)) .build(); } } } We could replace CustomException with any exception type we want to further process and map to a response.\nHealth Check Health check is also easy. We just need to add the Liveness annotation and implements the interface HealthCheck. Quarkus will provide the health check endpoint at {http://localhost:8080}/q/health/live.\n@Liveness @ApplicationScoped public class SimpleHealthCheck implements HealthCheck { @Override public HealthCheckResponse call() { return HealthCheckResponse.up(\u0026#34;I am healthy\u0026#34;); } } Database Connection You could use Hibernate via Panache if you want to use ORM (tutorial). But I personally like using Jooq to interact with database. And it is also very easy (example POM):\nInstall the required dependency flyway Jooq Generate the Jooq records DSLContext could be directly inject Test The best part I love with Quarkus is its devservice which is a built-in test container allowing us to test the transactions. We could set up the database connection in the application.properties in test folder or a separate test profile class which could be specified for a particular test class. In below, I set up the MySQL db for devservice and flyway to create the schemas for transaction tests.\nquarkus.datasource.db-kind=mysql quarkus.datasource.devservices.db-name=minance quarkus.datasource.devservices.username=quarkus quarkus.datasource.devservices.password=quarkus quarkus.datasource.devservices.port=30301 quarkus.flyway.enabled=true quarkus.flyway.clean-at-start=true quarkus.flyway.migrate-at-start=true quarkus.flyway.username=quarkus quarkus.flyway.password=quarkus quarkus.flyway.jdbc-url=jdbc:mysql://127.0.0.1:30301/minance?createDatabaseIfNotExist=true quarkus.flyway.default-schema=minance Build \u0026amp; Deploy Since Quarkus is meant to be a cloud native framework, it comes with several Dockerfile for building a docker image. For example, we could firstly run quarkus build to build an exectuatble jar and build a docker image using: docker build --platform linux/amd64 -f src/main/docker/Dockerfile.jvm -t repo/image:0.0.1 . for amd64 platform.\nThen we could deploy it by running docker run -p 8080:8080 repo/image:0.0.1 to start the container.\n","permalink":"/posts/2023/how-to-make-a-microservice-with-quarkus/","summary":"\u003ch2 id=\"what-is-quarkus\"\u003eWhat is Quarkus\u003c/h2\u003e\n\u003cp\u003eQuarkus is a full-stack, Kubernetes-native Java framework that was developed by Red Hat. It first appeared in early 2019, aimed at optimizing Java specifically for containers and enabling it to become an effective platform in serverless environments.\u003c/p\u003e\n\u003cp\u003eThe motivation behind Quarkus was to breathe new life into the Java ecosystem for modern cloud-native applications. It seeks to overcome the traditional shortcomings of Java, like slow startup time and high memory consumption, which are particularly notable in containerized environments. Quarkus achieves this through ahead-of-time (AOT) compilation which drastically reduces the runtime memory overhead and speeds up the startup time, making Java a more competitive choice in the modern landscape of microservices and serverless architectures.\u003c/p\u003e","title":"How to make a microservice with Quarkus"},{"content":"Intro When you have a NAS at home, it feel bad if you don\u0026rsquo;t keep it running for something even if you don\u0026rsquo;t use it. It is the major backup to store the photos we shoot with our iphones. However, it is just basic use and hosting a media center with it sounds more cool. I used to use transmission-openvpn and it works perfectly, however, my VPN expires and I decided to use proton free tier. This is where things go south - I spent two days on it and I cannot get it work. When I am about to give up, I found a better approach for my purpose - running transmission and vpn in separate docker container and route transmission to vpn conatiner. It sounds a great idea in the first place given we should only do one job for each service - unix\u0026rsquo;s princinple.\nNow I will go through how I set it up and how it works for me in the following sections.\nTools Though everything could be handled by docker command or docker app in synology, I highly suggest to use a container management platform - portainer. After installing portainer, we are good to go to install vpn container and download client.\nPortainer This article illustrates how to install portainer on synology so I will just put it here to avoide deplicate efforts. Note I am using portainer for Docker.\nVPN Container There are tons of choices and each provider should have its own docker image to use. But what I use is gluetun which is a lightweight vpn client providing all the functions you need and has tremendous support to different providers.\nTo install gluetun, we need find the setup guide for the provider we use. Since I am using proton VPN so I will use this guide. Remember portainer supports multiple ways of deploying container and I prefer to deploy it via Stacks which is actually via the compose file.\nAfter clicking on Add Stack, there is a web editor we could type in our compose file like Remember proton VPN has different user/password for connecting openVPN which is not the one we use to login. I was trapped there when I was working on transmission-openvpn container and I don\u0026rsquo;t want others waste their time on it. It is also noted we don\u0026rsquo;t have any port mapping here. We will set up port mapping later for better visibility.\nAfter we have gluetun installed, our VPN container should be good to go. And we could check the log to verify if we have it connected as shown below.\n2022-09-30T00:05:11Z INFO [ip getter] Public IP address is 143.244.44.185 (United States, New York, New York City) Downloadclient Similarly, there are tons of download clients you could use. qBitorrent and transmission are two widely used clients. qBitorrent has more functions and prob better UI, and transmission is very lightweight and concise. So it is really your call. I used transmission for a while and I tend to keep using it.\nSame way as installing gluetun, we just need get the compose file and mine is\n--- version: \u0026#34;2.1\u0026#34; services: transmission: image: lscr.io/linuxserver/transmission:latest container_name: transmission environment: - PUID=1000 - PGID=1000 - TZ=USA/NEW YORK volumes: - /volume1/docker/transmission/config:/config - /volume1/docker/transmission/downloads:/downloads - /volume1/docker/transmission/watch:/watch restart: unless-stopped So now we have all the tools we need: portainer, gluetun and transmission. The last part is how we route transmission to gluetun.\nRouting You will be surprised how simple it is now. First we need setup port mapping in gluetun. According to the transmission documentation, the port exposed by transimission is -p 9091:9091 -p 51413:51413 -p 51413:51413/udp. We just need make the same port mapping in gluetun as The final step is to modify the network in transmission container, we go to transmission container and click on duplicate/edit, and setup network in advanced conatiner settings as: Because we are using the container as the network of transmission, we need do the port mapping in the glutun container instaed of transmission container.\nAfter deploy it again, the transmission will be routed to gluetun. To verify that, we can check the ip address of transmission by ssh to the container: The ip address is the same as what we saw from gluetun.\nConclusion Now everything is ready and we are good to use transimission now. I tried the speed and it looks good to me. I am going to run with this gig for a while hopefully proton free is sufficient for me.\nReferences https://mariushosting.com/how-to-install-portainer-on-your-synology-nas/ https://www.youtube.com/watch?v=vUyHGF1HMsw\u0026amp;t=495s https://www.youtube.com/watch?v=xbSfaKwyfXE\n","permalink":"/posts/2023/how-to-route-transmission-to-vpn-container/","summary":"\u003ch1 id=\"intro\"\u003eIntro\u003c/h1\u003e\n\u003cp\u003eWhen you have a NAS at home, it feel bad if you don\u0026rsquo;t keep it running for something even if you don\u0026rsquo;t use it. It is the major backup to store the photos we shoot with our iphones. However, it is just basic use and hosting a media center with it sounds more cool. I used to use \u003ca href=\"https://github.com/haugene/docker-transmission-openvpn\"\u003etransmission-openvpn\u003c/a\u003e and it works perfectly, however, my VPN expires and I decided to use proton free tier. This is where things go south - I spent two days on it and I cannot get it work. When I am about to give up, I found a better approach for my purpose - running transmission and vpn in separate docker container and route transmission to vpn conatiner. It sounds a great idea in the first place given we should only do one job for each service - unix\u0026rsquo;s princinple.\u003c/p\u003e","title":"How to route transmission to VPN container?"},{"content":"Navigating the realm of negotiation, especially with car dealers, feels like threading a needle in the dark. Dealers hold most of the cards, thanks to the imbalance of information. They decide what to reveal, while we, as buyers, have to piece together a strategy from fragments. But fret not! With patience, strategy, and a keen eye for details, you can level the playing field.\nüö´ Rule #1: Resist the Urge to Commit Ever been offered a tempting discount right off the bat? Sounds irresistible, right? But here\u0026rsquo;s the catch: they often want an immediate commitment. Reflecting on my college days, I remember succumbing to such tactics. The lesson? If the offer comes too easily, it\u0026rsquo;s worth second-guessing. Push too hard, and I\u0026rsquo;d suggest gracefully exiting the conversation. You might just find them softening their stance, luring you back with even more enticing offers. Keep cool, and roll out strategy two: crunch those numbers.\nüßÆ Rule #2: Crunch the Numbers To outwit dealers, become best friends with math. And no, you don\u0026rsquo;t need to be Einstein! Tools like the auto loan calculator are invaluable. By checking the total value, trade-in, and interest, you\u0026rsquo;ll avoid pitfalls. As a former PhD student on a tight budget, I\u0026rsquo;ve been misled by focusing solely on monthly payments. Dealers love emphasizing stretched-out payment plans with hidden high Annual Percentage Rates (APRs). Don\u0026rsquo;t fall for it. Check manufacturer websites and other platforms for better APRs, like Mazda\u0026rsquo;s 2.49% for up to 36 months (as of September 2022) or offerings from DCU.\nüï∞Ô∏è Rule #3: Patience Pays Hasty decisions in negotiations? A straight path to regret. My recent car hunt took me to three dealers, collecting price breakdowns, trade-in values, waviers and financing options (the manufacturer could have better offer than the dealership). While it\u0026rsquo;s a tedious process, armed with this information, you can:\nExpand Your Horizon: Don\u0026rsquo;t restrict your search locally. Reach out to distant dealers‚Äîthey might have different rules, and you could get better offers or waivers.\nEngage in Friendly Competition: It\u0026rsquo;s a buyer\u0026rsquo;s market. Refuse to buy the narrative of chip or production shortages. Display your offers, and let dealers outbid each other.\nPro Tip: While securing an official quote can be tricky, some dealers, like several Hyundai dealers in Orlando, willing to email me a comprehensive quote. And it never hurts to ask if you could snap a picture of their offer.\nüéØ Closing Thoughts Securing a great deal is an art. But the formula is straightforward: patience + math - impulsive commitments. This advice stems from my week-long journey to acquire my car, where I realized much of the online guidance didn\u0026rsquo;t align with current scenarios. So, here\u0026rsquo;s my two cents, hoping to light up your path in the car-buying journey!\n","permalink":"/posts/2023/mastering-the-art-of-car-dealership-negotiations/","summary":"\u003cp\u003eNavigating the realm of negotiation, especially with car dealers, feels like threading a needle in the dark. Dealers hold most of the cards, thanks to the imbalance of information. They decide what to reveal, while we, as buyers, have to piece together a strategy from fragments. But fret not! With patience, strategy, and a keen eye for details, you can level the playing field.\u003c/p\u003e\n\u003ch1 id=\"-rule-1-resist-the-urge-to-commit\"\u003eüö´ Rule #1: Resist the Urge to Commit\u003c/h1\u003e\n\u003cp\u003eEver been offered a tempting discount right off the bat? Sounds irresistible, right? But here\u0026rsquo;s the catch: they often want an immediate commitment. Reflecting on my college days, I remember succumbing to such tactics. The lesson? If the offer comes too easily, it\u0026rsquo;s worth second-guessing. Push too hard, and I\u0026rsquo;d suggest gracefully exiting the conversation. You might just find them softening their stance, luring you back with even more enticing offers. Keep cool, and roll out strategy two: crunch those numbers.\u003c/p\u003e","title":"Mastering the Art of Car Dealership Negotiations"},{"content":"This is to implement backpropagation algorithm in numpy which would help me to further understand how this works.\nimport pandas as pd import numpy as np from pdb import set_trace from sklearn import datasets Design the network structure Each layer contains the weights/bias and activation union structures = [ {\u0026#34;input_dim\u0026#34;: 2, \u0026#34;output_dim\u0026#34;: 25, \u0026#34;activation\u0026#34;: \u0026#34;relu\u0026#34;}, {\u0026#34;input_dim\u0026#34;: 25, \u0026#34;output_dim\u0026#34;: 50, \u0026#34;activation\u0026#34;: \u0026#34;relu\u0026#34;}, {\u0026#34;input_dim\u0026#34;: 50, \u0026#34;output_dim\u0026#34;: 50, \u0026#34;activation\u0026#34;: \u0026#34;relu\u0026#34;}, {\u0026#34;input_dim\u0026#34;: 50, \u0026#34;output_dim\u0026#34;: 25, \u0026#34;activation\u0026#34;: \u0026#34;relu\u0026#34;}, {\u0026#34;input_dim\u0026#34;: 25, \u0026#34;output_dim\u0026#34;: 1, \u0026#34;activation\u0026#34;: \u0026#34;sigmoid\u0026#34;}, ] Initiate the parameters The weights can be random number and bias are preferred to be small postive values in order to pass the relu in the beginning. def init_layers(structures, seed = 1105): params = {} for i, structure in enumerate(structures): params[\u0026#34;W_{}\u0026#34;.format(i)] = np.random.randn(structure[\u0026#34;input_dim\u0026#34;], structure[\u0026#34;output_dim\u0026#34;])/10 params[\u0026#34;b_{}\u0026#34;.format(i)] = np.random.randint(1,10, (1, structure[\u0026#34;output_dim\u0026#34;]))/100 return params The forward and backword activation union During back propagation, it is appraent we would need use the output value before activation in feed forward process. We would need to save the ouput before and after activation in each layer for back propagation later. def relu(U): U[U \u0026lt; 0] = 0 return U def sigmoid(U): return np.divide(1, (1+np.exp(-1*U))) def relu_backward(du, U): du[U \u0026lt; 0] = 0 return du def sigmoid_backward(du, U): sig = sigmoid(U) * (1 - sigmoid(U)) return du*sig So, we return two values in single_layer_feedforward function corresponding to the activated output and output which doesn\u0026rsquo;t. The activated output will be feed as input into the next layer and the unactivated output will be used in backpropagation - the reason is we need the partial derivatives of activation union to its input.\ndef single_layer_feedforward(A, W, b, activation_func): return activation_func(A@W + b), A@W + b Duing feed forward process, we start with features (X), and go through each layer till the final output. def feedforward(X, structures, params): U_curr = X for i, structure in enumerate(structures): # set_trace() W_curr = params[\u0026#34;W_\u0026#34; + str(i)] b_curr = params[\u0026#34;b_\u0026#34; + str(i)] params[\u0026#34;U_input_\u0026#34; + str(i)] = U_curr if structure[\u0026#34;activation\u0026#34;] == \u0026#34;relu\u0026#34;: activation_func = relu elif structure[\u0026#34;activation\u0026#34;] == \u0026#34;sigmoid\u0026#34;: activation_func = sigmoid else: print(\u0026#34;no supported activation\u0026#34;) exit U_next, U_curr = single_layer_feedforward(U_curr, W_curr, b_curr, activation_func) params[\u0026#34;U_post_activation_\u0026#34; + str(i)] = U_next params[\u0026#34;U_prior_activation_\u0026#34; + str(i)] = U_curr U_curr = U_next return U_curr Loss function Here we used the negative log-loss as the ‚Äã (total loss) to minimize.\ndef negativelogloss(output, y): # set_trace() return np.squeeze(-1 * sum(y * np.log10(output) + (1 - y)*np.log10(1-output)) / len(y)) def get_accuracy(y_true, y_predicted): predicted_class = y_predicted.copy() predicted_class.reshape(-1) predicted_class[predicted_class \u0026gt; 0.5] = 1 predicted_class[predicted_class \u0026lt;= 0.5] = 0 return accuracy_score(y_true, predicted_class) Backpropagtion process During backpropagtion, we passed the partial derivatives based on the chain rules.\nIn the single layer backward, it is obvious we will feed the previous derivatives into the layer in bottom-up order, then the derivatives will multiply the partial derivatives in the layer to generate the accumulative derivatives for next layer. During this process, we will also save the gradient of weights and bias (average gradients) in table for update later.\ndef single_layer_backward(dz, U_input, U_prior_activation, W, activation_func): m = len(dz) dz = activation_func(dz, U_prior_activation) gradient_W = (U_input.T @ dz) / m gradient_b = np.mean(dz, axis = 0) dz = dz @ W.T # set_trace() return dz, gradient_W, gradient_b During the whole backpropagtion process, we started from the partial derivatives of loss function to the y_hat (output of feed forward).\nIn each layers, we will accumulate the derivatives and calculate the gradient of W and b.\nThe accumulated derivatives will be passed to next layer.\nThe gradient of W and b in each layer will stored in grads table and we can update them later.\ngrads_table = {} def backward(output, y, structures, params): dz_prev = -(np.divide(y, output) - np.divide(1-y, 1 - output)) # set_trace() i = len(structures) - 1 while i \u0026gt;= 0: W_curr = params[\u0026#34;W_\u0026#34; + str(i)] b_curr = params[\u0026#34;b_\u0026#34; + str(i)] U_input_curr = params[\u0026#34;U_input_\u0026#34; + str(i)] U_prior_activation = params[\u0026#34;U_prior_activation_\u0026#34; + str(i)] if structures[i][\u0026#34;activation\u0026#34;] == \u0026#34;relu\u0026#34;: activation_func = relu_backward elif structures[i][\u0026#34;activation\u0026#34;] == \u0026#34;sigmoid\u0026#34;: activation_func = sigmoid_backward else: print(\u0026#34;Not suppported activation func\u0026#34;) exit # set_trace() dz_prev, gradient_W, gradient_b = single_layer_backward(dz_prev, U_input_curr, U_prior_activation, W_curr, activation_func) # set_trace() # params[\u0026#34;W_\u0026#34; + str(i)] = W_curr grads_table[\u0026#34;gradient_W_\u0026#34; + str(i)] = gradient_W grads_table[\u0026#34;gradient_b_\u0026#34; + str(i)] = gradient_b i -= 1 Update the parameters Go through each layer to update the parameters using grads_table def update_weights(depth, params, grads_table, lr): for i in range(depth): params[\u0026#34;W_\u0026#34; + str(i)] = params[\u0026#34;W_\u0026#34; + str(i)] - grads_table[\u0026#34;gradient_W_\u0026#34; + str(i)] * lr params[\u0026#34;b_\u0026#34; + str(i)] = params[\u0026#34;b_\u0026#34; + str(i)] - grads_table[\u0026#34;gradient_b_\u0026#34; + str(i)] * lr return params In practice import os from sklearn.datasets import make_moons from sklearn.model_selection import train_test_split from sklearn.metrics import accuracy_score X, y = make_moons(n_samples = 1000, noise=0.2, random_state=100) y = y.reshape(-1, 1) X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=42) params = init_layers(structures) test = params.copy() grads_table = {} deepth = len(structures) for epoch in range(10000): output = feedforward(X_train, structures, params) # print(\u0026#34;logloss: {}; accuracy: {}\u0026#34;.format(negativelogloss(output, y_train), get_accuracy(y_train, output))) backward(output, y_train, structures, params) params = update_weights(deepth, params, grads_table, 0.01) y_hat = feedforward(X_test, structures, params) print(\u0026#34;logloss: {}; accuracy: {}\u0026#34;.format(negativelogloss(y_hat, y_test), get_accuracy(y_test, y_hat))) ","permalink":"/posts/2023/neural-network-in-numpy/","summary":"\u003cp\u003eThis is to implement backpropagation algorithm in numpy which would help me to further understand how this works.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003epandas\u003c/span\u003e \u003cspan class=\"k\"\u003eas\u003c/span\u003e \u003cspan class=\"nn\"\u003epd\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003enumpy\u003c/span\u003e \u003cspan class=\"k\"\u003eas\u003c/span\u003e \u003cspan class=\"nn\"\u003enp\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003efrom\u003c/span\u003e \u003cspan class=\"nn\"\u003epdb\u003c/span\u003e \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003eset_trace\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003efrom\u003c/span\u003e \u003cspan class=\"nn\"\u003esklearn\u003c/span\u003e \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003edatasets\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"design-the-network-structure\"\u003eDesign the network structure\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eEach layer contains the weights/bias and activation union\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003estructures\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e ¬†  \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;input_dim\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;output_dim\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e25\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;activation\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;relu\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e ¬†  \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;input_dim\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e25\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;output_dim\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e50\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;activation\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;relu\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e ¬†  \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;input_dim\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e50\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;output_dim\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e50\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;activation\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;relu\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e ¬†  \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;input_dim\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e50\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;output_dim\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e25\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;activation\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;relu\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e ¬†  \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;input_dim\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e25\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;output_dim\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;activation\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sigmoid\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"initiate-the-parameters\"\u003eInitiate the parameters\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eThe weights can be random number and bias are preferred to be small postive values in order to pass the relu in the beginning.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003einit_layers\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estructures\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eseed\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1105\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e ¬† ¬†\u003cspan class=\"n\"\u003eparams\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e ¬† ¬†\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estructure\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"nb\"\u003eenumerate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estructures\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e ¬† ¬† ¬† ¬†\u003cspan class=\"n\"\u003eparams\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;W_\u003c/span\u003e\u003cspan class=\"si\"\u003e{}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eformat\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enp\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erandom\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erandn\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estructure\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;input_dim\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003estructure\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;output_dim\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e ¬† ¬† ¬† ¬†\u003cspan class=\"n\"\u003eparams\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;b_\u003c/span\u003e\u003cspan class=\"si\"\u003e{}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eformat\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enp\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erandom\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erandint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estructure\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;output_dim\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e]))\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"mi\"\u003e100\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e ¬† ¬†\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eparams\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"the-forward-and-backword-activation-union\"\u003eThe forward and backword activation union\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eDuring back propagation, it is appraent we would need use the output value before activation in feed forward process. We would need to save the ouput before and after activation in each layer for back propagation later.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003erelu\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eU\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e ¬† ¬†\u003cspan class=\"n\"\u003eU\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eU\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e ¬† ¬†\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eU\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003esigmoid\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eU\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e ¬† ¬†\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003enp\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edivide\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"n\"\u003enp\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eU\u003c/span\u003e\u003cspan class=\"p\"\u003e)))\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003erelu_backward\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edu\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eU\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e ¬† ¬†\u003cspan class=\"n\"\u003edu\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eU\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e ¬† ¬†\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003edu\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003esigmoid_backward\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edu\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eU\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e ¬† ¬†\u003cspan class=\"n\"\u003esig\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esigmoid\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eU\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003esigmoid\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eU\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e ¬† ¬†\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003edu\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esig\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSo, we return two values in single_layer_feedforward function corresponding to the activated output and output which doesn\u0026rsquo;t. The activated output will be feed as input into the next layer and the unactivated output will be used in backpropagation - the reason is we need the partial derivatives of activation union to its input.\u003c/p\u003e","title":"Neural Network in Numpy"},{"content":"Java 19 is here with the preview of loom project. Loom project is the one helps Java become asynchronous and come back to the table to compete with other asynchronous language such as Golang. But why do we need Java to be asynchronous?\nBlocking It is all because we don\u0026rsquo;t want to be blocked. And the best example must be how you do your driver license renewal at the DMV. I remember I work up at 5:30 in the morning and drove to the DMV where there was already a line of 50 people. But I have no choice but to join them. After several hours\u0026rsquo; waiting, I can finally check in and get a number for my case. Then I was eligible to walk in and find a chair to continue my waiting. After another couple hours, I finally got called at a window and finished my license renewal task.\nIt is very obvious I am blocked before and after the check-in. How should we make this more efficient that no one should be blocked? The simple answer is to increase the efficiency and the number of staff at the DMV. But we both know it is impossible to have 100 staff at one single DMV to deal with all the services.\nConcurrency but no Asychronous This is exactly what we are facing with in Java. Multi-threading is important for us to reduce the blocking in Java, but the number of threads is restricted by the machine. Moreover, thread is usually tied to a specific task which is like the staff of the DMV is assigned to one customer at a time and cannot help other customers unless they finished their current work. Thus, Java can achieve concurrency but can never reach asynchronous with current threading mechanism.\nVirtualThread This why we need the Loom project which provides VirtualThread which is super lightweight because it is now managed by JVM instead of OS thus the number of VirtualThread could go way beyond the number of cores. In association with the new data structure, continuation, Loom also enables these VirtualThread to move around, if their current task is blocked like working on some IO task, and very likely another VirtualThread could come to pick up what is left and finish the rest task.\nTo show the power of Loom, I am going to use a very simple snippet. Reminder: We need to change the language level to enable preview for Java 19 if we want to use it. In the code below, we can tweak the numerThreads to test how many threads we could create with normal Thread and VirtualThread. For each thread, we assign a simple task which just sleep for 500 ms. In my test, I can create 1,000 threads but failed with 5,000 threads. When we broke the limit, we would get an OutOfMemeryError. To the opposite, I can create even 10,000 VirtualThread which means I could handle more request at the same time and blocking will be largely reduced.\npublic class Main { public static void doSomething(){ try { Thread.sleep(500); } catch (InterruptedException e) { throw new RuntimeException(e); } } public static void main(String[] args) throws InterruptedException { int numberThreads = 10_000; Thread thread = null; // Normal Thread //for (int i = 0; i \u0026lt; numberThreads; i++) { // thread = new Thread(Main::doSomething); // thread.start(); //} // //thread.join(); // Virtual Thread for (int i = 0; i \u0026lt; numberThreads; i++) { thread = Thread.startVirtualThread(Main::doSomething); } thread.join(); } } It is a very exciting achievement and feature to Java community. I believe it would bring a lot of changes to Java standards as well.\nReferences # What\u0026rsquo;s Looming in Java The Why and What of Project Loom - Venkat Subramaniam\n","permalink":"/posts/2023/sneak-peek-at-the-asynchronous-java/","summary":"\u003cp\u003eJava 19 is here with the preview of loom project. Loom project is the one helps Java become asynchronous and come back to the table to compete with other asynchronous language such as Golang. But why do we need Java to be asynchronous?\u003c/p\u003e\n\u003ch2 id=\"blocking\"\u003eBlocking\u003c/h2\u003e\n\u003cp\u003eIt is all because we don\u0026rsquo;t want to be blocked. And the best example must be how you do your driver license renewal at the DMV. I remember I work up at 5:30 in the morning and drove to the DMV where there was already a line of 50 people. But I have no choice but to join them. After several hours\u0026rsquo; waiting, I can finally check in and get a number for my case. Then I was eligible to walk in and find a chair to continue my waiting. After another couple hours, I finally got called at a window and finished my license renewal task.\u003c/p\u003e","title":"Sneak peek at the asynchronous Java"},{"content":"Introduction Paxos is a distributed consensus algorithm developed by Lamport. It is proved optimal and many systems are built based on it like chubby and zookeeper.\nBut this article is not going to discuss Lamport\u0026rsquo;s orginal paper but focus on the engineering implementations. My colleague highly recommended Ongaro\u0026rsquo;s lecture of Paxos and said it is the best source of learning Paxos. I cannot agree more after studying it. That being said, I will briefly talk about Paxos and Multi-Paxos and dive into the engineering implementations.\nMulti-Paxos \u0026amp; Paxos In short, Multi-Paxos is simply the multiple use of Paxos. Paxos is developed by Lamport in 1998 for the distributed consensus problem. There are three agents: proposer, acceptor and listener in Paxos. They can be the same server or separate server depending on the design. In Ongaro\u0026rsquo;s lecture, the listener is part of acceptor thus it ends up with two agents proposer and acceptor (In Lamport\u0026rsquo;s Paxos Made Simple, a server could be proposer, acceptor and lisenter at the same time). To chose an value, proposer is using a 2-phase protocal to lock down an entry in the acceptors\u0026rsquo; logs.\nWith Paxos, we can meet the requirements of safety and liveness:\nSafety: Nothing bad is going to happen - at least one value is chosen Liveness: Eventually a good thing is going to happen - one value is going to be chosen eventually To avoid livelock, we could use exponential backoff or leader election in Muliti-Paxos Only proposer knows which value has been chosen, other proposers must execute Paxos with their own proposal to get the chosen value As said in the beginning, Multi-Paxos is the multiple use of Paxos which means we will use Paxos to choose a value for a log entry every time the client make request. Thus Dr. Ongaro pointed out several issues of Multi-Paxos and suggested solutions:\nWhich log entry to use for a given client request? When jmp command is sent to the server s1, s1 need to track the variable firstUnchosenIndex If the firstUnchosenIndex already has a value, s1 will send the proposal using the existing value and increment firstUnchosenIndex once the value is chosen Then s1 will start from the beginning until the firstUnchosenIndex has no value then s1 makes proposal from jmp command The server could handle the client requests concurrently Suppose we have multiple requests We can try each unchosen index for one independent request So we would need a collection of UnchosenIndex Then the application of log entry should be sequential in the state trasaction machine. Paxos is slow because of 2-phase protocal and could have intense competition with several proposers (livelock) We should use leader-election to ensure a single Proposer at any given time Bully algorithm - the server with the largest ID is the leader Each server sends the heartbeat to other servers every T ms If a server hasn\u0026rsquo;t recevied the heartbeat from server with higher ID in last 2T ms, it is a leader Accept requests from clients Acts as proposer and acceptor The rest servers are followers Redirected request to leader Acts as acceptor We could send proposal msg to the entire log thus all the log entries would have a global proposal number which can block all old proposals Then we should collect highestProposal accepcted for current entry and noMoreAccepted bool from the propose request noMoreAccepted: no more accepcted values after the current entry If the leader recevies noMoreAccepted from the majority acceptors, the leader doesn\u0026rsquo;t have to send any prepare requests and only need accept requests How to ensure the full replication across servers? Left issues: Log entries not fully replicated Only proposer knows when entry is chosen Solutions: Keep send accept request until all acceptors respond mark entires chosen infinite to prevent overwritten each server should track firstUnchosenIndex proposer include firstUnchosenIndex in its accept requests acceptor should mark all entries chosen if the entires are lower than firstUnchosenIndex and the entries have the same proposal number acceptor could consult with the leader about unknown index acceptor includes its firstUnchosenIndex in accept replies if proposer\u0026rsquo;s fristUnchosenIndex is larger then it sends the success request to acceptor to confirm the chosen status and acceptor keep returning the firstUnchosenIndex till it catches up How to deal with fail-stop issues from client perspective? The client could submit the same request multiple times thus we need idempotent key associated with each request How to update the configuration of servers? Configuration change impacts the number of servers determines majority quorum size $\\alpha$ parameter save the configuration as normal log entries configuration is treated like any other CURD commands save the configuration at the entry i then all the entry i + $\\alpha$ will use the configuration at entry i if there is configuration file/command e.g. if we updated the configuration, the configuration file will be stored at index $i$ based on paxos and everytime the leader should check the position $i$ to see if there is a configuration file if yes, the configuration should be updated otherwise, the existing configuration should be used if $\\alpha$ is too small, the system wind up as a synchronous system if $\\alpha$ is too large, the update of configuration could take a while we could use no-op command to quickly update the log entires between $i$ and $i+\\alpha$ so configuration could update Engineering Impl This section will summaries the details of the RPC between proposer and acceptors.\nServer Each server has its own logs to maintain and we need make sure the logs are consistent across all servers Leader election: only leader acts as Proposer to replicate the log entries State log value proposal mark the entries known to be chosen each server maintains firstUnchosenIndex Message proposer -\u0026gt; acceptor - prepare msg - global proposal number - index - value - accept msg - for acceptor sent noMoreAccepted, only need send accept msg - once the majority acceptor sent noMoreAccepted, only need send accept msg - keep retrying until all acceptors respond - {proposal: p; index: i; value: v; firstUnchosenIndex: u_i;} - mark all entries before firstUnchoseIndex equal to proposal as chosen - put the proposal and value at index i of log acceptor -\u0026gt; proposer response msg noMoreAccepted firstUnchosenIndex proposer will compare its firstUnchosenIndex with accpetor\u0026rsquo;s firstUnchosenIndex if \u0026gt;: the propser will send Success msg to acceptor to confirm the entry is took {index: i; value: v} then acceptor will updated acceptedValue[i] and acceptedProposal[i] and return another response contains the updated firstUnchosenIndex Client Any possible command like CRUD operations on database.\ngRPC Service Proposer Prepare Msg Proposal Accept Msg Proposal Index Value FirstUnchosenIndex Success Msg Index Value Acceptor Response Msg FirstUnchosenIndex noMoreUnaccepted Client Command like CRUD The code can be found at [here](ydeng11/Multi-Paxos (github.com)).\n","permalink":"/posts/2023/the-elegant-consensus-algorithm---multi-paxos---in-java-grpc/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003ePaxos is a distributed consensus algorithm developed by Lamport. It is proved optimal and many systems are built based on it like chubby and zookeeper.\u003c/p\u003e\n\u003cp\u003eBut this article is not going to discuss Lamport\u0026rsquo;s orginal paper but focus on the engineering implementations. My colleague highly recommended Ongaro\u0026rsquo;s lecture of Paxos and said it is the best source of learning Paxos. I cannot agree more after studying it. That being said, I will briefly talk about Paxos and Multi-Paxos and dive into the engineering implementations.\u003c/p\u003e","title":"The elegant consensus algorithm - Multi-Paxos - in Java gRPC"},{"content":"If you are not using Java or Intellij Idea for your project, you could stop reading.\nCouple months ago, I am very excited with WSL2 and it works perfectly for me to work on some Java projects in Intellij Idea. Somehow everything is upside down and obviously after some updates of windows though I still stick with win10.\nLong story short! Intellij Idea is really slow with WSL regarding the version. The indexing takes forever and it is not new as I found in this thread and this thread and the problem could be one of the following:\nIntellij is accesing the files through the mount which is not ideal; Windows security is doing virus scan which could also impact the speed Given the suggestions in these threads, I exclude a bunch of files and folders including the idea.exe and \\\\wsl$\\Ubuntu\\home\\user\\project and none of them work for me and obviously other people. Then I tried VS code and it obviously has another problem with adding target/generated-sources to the class path in maven. I spent hours on it and I decided to quit as I really prefer Idea than VS code from Java perspective.\nSo I spend another several hours installing Ubuntu as a double system for me to code Java specfically. I think WSL is diffiuclt with Intellij now since I saw many other complains with other Intellij softwares and the supporter of Intellij said there is nothing they could do since the problem is induced by the change from windows.\nMy advice to people in my situation - a PC gamer and need code more than Python - embrace the idea of double system and use cloud drive to sychornize.\n","permalink":"/posts/2023/why-i-dont-like-wsl/","summary":"\u003cp\u003e\u003cstrong\u003eIf you are not using Java or Intellij Idea for your project, you could stop reading.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eCouple months ago, I am very excited with WSL2 and it works perfectly for me to work on some Java projects in Intellij Idea. Somehow everything is upside down and obviously after some updates of windows though I still stick with win10.\u003c/p\u003e\n\u003cp\u003eLong story short! \u003cstrong\u003eIntellij Idea is really slow with WSL regarding the version\u003c/strong\u003e. The indexing takes forever and it is not new as I found in this \u003ca href=\"https://youtrack.jetbrains.com/issue/WI-63786/Working-with-projects-on-WSL-is-extremely-slow-basically-not-possible-to-work-with\"\u003ethread\u003c/a\u003e and this \u003ca href=\"https://youtrack.jetbrains.com/issue/IDEA-274193/IntelliJ-extremely-slow-on-listing-directory-contents-of-WSL-filesystem\"\u003ethread\u003c/a\u003e and the problem could be one of the following:\u003c/p\u003e","title":"Why I don't like WSL"},{"content":"","permalink":"/posts/2023/_index.md/","summary":"","title":""},{"content":"","permalink":"/posts/2024/_index.md/","summary":"","title":""},{"content":"","permalink":"/posts/2025/_index.md/","summary":"","title":""}]