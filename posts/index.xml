<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on iHelio</title>
    <link>https://ydeng11.github.io/ihelio/posts/</link>
    <description>Recent content in Posts on iHelio</description>
    <image>
      <title>iHelio</title>
      <url>https://ydeng11.github.io/ihelio/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://ydeng11.github.io/ihelio/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.128.2</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 25 Jan 2025 22:42:13 -0500</lastBuildDate>
    <atom:link href="https://ydeng11.github.io/ihelio/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Remote Accessing NAS using Tailscale</title>
      <link>https://ydeng11.github.io/ihelio/posts/2025/remote_accessing_nas_using_tailscale/</link>
      <pubDate>Sat, 25 Jan 2025 22:42:13 -0500</pubDate>
      <guid>https://ydeng11.github.io/ihelio/posts/2025/remote_accessing_nas_using_tailscale/</guid>
      <description>Remote Accessing NAS using Tailscale Simply put, Tailscale is a private VPN built on the WireGuard protocol, designed to support a Zero Trust architecture for managing devices within a subnet. As a mesh network, Tailscale enhances connectivity when accessing NAS services remotely. Compared to traditional VPNs and firewalls, WireGuard and Zero Trust offer significantly better security since every device requires authentication to communicate with others. This granular access control minimizes risk—even if an attacker compromises one device, they won&amp;rsquo;t automatically gain access to the entire private network.</description>
    </item>
    <item>
      <title>Life Wiki Selfhosted on Your NAS</title>
      <link>https://ydeng11.github.io/ihelio/posts/2025/life-wiki-selfhosted-on-your-nas/</link>
      <pubDate>Fri, 10 Jan 2025 00:28:28 -0500</pubDate>
      <guid>https://ydeng11.github.io/ihelio/posts/2025/life-wiki-selfhosted-on-your-nas/</guid>
      <description>Introduction I used Notion for a couple of years and found it to be one of the best tools for note-taking and building a personal wiki. Why did I stop using it? It wasn&amp;rsquo;t about the cost—Notion&amp;rsquo;s freemium plan is perfectly sufficient for personal use. Instead, there were two main issues that drove me away.
First, typing math equations in Notion is cumbersome because you have to use a dedicated &amp;ldquo;Block&amp;rdquo; for them.</description>
    </item>
    <item>
      <title>Building a Single Page Application (SPA) with Quarkus and Quinoa</title>
      <link>https://ydeng11.github.io/ihelio/posts/2024/building-a-single-page-application-spa-with-quarkus-and-quinoa/</link>
      <pubDate>Sat, 21 Dec 2024 23:21:14 -0400</pubDate>
      <guid>https://ydeng11.github.io/ihelio/posts/2024/building-a-single-page-application-spa-with-quarkus-and-quinoa/</guid>
      <description>Quarkus is an exciting framework for building modern Java applications, and Quinoa takes it up a notch by streamlining Single Page Application (SPA) development. Together, they enable a seamless workflow for both frontend and backend developers. This guide walks through setting up a Quarkus-based SPA using React as an example, although the process works just as well for other frameworks.
Why Quinoa Matters Quinoa elegantly integrates frontend development into Quarkus projects.</description>
    </item>
    <item>
      <title>How to Sideload and Unlock Premium Apps for Free</title>
      <link>https://ydeng11.github.io/ihelio/posts/2024/how-to-sideload-and-unlock-premium-apps-for-free/</link>
      <pubDate>Sat, 21 Dec 2024 23:21:14 -0400</pubDate>
      <guid>https://ydeng11.github.io/ihelio/posts/2024/how-to-sideload-and-unlock-premium-apps-for-free/</guid>
      <description>Google, like many large tech companies, has tightened its grip on profits, making it increasingly difficult for customers to find affordable workarounds. The days of using a VPN to pay for discounted YouTube or Spotify Premium are mostly over. Without a locally issued card, paying for premium services remotely is nearly impossible, with Kazakhstan being the sole exception. While virtual cards like Wise and Revolut can bypass some checks, the process is cumbersome and carries its own risks.</description>
    </item>
    <item>
      <title>How I Upgraded My Mac Mini Storage with an External SSD and Solved the Home Directory Issue</title>
      <link>https://ydeng11.github.io/ihelio/posts/2024/how-i-upgraded-my-mac-mini-storage-with-an-external-ssd-and-solved-the-home-directory-issue/</link>
      <pubDate>Tue, 09 Jul 2024 21:37:51 -0400</pubDate>
      <guid>https://ydeng11.github.io/ihelio/posts/2024/how-i-upgraded-my-mac-mini-storage-with-an-external-ssd-and-solved-the-home-directory-issue/</guid>
      <description>A couple of months ago, I had the brilliant idea to upgrade my Mac mini M2 by installing MacOS on an external M.2 SSD. For under 200 bucks, I went from a measly 250GB to a whopping 2TB. I was on cloud nine, reveling in my newfound digital real estate, until the other weekend when the system decided to crash my party by refusing to download upgrades due to a lack of space.</description>
    </item>
    <item>
      <title>How to Build an Amazing and Productive Terminal</title>
      <link>https://ydeng11.github.io/ihelio/posts/2024/how-to-build-an-amazing-and-productive-terminal/</link>
      <pubDate>Tue, 09 Jul 2024 21:37:47 -0400</pubDate>
      <guid>https://ydeng11.github.io/ihelio/posts/2024/how-to-build-an-amazing-and-productive-terminal/</guid>
      <description>Everyone wants a cool terminal and WezTerm is the coolest one in my opinion. It is easy to manage and we can setup a new environment with minutes in association with GNS stow - a symlink manager.
WezTerm is easy to configure since it is using lua and very friendly to read and learn. I am dumb at iTerm2 and Tmux, but it only took me 30 mins to start tweaking the config.</description>
    </item>
    <item>
      <title>Building a WebApp using React and Quarkus</title>
      <link>https://ydeng11.github.io/ihelio/posts/2024/building-webapp-using-react-and-quarkus/</link>
      <pubDate>Fri, 05 Jul 2024 23:21:14 -0400</pubDate>
      <guid>https://ydeng11.github.io/ihelio/posts/2024/building-webapp-using-react-and-quarkus/</guid>
      <description>My first website was an adventure straight out of 2014, built with Dreamweaver and some basic HTML and CSS. Picture a static site, lovingly crafted to display the research and papers from our lab. The end product was, well, let’s just say not exactly internet-breaking. But hey, it was my first foray into the wild world of web development!
Fast forward 10 years, after diving deep into data science, machine learning, and platform engineering, I realized something horrifying: I was still a web development noob.</description>
    </item>
    <item>
      <title>Coding Pattern: Kadane&#39;s Algo</title>
      <link>https://ydeng11.github.io/ihelio/posts/2023/coding-pattern-kadanes-algo/</link>
      <pubDate>Thu, 30 Nov 2023 23:37:39 -0500</pubDate>
      <guid>https://ydeng11.github.io/ihelio/posts/2023/coding-pattern-kadanes-algo/</guid>
      <description>Imagine you&amp;rsquo;re walking along a path that has treasure chests and traps. Some chests have gold coins, and some traps take away coins. You want to find the part of the path where you can get the most coins.
The key idea: It is a dynamic programming algorithm for finding the maximum contiguous sum subarray in a given array. It is a simple and efficient algorithm that works by maintaining two variables:</description>
    </item>
    <item>
      <title>Coding Pattern: Dynamic Programming</title>
      <link>https://ydeng11.github.io/ihelio/posts/2023/coding-pattern-dynamic-programming/</link>
      <pubDate>Thu, 30 Nov 2023 16:28:21 -0400</pubDate>
      <guid>https://ydeng11.github.io/ihelio/posts/2023/coding-pattern-dynamic-programming/</guid>
      <description>Preface Facing the Dynamic Programming Challenge
Like many others, I initially found Dynamic Programming (DP) on LeetCode daunting and perplexing. However, this challenging journey led to profound insights. My initial misconception was that DP was all about complexity, but I learned it&amp;rsquo;s fundamentally about simplifying complex problems into manageable segments. Here&amp;rsquo;s my journey into understanding DP and why it&amp;rsquo;s a crucial tool in a programmer&amp;rsquo;s toolkit.
Unraveling Dynamic Programming The Essence of DP</description>
    </item>
    <item>
      <title>Coding Pattern: Recursion</title>
      <link>https://ydeng11.github.io/ihelio/posts/2023/coding-pattern-recursion/</link>
      <pubDate>Sun, 05 Nov 2023 16:41:32 -0500</pubDate>
      <guid>https://ydeng11.github.io/ihelio/posts/2023/coding-pattern-recursion/</guid>
      <description>Overview Recursion is a way of solving a problem by breaking it down into smaller problems of the same type. The smaller problems are then solved recursively, until a base case is reached. The base case is a simple problem that can be solved without recursion.
Imagine you have a big box of toy blocks, and each block represents a problem you need to solve. Some blocks are big (complex problems), and some are tiny (simple problems).</description>
    </item>
    <item>
      <title>Coding Pattern: Trie</title>
      <link>https://ydeng11.github.io/ihelio/posts/2023/coding-pattern-trie/</link>
      <pubDate>Sun, 22 Oct 2023 21:41:02 -0400</pubDate>
      <guid>https://ydeng11.github.io/ihelio/posts/2023/coding-pattern-trie/</guid>
      <description>Overview The union-find algorithm is a data structure and algorithm that maintains a collection of disjoint sets. A disjoint set is a set of elements that are not connected to each other. The union-find algorithm can be used to perform the following operations:
Find: Find the set that an element belongs to. Union: Merge two sets together. The union-find algorithm is often used to solve problems that involve graph connectivity. For example, the union-find algorithm can be used to determine whether two nodes in a graph are connected, or to find all of the connected components in a graph.</description>
    </item>
    <item>
      <title>Coding Pattern: Two Pointers</title>
      <link>https://ydeng11.github.io/ihelio/posts/2023/coding-pattern-two-pointers/</link>
      <pubDate>Thu, 12 Oct 2023 00:44:00 -0400</pubDate>
      <guid>https://ydeng11.github.io/ihelio/posts/2023/coding-pattern-two-pointers/</guid>
      <description>Overview It is not easy to summarize the pattern of Two Pointers, but most likely it is used for list and linked list and the required time complexity is O(N) - the underlying pattern allows us to use Two Pointers to go through the list once to get the results.
Common usage:
Linear Structure: Typically applied to a sorted array or linked list. Two pointers might move in the same direction or in opposite directions.</description>
    </item>
    <item>
      <title>Coding Pattern: Divide &amp; Conquer</title>
      <link>https://ydeng11.github.io/ihelio/posts/2023/coding-pattern-divide--conquer/</link>
      <pubDate>Sun, 08 Oct 2023 22:46:03 -0400</pubDate>
      <guid>https://ydeng11.github.io/ihelio/posts/2023/coding-pattern-divide--conquer/</guid>
      <description>Overview The Divide-n-Conquer strategy often employs recursion, as it relies on applying the same method to reduce the problem size by half and subsequently combining the outcomes for the ultimate solution.
I view Divide-n-Conquer in a light similar to MapReduce, particularly when the task involves transformation. MapReduce breaks down a large problem into more manageable, independent sub-problems. Since each of these sub-problems operates autonomously, we can address them sequentially and still integrate their solutions.</description>
    </item>
    <item>
      <title>Coding Pattern: Binary Search</title>
      <link>https://ydeng11.github.io/ihelio/posts/2023/coding-pattern-binary-search/</link>
      <pubDate>Sun, 08 Oct 2023 16:28:21 -0400</pubDate>
      <guid>https://ydeng11.github.io/ihelio/posts/2023/coding-pattern-binary-search/</guid>
      <description>Overview In one word, binary search is to search for a target in a sorted array. The idea is to shrink the search space to empty.
It must be sorted because we can be sure how to shrink the search space and we normally reduce the search space by half so the time complexity is O(logN) where N is the size of entire search space.
One common problem to understand Binary Search is how to identify the boundary of the search space.</description>
    </item>
    <item>
      <title>Build a home media server but automated</title>
      <link>https://ydeng11.github.io/ihelio/posts/2023/build-a-home-media-server/</link>
      <pubDate>Sat, 16 Sep 2023 16:17:15 -0400</pubDate>
      <guid>https://ydeng11.github.io/ihelio/posts/2023/build-a-home-media-server/</guid>
      <description>Intro In Route transmission to VPN container, I talked about how to download contents via VPN tunnel so we can get rid of some troubles. But that is far from enough for us to build a home media server which should work as Netflix and Hulu to us. We shouldn&amp;rsquo;t bother with the torrent and subtitle search. Once we add a show to our watch list, everything should be set up automatically.</description>
    </item>
    <item>
      <title>Expose NAS Services with Att Gateway</title>
      <link>https://ydeng11.github.io/ihelio/posts/2023/expose-nas-services-with-att-gateway/</link>
      <pubDate>Sat, 16 Sep 2023 16:17:15 -0400</pubDate>
      <guid>https://ydeng11.github.io/ihelio/posts/2023/expose-nas-services-with-att-gateway/</guid>
      <description>Recently I changed my ISP to ATT to try their fiber, and they gave me the bgw320 as the gateway for the Internet service. And I have trouble connecting to my Synology&amp;rsquo;s services like Jellyfin.
I suspect it has some conflicts with the network of these docker services running in Synology or the internet setup of Synology. Considering the configuration of docker network could be another rabbit hole, I didn&amp;rsquo;t go that route.</description>
    </item>
    <item>
      <title>FLP impossibility in plain language</title>
      <link>https://ydeng11.github.io/ihelio/posts/2023/flp-impossibility-in-plain-language/</link>
      <pubDate>Sat, 16 Sep 2023 16:17:15 -0400</pubDate>
      <guid>https://ydeng11.github.io/ihelio/posts/2023/flp-impossibility-in-plain-language/</guid>
      <description>Overview FLP impossibility is to prove there is no algorithm can really achieve totally correct consensus in asychronous system under assumption at most one process is faulty. The paper is very famous and also difficult to understand given the wording. This article is to explain FLP impossibility in a plain way.
Aschronous System In FLP paper, there are some settings/assumptions made to describe an aschronous system which is used in the proof.</description>
    </item>
    <item>
      <title>gRPC tutorial - 1: Overview</title>
      <link>https://ydeng11.github.io/ihelio/posts/2023/grpc-tutorial---1/</link>
      <pubDate>Sat, 16 Sep 2023 16:17:15 -0400</pubDate>
      <guid>https://ydeng11.github.io/ihelio/posts/2023/grpc-tutorial---1/</guid>
      <description>What is gRPC gRPC is a high performance open-source freature-rich RPC (remote procedure calls) framework developed by google. “g” stands for many different meaning like green, good and etc.
It is a protocal that allows a program to
execute a procedure of another program located in other computer without the developer explicitly coding the details for the remote interaction gRPC is one kind of s2s call and widely used to replace REST API in the backend due to:</description>
    </item>
    <item>
      <title>gRPC tutorial - 2: Enviroment Setup</title>
      <link>https://ydeng11.github.io/ihelio/posts/2023/grpc-tutorial---2/</link>
      <pubDate>Sat, 16 Sep 2023 16:17:15 -0400</pubDate>
      <guid>https://ydeng11.github.io/ihelio/posts/2023/grpc-tutorial---2/</guid>
      <description>Environment Setup I am using Gradle and Intellij Idea for this project (Maven setting can be found here). The Gradle setting is shown as following:
plugins { id &amp;#34;com.google.protobuf&amp;#34; version &amp;#34;0.8.18&amp;#34; id &amp;#34;java&amp;#34; } group &amp;#39;today.ihelio.grpc.tutorial&amp;#39; version &amp;#39;1.0-SNAPSHOT&amp;#39; sourceCompatibility = 15 repositories { mavenCentral() } dependencies { implementation &amp;#39;junit:junit:4.13.1&amp;#39; testImplementation &amp;#39;org.junit.jupiter:junit-jupiter-api:5.8.1&amp;#39; testRuntimeOnly &amp;#39;org.junit.jupiter:junit-jupiter-engine:5.8.1&amp;#39; implementation group: &amp;#39;com.google.protobuf&amp;#39;, name: &amp;#39;protobuf-java&amp;#39;, version: &amp;#39;3.21.4&amp;#39; runtimeOnly group: &amp;#39;com.google.protobuf&amp;#39;, name: &amp;#39;protobuf-java-util&amp;#39;, version: &amp;#39;3.21.4&amp;#39; implementation group: &amp;#39;io.grpc&amp;#39;, name: &amp;#39;grpc-all&amp;#39;, version: &amp;#39;1.</description>
    </item>
    <item>
      <title>gRPC tutorial - 3: Unary Call</title>
      <link>https://ydeng11.github.io/ihelio/posts/2023/grpc-tutorial---3/</link>
      <pubDate>Sat, 16 Sep 2023 16:17:15 -0400</pubDate>
      <guid>https://ydeng11.github.io/ihelio/posts/2023/grpc-tutorial---3/</guid>
      <description>Unary call is very simple to understand, it is essentially a normal REST API call. Each request will get a single response from the server.
In this project, we implement unary call to create books in our store.
First, we need create book_message.proto which is a book pojo carrying the related info of book. Simply speaking, each message is pojo we are gonna use in our service.
syntax = &amp;#34;proto3&amp;#34;; package book; option java_multiple_files = true; option java_package = &amp;#34;today.</description>
    </item>
    <item>
      <title>gRPC tutorial - 4: Client Streaming</title>
      <link>https://ydeng11.github.io/ihelio/posts/2023/grpc-tutorial---4/</link>
      <pubDate>Sat, 16 Sep 2023 16:17:15 -0400</pubDate>
      <guid>https://ydeng11.github.io/ihelio/posts/2023/grpc-tutorial---4/</guid>
      <description>We will implement a function to upload image when we create the books like the cover and something else. And we would split the image into chunks and we upload them chunk by chunk until all data are transfered. As we defined earlier in the proto, we could have multiple images for one book. So we will need a function called uploadImage and uploade all images one by one.
Let&amp;rsquo;s start with the proto of image:</description>
    </item>
    <item>
      <title>gRPC tutorial - 5: Server Streaming</title>
      <link>https://ydeng11.github.io/ihelio/posts/2023/grpc-tutorial---5/</link>
      <pubDate>Sat, 16 Sep 2023 16:17:15 -0400</pubDate>
      <guid>https://ydeng11.github.io/ihelio/posts/2023/grpc-tutorial---5/</guid>
      <description>Regarding server streaming, we will implement a simplified recommendation service to recommend the books based on the popularity. Like client streaming, we would need a response handler - StreamObserver&amp;lt;RecommendBookResponse&amp;gt; - to handle a sequential of responses given one request.
Since this is a recommendation function, we would need search the books from our book store given the criteria. Thus we would need add a searchBook method to our book store.</description>
    </item>
    <item>
      <title>gRPC tutorial - 6: Bidirectional streaming</title>
      <link>https://ydeng11.github.io/ihelio/posts/2023/grpc-tutorial---6/</link>
      <pubDate>Sat, 16 Sep 2023 16:17:15 -0400</pubDate>
      <guid>https://ydeng11.github.io/ihelio/posts/2023/grpc-tutorial---6/</guid>
      <description>We will speed it up a bit in this chapter after implementing unary call and one direction streaming. As always, we need implement our core logic which includes our book store which handles rating update and computing and book service which handls the request and return response.
@Override public Book rateBook(String bookID, Integer rating) { Book book = inMemoryBookStore.getOrDefault(bookID, null); if (book == null) { throw NOT_FOUND.withDescription(&amp;#34;book not found&amp;#34;) .asRuntimeException(); } inMemoryBookStore.</description>
    </item>
    <item>
      <title>gRPC tutorial - 7: Takeaway</title>
      <link>https://ydeng11.github.io/ihelio/posts/2023/grpc-tutorial---7/</link>
      <pubDate>Sat, 16 Sep 2023 16:17:15 -0400</pubDate>
      <guid>https://ydeng11.github.io/ihelio/posts/2023/grpc-tutorial---7/</guid>
      <description>The four types of gRPC covers the majority use case when we design API under HTTP/2 since we could either send one request/response or multiple requests/responses in one call.
And using proto buffer enables us to separate the implementation of service, server and client which are the three components we need develop for each RPC service. Though the service could also depend on several components. But the idea is the simple, we need implement service, server and client for each RPC service and we don&amp;rsquo;t have to stick with one language for server and client.</description>
    </item>
    <item>
      <title>How to make a microservice with Quarkus</title>
      <link>https://ydeng11.github.io/ihelio/posts/2023/how-to-make-a-microservice-with-quarkus/</link>
      <pubDate>Sat, 16 Sep 2023 16:17:15 -0400</pubDate>
      <guid>https://ydeng11.github.io/ihelio/posts/2023/how-to-make-a-microservice-with-quarkus/</guid>
      <description>What is Quarkus Quarkus is a full-stack, Kubernetes-native Java framework that was developed by Red Hat. It first appeared in early 2019, aimed at optimizing Java specifically for containers and enabling it to become an effective platform in serverless environments.
The motivation behind Quarkus was to breathe new life into the Java ecosystem for modern cloud-native applications. It seeks to overcome the traditional shortcomings of Java, like slow startup time and high memory consumption, which are particularly notable in containerized environments.</description>
    </item>
    <item>
      <title>How to route transmission to VPN container?</title>
      <link>https://ydeng11.github.io/ihelio/posts/2023/how-to-route-transmission-to-vpn-container/</link>
      <pubDate>Sat, 16 Sep 2023 16:17:15 -0400</pubDate>
      <guid>https://ydeng11.github.io/ihelio/posts/2023/how-to-route-transmission-to-vpn-container/</guid>
      <description>Intro When you have a NAS at home, it feel bad if you don&amp;rsquo;t keep it running for something even if you don&amp;rsquo;t use it. It is the major backup to store the photos we shoot with our iphones. However, it is just basic use and hosting a media center with it sounds more cool. I used to use transmission-openvpn and it works perfectly, however, my VPN expires and I decided to use proton free tier.</description>
    </item>
    <item>
      <title>Mastering the Art of Car Dealership Negotiations</title>
      <link>https://ydeng11.github.io/ihelio/posts/2023/mastering-the-art-of-car-dealership-negotiations/</link>
      <pubDate>Sat, 16 Sep 2023 16:17:15 -0400</pubDate>
      <guid>https://ydeng11.github.io/ihelio/posts/2023/mastering-the-art-of-car-dealership-negotiations/</guid>
      <description>Navigating the realm of negotiation, especially with car dealers, feels like threading a needle in the dark. Dealers hold most of the cards, thanks to the imbalance of information. They decide what to reveal, while we, as buyers, have to piece together a strategy from fragments. But fret not! With patience, strategy, and a keen eye for details, you can level the playing field.
🚫 Rule #1: Resist the Urge to Commit Ever been offered a tempting discount right off the bat?</description>
    </item>
    <item>
      <title>Neural Network in Numpy</title>
      <link>https://ydeng11.github.io/ihelio/posts/2023/neural-network-in-numpy/</link>
      <pubDate>Sat, 16 Sep 2023 16:17:15 -0400</pubDate>
      <guid>https://ydeng11.github.io/ihelio/posts/2023/neural-network-in-numpy/</guid>
      <description>This is to implement backpropagation algorithm in numpy which would help me to further understand how this works.
import pandas as pd import numpy as np from pdb import set_trace from sklearn import datasets Design the network structure Each layer contains the weights/bias and activation union structures = [ {&amp;#34;input_dim&amp;#34;: 2, &amp;#34;output_dim&amp;#34;: 25, &amp;#34;activation&amp;#34;: &amp;#34;relu&amp;#34;}, {&amp;#34;input_dim&amp;#34;: 25, &amp;#34;output_dim&amp;#34;: 50, &amp;#34;activation&amp;#34;: &amp;#34;relu&amp;#34;}, {&amp;#34;input_dim&amp;#34;: 50, &amp;#34;output_dim&amp;#34;: 50, &amp;#34;activation&amp;#34;: &amp;#34;relu&amp;#34;}, {&amp;#34;input_dim&amp;#34;: 50, &amp;#34;output_dim&amp;#34;: 25, &amp;#34;activation&amp;#34;: &amp;#34;relu&amp;#34;}, {&amp;#34;input_dim&amp;#34;: 25, &amp;#34;output_dim&amp;#34;: 1, &amp;#34;activation&amp;#34;: &amp;#34;sigmoid&amp;#34;}, ] Initiate the parameters The weights can be random number and bias are preferred to be small postive values in order to pass the relu in the beginning.</description>
    </item>
    <item>
      <title>Sneak peek at the asynchronous Java</title>
      <link>https://ydeng11.github.io/ihelio/posts/2023/sneak-peek-at-the-asynchronous-java/</link>
      <pubDate>Sat, 16 Sep 2023 16:17:15 -0400</pubDate>
      <guid>https://ydeng11.github.io/ihelio/posts/2023/sneak-peek-at-the-asynchronous-java/</guid>
      <description>Java 19 is here with the preview of loom project. Loom project is the one helps Java become asynchronous and come back to the table to compete with other asynchronous language such as Golang. But why do we need Java to be asynchronous?
Blocking It is all because we don&amp;rsquo;t want to be blocked. And the best example must be how you do your driver license renewal at the DMV. I remember I work up at 5:30 in the morning and drove to the DMV where there was already a line of 50 people.</description>
    </item>
    <item>
      <title>The elegant consensus algorithm - Multi-Paxos - in Java gRPC</title>
      <link>https://ydeng11.github.io/ihelio/posts/2023/the-elegant-consensus-algorithm---multi-paxos---in-java-grpc/</link>
      <pubDate>Sat, 16 Sep 2023 16:17:15 -0400</pubDate>
      <guid>https://ydeng11.github.io/ihelio/posts/2023/the-elegant-consensus-algorithm---multi-paxos---in-java-grpc/</guid>
      <description>Introduction Paxos is a distributed consensus algorithm developed by Lamport. It is proved optimal and many systems are built based on it like chubby and zookeeper.
But this article is not going to discuss Lamport&amp;rsquo;s orginal paper but focus on the engineering implementations. My colleague highly recommended Ongaro&amp;rsquo;s lecture of Paxos and said it is the best source of learning Paxos. I cannot agree more after studying it. That being said, I will briefly talk about Paxos and Multi-Paxos and dive into the engineering implementations.</description>
    </item>
    <item>
      <title>Why I don&#39;t like WSL</title>
      <link>https://ydeng11.github.io/ihelio/posts/2023/why-i-dont-like-wsl/</link>
      <pubDate>Sat, 16 Sep 2023 16:17:15 -0400</pubDate>
      <guid>https://ydeng11.github.io/ihelio/posts/2023/why-i-dont-like-wsl/</guid>
      <description>If you are not using Java or Intellij Idea for your project, you could stop reading.
Couple months ago, I am very excited with WSL2 and it works perfectly for me to work on some Java projects in Intellij Idea. Somehow everything is upside down and obviously after some updates of windows though I still stick with win10.
Long story short! Intellij Idea is really slow with WSL regarding the version.</description>
    </item>
  </channel>
</rss>
